TakeOrderedAndProject(limit=100, orderBy=[i_item_id#0 ASC NULLS FIRST,i_item_desc#0 ASC NULLS FIRST,s_state#0 ASC NULLS FIRST], output=[i_item_id#0,i_item_desc#0,s_state#0,store_sales_quantitycount#0L,store_sales_quantityave#0,store_sales_quantitystdev#0,store_sales_quantitycov#0,as_store_returns_quantitycount#0L,as_store_returns_quantityave#0,as_store_returns_quantitystdev#0,store_returns_quantitycov#0,catalog_sales_quantitycount#0L,catalog_sales_quantityave#0,catalog_sales_quantitystdev#0,catalog_sales_quantitycov#0])
+- *HashAggregate(keys=[i_item_id#0, i_item_desc#0, s_state#0], functions=[count(ss_quantity#0), avg(cast(ss_quantity#0 as bigint)), stddev_samp(cast(ss_quantity#0 as double)), count(sr_return_quantity#0L), avg(sr_return_quantity#0L), stddev_samp(cast(sr_return_quantity#0L as double)), count(cs_quantity#0), avg(cast(cs_quantity#0 as bigint)), stddev_samp(cast(cs_quantity#0 as double))])
   +- Exchange hashpartitioning(i_item_id#0, i_item_desc#0, s_state#0, 5)
      +- *HashAggregate(keys=[i_item_id#0, i_item_desc#0, s_state#0], functions=[partial_count(ss_quantity#0), partial_avg(cast(ss_quantity#0 as bigint)), partial_stddev_samp(cast(ss_quantity#0 as double)), partial_count(sr_return_quantity#0L), partial_avg(sr_return_quantity#0L), partial_stddev_samp(cast(sr_return_quantity#0L as double)), partial_count(cs_quantity#0), partial_avg(cast(cs_quantity#0 as bigint)), partial_stddev_samp(cast(cs_quantity#0 as double))])
         +- *Project [ss_quantity#0, cs_quantity#0, s_state#0, i_item_desc#0, i_item_id#0, sr_return_quantity#0L]
            +- *BroadcastHashJoin [ss_item_sk#0], [i_item_sk#0], Inner, BuildRight
               :- *Project [ss_quantity#0, cs_quantity#0, s_state#0, ss_item_sk#0, sr_return_quantity#0L]
               :  +- *BroadcastHashJoin [ss_store_sk#0], [s_store_sk#0], Inner, BuildRight
               :     :- *Project [ss_quantity#0, cs_quantity#0, ss_item_sk#0, ss_store_sk#0, sr_return_quantity#0L]
               :     :  +- *BroadcastHashJoin [cs_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
               :     :     :- *Project [ss_quantity#0, cs_quantity#0, ss_item_sk#0, ss_store_sk#0, sr_return_quantity#0L, cs_sold_date_sk#0]
               :     :     :  +- *BroadcastHashJoin [sr_returned_date_sk#0L], [cast(d_date_sk#0 as bigint)], Inner, BuildRight
               :     :     :     :- *Project [ss_quantity#0, cs_quantity#0, ss_item_sk#0, sr_returned_date_sk#0L, ss_store_sk#0, sr_return_quantity#0L, cs_sold_date_sk#0]
               :     :     :     :  +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
               :     :     :     :     :- *Project [ss_quantity#0, cs_quantity#0, ss_item_sk#0, sr_returned_date_sk#0L, ss_store_sk#0, ss_sold_date_sk#0, sr_return_quantity#0L, cs_sold_date_sk#0]
               :     :     :     :     :  +- *BroadcastHashJoin [sr_customer_sk#0L, sr_item_sk#0L], [cast(cs_bill_customer_sk#0 as bigint), cast(cs_item_sk#0 as bigint)], Inner, BuildRight
               :     :     :     :     :     :- *Project [ss_quantity#0, sr_customer_sk#0L, ss_item_sk#0, sr_item_sk#0L, sr_returned_date_sk#0L, ss_store_sk#0, ss_sold_date_sk#0, sr_return_quantity#0L]
               :     :     :     :     :     :  +- *BroadcastHashJoin [cast(ss_customer_sk#0 as bigint), cast(ss_item_sk#0 as bigint), cast(ss_ticket_number#0 as bigint)], [sr_customer_sk#0L, sr_item_sk#0L, sr_ticket_number#0L], Inner, BuildRight
               :     :     :     :     :     :     :- *Project [ss_quantity#0, ss_item_sk#0, ss_ticket_number#0, ss_store_sk#0, ss_sold_date_sk#0, ss_customer_sk#0]
               :     :     :     :     :     :     :  +- *Filter ((((isnotnull(ss_item_sk#0) && isnotnull(ss_store_sk#0)) && isnotnull(ss_ticket_number#0)) && isnotnull(ss_customer_sk#0)) && isnotnull(ss_sold_date_sk#0))
               :     :     :     :     :     :     :     +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_item_sk#0,ss_customer_sk#0,ss_store_sk#0,ss_ticket_number#0,ss_quantity#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ss_ticket_number:int...
               :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, bigint, true], input[1, bigint, true], input[3, bigint, true]))
               :     :     :     :     :     :        +- *Project [sr_customer_sk#0L, sr_item_sk#0L, sr_ticket_number#0L, sr_returned_date_sk#0L, sr_return_quantity#0L]
               :     :     :     :     :     :           +- *Filter (((isnotnull(sr_item_sk#0L) && isnotnull(sr_customer_sk#0L)) && isnotnull(sr_returned_date_sk#0L)) && isnotnull(sr_ticket_number#0L))
               :     :     :     :     :     :              +- *FileScan parquet default.store_returns[sr_returned_date_sk#0L,sr_item_sk#0L,sr_customer_sk#0L,sr_ticket_number#0L,sr_return_quantity#0L] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,sr_ticket_number:bigint...
               :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint), cast(input[2, int, true] as bigint)))
               :     :     :     :     :        +- *Project [cs_quantity#0, cs_bill_customer_sk#0, cs_sold_date_sk#0, cs_item_sk#0]
               :     :     :     :     :           +- *Filter ((isnotnull(cs_sold_date_sk#0) && isnotnull(cs_bill_customer_sk#0)) && isnotnull(cs_item_sk#0))
               :     :     :     :     :              +- *FileScan parquet default.catalog_sales[cs_sold_date_sk#0,cs_bill_customer_sk#0,cs_item_sk#0,cs_quantity#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,cs_quantity:int>
               :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
               :     :     :     :        +- *Project [d_date_sk#0]
               :     :     :     :           +- *Filter ((isnotnull(d_quarter_name#0) && isnotnull(d_date_sk#0)) && (2001Q1 = d_quarter_name#0))
               :     :     :     :              +- *FileScan parquet default.date_dim[d_date_sk#0,d_quarter_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_quarter_name:string>
               :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
               :     :     :        +- *Project [d_date_sk#0]
               :     :     :           +- *Filter (isnotnull(d_date_sk#0) && d_quarter_name#0 IN (2001Q1,2001Q2,2001Q3))
               :     :     :              +- *FileScan parquet default.date_dim[d_date_sk#0,d_quarter_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_quarter_name:string>
               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
               :     :        +- *Project [d_date_sk#0]
               :     :           +- *Filter (isnotnull(d_date_sk#0) && d_quarter_name#0 IN (2001Q1,2001Q2,2001Q3))
               :     :              +- *FileScan parquet default.date_dim[d_date_sk#0,d_quarter_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_quarter_name:string>
               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
               :        +- *Project [s_state#0, s_store_sk#0]
               :           +- *Filter isnotnull(s_store_sk#0)
               :              +- *FileScan parquet default.store[s_store_sk#0,s_state#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,s_state:string>
               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                  +- *Project [i_item_sk#0, i_item_desc#0, i_item_id#0]
                     +- *Filter isnotnull(i_item_sk#0)
                        +- *FileScan parquet default.item[i_item_sk#0,i_item_id#0,i_item_desc#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_item_desc:string>
