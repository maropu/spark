== Physical Plan ==
TakeOrderedAndProject (56)
+- * HashAggregate (55)
   +- Exchange (54)
      +- * HashAggregate (53)
         +- * Project (52)
            +- BroadcastNestedLoopJoin LeftSemi BuildRight (51)
               :- * Project (36)
               :  +- * SortMergeJoin Inner (35)
               :     :- * Sort (29)
               :     :  +- Exchange (28)
               :     :     +- * Project (27)
               :     :        +- * SortMergeJoin Inner (26)
               :     :           :- * Sort (20)
               :     :           :  +- Exchange (19)
               :     :           :     +- SortMergeJoin LeftSemi (18)
               :     :           :        :- * Sort (5)
               :     :           :        :  +- Exchange (4)
               :     :           :        :     +- * Filter (3)
               :     :           :        :        +- * ColumnarToRow (2)
               :     :           :        :           +- Scan parquet default.customer (1)
               :     :           :        +- * Sort (17)
               :     :           :           +- Exchange (16)
               :     :           :              +- * Project (15)
               :     :           :                 +- * BroadcastHashJoin Inner BuildRight (14)
               :     :           :                    :- * Filter (8)
               :     :           :                    :  +- * ColumnarToRow (7)
               :     :           :                    :     +- Scan parquet default.store_sales (6)
               :     :           :                    +- BroadcastExchange (13)
               :     :           :                       +- * Project (12)
               :     :           :                          +- * Filter (11)
               :     :           :                             +- * ColumnarToRow (10)
               :     :           :                                +- Scan parquet default.date_dim (9)
               :     :           +- * Sort (25)
               :     :              +- Exchange (24)
               :     :                 +- * Filter (23)
               :     :                    +- * ColumnarToRow (22)
               :     :                       +- Scan parquet default.customer_address (21)
               :     +- * Sort (34)
               :        +- Exchange (33)
               :           +- * Filter (32)
               :              +- * ColumnarToRow (31)
               :                 +- Scan parquet default.customer_demographics (30)
               +- BroadcastExchange (50)
                  +- Union (49)
                     :- * Project (42)
                     :  +- * BroadcastHashJoin Inner BuildRight (41)
                     :     :- * Filter (39)
                     :     :  +- * ColumnarToRow (38)
                     :     :     +- Scan parquet default.web_sales (37)
                     :     +- ReusedExchange (40)
                     +- * Project (48)
                        +- * BroadcastHashJoin Inner BuildRight (47)
                           :- * Filter (45)
                           :  +- * ColumnarToRow (44)
                           :     +- Scan parquet default.catalog_sales (43)
                           +- ReusedExchange (46)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), true, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Condition : isnotnull(ss_sold_date_sk#5)

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Condition : ((((isnotnull(d_year#8) AND isnotnull(d_qoy#9)) AND (d_year#8 = 1999)) AND (d_qoy#9 < 4)) AND isnotnull(d_date_sk#7))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]

(13) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_sold_date_sk#5, ss_customer_sk#6, d_date_sk#7]

(16) Exchange
Input [1]: [ss_customer_sk#6]
Arguments: hashpartitioning(ss_customer_sk#6, 5), true, [id=#11]

(17) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(18) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(19) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_current_addr_sk#3, 5), true, [id=#12]

(20) Sort [codegen id : 6]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_addr_sk#3 ASC NULLS FIRST], false, 0

(21) Scan parquet default.customer_address
Output [2]: [ca_address_sk#13, ca_state#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(22) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#13, ca_state#14]

(23) Filter [codegen id : 7]
Input [2]: [ca_address_sk#13, ca_state#14]
Condition : isnotnull(ca_address_sk#13)

(24) Exchange
Input [2]: [ca_address_sk#13, ca_state#14]
Arguments: hashpartitioning(ca_address_sk#13, 5), true, [id=#15]

(25) Sort [codegen id : 8]
Input [2]: [ca_address_sk#13, ca_state#14]
Arguments: [ca_address_sk#13 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#13]
Join condition: None

(27) Project [codegen id : 9]
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, ca_state#14]
Input [5]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#13, ca_state#14]

(28) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, ca_state#14]
Arguments: hashpartitioning(c_current_cdemo_sk#2, 5), true, [id=#16]

(29) Sort [codegen id : 10]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, ca_state#14]
Arguments: [c_current_cdemo_sk#2 ASC NULLS FIRST], false, 0

(30) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(31) ColumnarToRow [codegen id : 11]
Input [6]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]

(32) Filter [codegen id : 11]
Input [6]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Condition : isnotnull(cd_demo_sk#17)

(33) Exchange
Input [6]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Arguments: hashpartitioning(cd_demo_sk#17, 5), true, [id=#23]

(34) Sort [codegen id : 12]
Input [6]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Arguments: [cd_demo_sk#17 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#17]
Join condition: None

(36) Project [codegen id : 13]
Output [7]: [c_customer_sk#1, ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Input [9]: [c_customer_sk#1, c_current_cdemo_sk#2, ca_state#14, cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]

(37) Scan parquet default.web_sales
Output [1]: [ws_sold_date_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int>

(38) ColumnarToRow [codegen id : 15]
Input [1]: [ws_sold_date_sk#24]

(39) Filter [codegen id : 15]
Input [1]: [ws_sold_date_sk#24]
Condition : isnotnull(ws_sold_date_sk#24)

(40) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(41) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#7]
Join condition: None

(42) Project [codegen id : 15]
Output: []
Input [2]: [ws_sold_date_sk#24, d_date_sk#7]

(43) Scan parquet default.catalog_sales
Output [1]: [cs_sold_date_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int>

(44) ColumnarToRow [codegen id : 17]
Input [1]: [cs_sold_date_sk#25]

(45) Filter [codegen id : 17]
Input [1]: [cs_sold_date_sk#25]
Condition : isnotnull(cs_sold_date_sk#25)

(46) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(47) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#25]
Right keys [1]: [d_date_sk#7]
Join condition: None

(48) Project [codegen id : 17]
Output: []
Input [2]: [cs_sold_date_sk#25, d_date_sk#7]

(49) Union

(50) BroadcastExchange
Input: []
Arguments: IdentityBroadcastMode, [id=#26]

(51) BroadcastNestedLoopJoin
Join condition: (customsk#27 = c_customer_sk#1)

(52) Project [codegen id : 18]
Output [6]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Input [7]: [c_customer_sk#1, ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]

(53) HashAggregate [codegen id : 18]
Input [6]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Keys [6]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Functions [10]: [partial_count(1), partial_avg(cast(cd_dep_count#20 as bigint)), partial_max(cd_dep_count#20), partial_sum(cast(cd_dep_count#20 as bigint)), partial_avg(cast(cd_dep_employed_count#21 as bigint)), partial_max(cd_dep_employed_count#21), partial_sum(cast(cd_dep_employed_count#21 as bigint)), partial_avg(cast(cd_dep_college_count#22 as bigint)), partial_max(cd_dep_college_count#22), partial_sum(cast(cd_dep_college_count#22 as bigint))]
Aggregate Attributes [13]: [count#28, sum#29, count#30, max#31, sum#32, sum#33, count#34, max#35, sum#36, sum#37, count#38, max#39, sum#40]
Results [19]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, count#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53]

(54) Exchange
Input [19]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, count#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53]
Arguments: hashpartitioning(ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, 5), true, [id=#54]

(55) HashAggregate [codegen id : 19]
Input [19]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, count#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53]
Keys [6]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Functions [10]: [count(1), avg(cast(cd_dep_count#20 as bigint)), max(cd_dep_count#20), sum(cast(cd_dep_count#20 as bigint)), avg(cast(cd_dep_employed_count#21 as bigint)), max(cd_dep_employed_count#21), sum(cast(cd_dep_employed_count#21 as bigint)), avg(cast(cd_dep_college_count#22 as bigint)), max(cd_dep_college_count#22), sum(cast(cd_dep_college_count#22 as bigint))]
Aggregate Attributes [10]: [count(1)#55, avg(cast(cd_dep_count#20 as bigint))#56, max(cd_dep_count#20)#57, sum(cast(cd_dep_count#20 as bigint))#58, avg(cast(cd_dep_employed_count#21 as bigint))#59, max(cd_dep_employed_count#21)#60, sum(cast(cd_dep_employed_count#21 as bigint))#61, avg(cast(cd_dep_college_count#22 as bigint))#62, max(cd_dep_college_count#22)#63, sum(cast(cd_dep_college_count#22 as bigint))#64]
Results [18]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, count(1)#55 AS cnt1#65, avg(cast(cd_dep_count#20 as bigint))#56 AS avg(cd_dep_count)#66, max(cd_dep_count#20)#57 AS max(cd_dep_count)#67, sum(cast(cd_dep_count#20 as bigint))#58 AS sum(cd_dep_count)#68, cd_dep_employed_count#21, count(1)#55 AS cnt2#69, avg(cast(cd_dep_employed_count#21 as bigint))#59 AS avg(cd_dep_employed_count)#70, max(cd_dep_employed_count#21)#60 AS max(cd_dep_employed_count)#71, sum(cast(cd_dep_employed_count#21 as bigint))#61 AS sum(cd_dep_employed_count)#72, cd_dep_college_count#22, count(1)#55 AS cnt3#73, avg(cast(cd_dep_college_count#22 as bigint))#62 AS avg(cd_dep_college_count)#74, max(cd_dep_college_count#22)#63 AS max(cd_dep_college_count)#75, sum(cast(cd_dep_college_count#22 as bigint))#64 AS sum(cd_dep_college_count)#76]

(56) TakeOrderedAndProject
Input [18]: [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cnt1#65, avg(cd_dep_count)#66, max(cd_dep_count)#67, sum(cd_dep_count)#68, cd_dep_employed_count#21, cnt2#69, avg(cd_dep_employed_count)#70, max(cd_dep_employed_count)#71, sum(cd_dep_employed_count)#72, cd_dep_college_count#22, cnt3#73, avg(cd_dep_college_count)#74, max(cd_dep_college_count)#75, sum(cd_dep_college_count)#76]
Arguments: 100, [ca_state#14 ASC NULLS FIRST, cd_gender#18 ASC NULLS FIRST, cd_marital_status#19 ASC NULLS FIRST, cd_dep_count#20 ASC NULLS FIRST, cd_dep_employed_count#21 ASC NULLS FIRST, cd_dep_college_count#22 ASC NULLS FIRST], [ca_state#14, cd_gender#18, cd_marital_status#19, cd_dep_count#20, cnt1#65, avg(cd_dep_count)#66, max(cd_dep_count)#67, sum(cd_dep_count)#68, cd_dep_employed_count#21, cnt2#69, avg(cd_dep_employed_count)#70, max(cd_dep_employed_count)#71, sum(cd_dep_employed_count)#72, cd_dep_college_count#22, cnt3#73, avg(cd_dep_college_count)#74, max(cd_dep_college_count)#75, sum(cd_dep_college_count)#76]

