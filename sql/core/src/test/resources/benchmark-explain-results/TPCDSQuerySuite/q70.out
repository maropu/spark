TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#0 DESC NULLS LAST,CASE WHEN (cast(lochierarchy#0 as int) = 0) THEN s_state#0 END ASC NULLS FIRST,rank_within_parent#0 ASC NULLS FIRST], output=[total_sum#0,s_state#0,s_county#0,lochierarchy#0,rank_within_parent#0])
+- *Project [s_county#0, lochierarchy#0, s_state#0, rank_within_parent#0, total_sum#0]
   +- Window [rank(_w3#0) windowspecdefinition(_w1#0, _w2#0, _w3#0 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS none#0], [_w1#0, _w2#0], [_w3#0 DESC NULLS LAST]
      +- *Sort [_w1#0 ASC NULLS FIRST, _w2#0 ASC NULLS FIRST, _w3#0 DESC NULLS LAST], false, 0
         +- Exchange hashpartitioning(_w1#0, _w2#0, 5)
            +- *HashAggregate(keys=[s_state#0, s_county#0, spark_grouping_id#0], functions=[sum(UnscaledValue(ss_net_profit#0))])
               +- Exchange hashpartitioning(s_state#0, s_county#0, spark_grouping_id#0, 5)
                  +- *HashAggregate(keys=[s_state#0, s_county#0, spark_grouping_id#0], functions=[partial_sum(UnscaledValue(ss_net_profit#0))])
                     +- *Expand [List(ss_net_profit#0, s_state#0, s_county#0, 0), List(ss_net_profit#0, s_state#0, null, 1), List(ss_net_profit#0, null, null, 3)], [ss_net_profit#0, s_state#0, s_county#0, spark_grouping_id#0]
                        +- *Project [s_county#0, ss_net_profit#0, s_state#0]
                           +- *BroadcastHashJoin [ss_store_sk#0], [s_store_sk#0], Inner, BuildRight
                              :- *Project [ss_store_sk#0, ss_net_profit#0]
                              :  +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                              :     :- *Project [ss_store_sk#0, ss_sold_date_sk#0, ss_net_profit#0]
                              :     :  +- *Filter (isnotnull(ss_store_sk#0) && isnotnull(ss_sold_date_sk#0))
                              :     :     +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_store_sk#0,ss_net_profit#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :        +- *Project [d_date_sk#0]
                              :           +- *Filter (((isnotnull(d_month_seq#0) && (d_month_seq#0 >= 1200)) && isnotnull(d_date_sk#0)) && (d_month_seq#0 <= 1211))
                              :              +- *FileScan parquet default.date_dim[d_date_sk#0,d_month_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_month_seq:int>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                                 +- *BroadcastHashJoin [s_state#0], [s_state#0], LeftSemi, BuildRight
                                    :- *Project [s_county#0, s_state#0, s_store_sk#0]
                                    :  +- *Filter isnotnull(s_store_sk#0)
                                    :     +- *FileScan parquet default.store[s_store_sk#0,s_county#0,s_state#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,s_state:string>
                                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
                                       +- *Project [s_state#0]
                                          +- *Filter (isnotnull(ranking#0) && (5 >= ranking#0))
                                             +- Window [rank(_w2#0) windowspecdefinition(s_state#0, _w2#0 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS none#0], [s_state#0], [_w2#0 DESC NULLS LAST]
                                                +- *Sort [s_state#0 ASC NULLS FIRST, _w2#0 DESC NULLS LAST], false, 0
                                                   +- *HashAggregate(keys=[s_state#0], functions=[sum(UnscaledValue(ss_net_profit#0))])
                                                      +- Exchange hashpartitioning(s_state#0, 5)
                                                         +- *HashAggregate(keys=[s_state#0], functions=[partial_sum(UnscaledValue(ss_net_profit#0))])
                                                            +- *Project [s_state#0, ss_net_profit#0]
                                                               +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                                                                  :- *Project [s_state#0, ss_sold_date_sk#0, ss_net_profit#0]
                                                                  :  +- *BroadcastHashJoin [ss_store_sk#0], [s_store_sk#0], Inner, BuildRight
                                                                  :     :- *Project [ss_store_sk#0, ss_sold_date_sk#0, ss_net_profit#0]
                                                                  :     :  +- *Filter (isnotnull(ss_store_sk#0) && isnotnull(ss_sold_date_sk#0))
                                                                  :     :     +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_store_sk#0,ss_net_profit#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
                                                                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                                                                  :        +- *Project [s_state#0, s_store_sk#0]
                                                                  :           +- *Filter isnotnull(s_store_sk#0)
                                                                  :              +- *FileScan parquet default.store[s_store_sk#0,s_state#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,s_state:string>
                                                                  +- ReusedExchange [d_date_sk#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
