== Physical Plan ==
TakeOrderedAndProject (95)
+- * HashAggregate (94)
   +- Exchange (93)
      +- * HashAggregate (92)
         +- Union (91)
            :- * HashAggregate (85)
            :  +- Exchange (84)
            :     +- * HashAggregate (83)
            :        +- Union (82)
            :           :- * HashAggregate (76)
            :           :  +- Exchange (75)
            :           :     +- * HashAggregate (74)
            :           :        +- Union (73)
            :           :           :- * HashAggregate (25)
            :           :           :  +- Exchange (24)
            :           :           :     +- * HashAggregate (23)
            :           :           :        +- * Project (22)
            :           :           :           +- * BroadcastHashJoin Inner BuildRight (21)
            :           :           :              :- * Project (16)
            :           :           :              :  +- * BroadcastHashJoin Inner BuildRight (15)
            :           :           :              :     :- Union (9)
            :           :           :              :     :  :- * Project (4)
            :           :           :              :     :  :  +- * Filter (3)
            :           :           :              :     :  :     +- * ColumnarToRow (2)
            :           :           :              :     :  :        +- Scan parquet default.store_sales (1)
            :           :           :              :     :  +- * Project (8)
            :           :           :              :     :     +- * Filter (7)
            :           :           :              :     :        +- * ColumnarToRow (6)
            :           :           :              :     :           +- Scan parquet default.store_returns (5)
            :           :           :              :     +- BroadcastExchange (14)
            :           :           :              :        +- * Project (13)
            :           :           :              :           +- * Filter (12)
            :           :           :              :              +- * ColumnarToRow (11)
            :           :           :              :                 +- Scan parquet default.date_dim (10)
            :           :           :              +- BroadcastExchange (20)
            :           :           :                 +- * Filter (19)
            :           :           :                    +- * ColumnarToRow (18)
            :           :           :                       +- Scan parquet default.store (17)
            :           :           :- * HashAggregate (46)
            :           :           :  +- Exchange (45)
            :           :           :     +- * HashAggregate (44)
            :           :           :        +- * Project (43)
            :           :           :           +- * BroadcastHashJoin Inner BuildRight (42)
            :           :           :              :- * Project (37)
            :           :           :              :  +- * BroadcastHashJoin Inner BuildRight (36)
            :           :           :              :     :- Union (34)
            :           :           :              :     :  :- * Project (29)
            :           :           :              :     :  :  +- * Filter (28)
            :           :           :              :     :  :     +- * ColumnarToRow (27)
            :           :           :              :     :  :        +- Scan parquet default.catalog_sales (26)
            :           :           :              :     :  +- * Project (33)
            :           :           :              :     :     +- * Filter (32)
            :           :           :              :     :        +- * ColumnarToRow (31)
            :           :           :              :     :           +- Scan parquet default.catalog_returns (30)
            :           :           :              :     +- ReusedExchange (35)
            :           :           :              +- BroadcastExchange (41)
            :           :           :                 +- * Filter (40)
            :           :           :                    +- * ColumnarToRow (39)
            :           :           :                       +- Scan parquet default.catalog_page (38)
            :           :           +- * HashAggregate (72)
            :           :              +- Exchange (71)
            :           :                 +- * HashAggregate (70)
            :           :                    +- * Project (69)
            :           :                       +- * BroadcastHashJoin Inner BuildRight (68)
            :           :                          :- * Project (63)
            :           :                          :  +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                          :     :- Union (60)
            :           :                          :     :  :- * Project (50)
            :           :                          :     :  :  +- * Filter (49)
            :           :                          :     :  :     +- * ColumnarToRow (48)
            :           :                          :     :  :        +- Scan parquet default.web_sales (47)
            :           :                          :     :  +- * Project (59)
            :           :                          :     :     +- * BroadcastHashJoin Inner BuildRight (58)
            :           :                          :     :        :- * Filter (53)
            :           :                          :     :        :  +- * ColumnarToRow (52)
            :           :                          :     :        :     +- Scan parquet default.web_returns (51)
            :           :                          :     :        +- BroadcastExchange (57)
            :           :                          :     :           +- * Filter (56)
            :           :                          :     :              +- * ColumnarToRow (55)
            :           :                          :     :                 +- Scan parquet default.web_sales (54)
            :           :                          :     +- ReusedExchange (61)
            :           :                          +- BroadcastExchange (67)
            :           :                             +- * Filter (66)
            :           :                                +- * ColumnarToRow (65)
            :           :                                   +- Scan parquet default.web_site (64)
            :           +- * HashAggregate (81)
            :              +- Exchange (80)
            :                 +- * HashAggregate (79)
            :                    +- * HashAggregate (78)
            :                       +- ReusedExchange (77)
            +- * HashAggregate (90)
               +- Exchange (89)
                  +- * HashAggregate (88)
                     +- * HashAggregate (87)
                        +- ReusedExchange (86)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Condition : (isnotnull(cast(ss_sold_date_sk#1 as bigint)) AND isnotnull(cast(ss_store_sk#2 as bigint)))

(4) Project [codegen id : 1]
Output [6]: [cast(ss_store_sk#2 as bigint) AS store_sk#5, cast(ss_sold_date_sk#1 as bigint) AS date_sk#6, ss_ext_sales_price#3 AS sales_price#7, ss_net_profit#4 AS profit#8, 0.00 AS return_amt#9, 0.00 AS net_loss#10]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]

(7) Filter [codegen id : 2]
Input [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]
Condition : (isnotnull(sr_returned_date_sk#11) AND isnotnull(sr_store_sk#12))

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#15, sr_returned_date_sk#11 AS date_sk#16, 0.00 AS sales_price#17, 0.00 AS profit#18, sr_return_amt#13 AS return_amt#19, sr_net_loss#14 AS net_loss#20]
Input [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]

(9) Union
Arguments: [store_sk#21, date_sk#22, sales_price#23, profit#24, return_amt#25, net_loss#26]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_date#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#27, d_date#28]

(12) Filter [codegen id : 3]
Input [2]: [d_date_sk#27, d_date#28]
Condition : (((isnotnull(d_date#28) AND (d_date#28 >= 10442)) AND (d_date#28 <= 10456)) AND isnotnull(d_date_sk#27))

(13) Project [codegen id : 3]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_date#28]

(14) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#22]
Right keys [1]: [cast(d_date_sk#27 as bigint)]
Join condition: None

(16) Project [codegen id : 5]
Output [5]: [store_sk#21, sales_price#23, profit#24, return_amt#25, net_loss#26]
Input [7]: [store_sk#21, date_sk#22, sales_price#23, profit#24, return_amt#25, net_loss#26, d_date_sk#27]

(17) Scan parquet default.store
Output [2]: [s_store_sk#30, s_store_id#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(18) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#30, s_store_id#31]

(19) Filter [codegen id : 4]
Input [2]: [s_store_sk#30, s_store_id#31]
Condition : isnotnull(s_store_sk#30)

(20) BroadcastExchange
Input [2]: [s_store_sk#30, s_store_id#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#21]
Right keys [1]: [cast(s_store_sk#30 as bigint)]
Join condition: None

(22) Project [codegen id : 5]
Output [5]: [sales_price#23, profit#24, return_amt#25, net_loss#26, s_store_id#31]
Input [7]: [store_sk#21, sales_price#23, profit#24, return_amt#25, net_loss#26, s_store_sk#30, s_store_id#31]

(23) HashAggregate [codegen id : 5]
Input [5]: [sales_price#23, profit#24, return_amt#25, net_loss#26, s_store_id#31]
Keys [1]: [s_store_id#31]
Functions [4]: [partial_sum(UnscaledValue(sales_price#23)), partial_sum(UnscaledValue(return_amt#25)), partial_sum(UnscaledValue(profit#24)), partial_sum(UnscaledValue(net_loss#26))]
Aggregate Attributes [4]: [sum#33, sum#34, sum#35, sum#36]
Results [5]: [s_store_id#31, sum#37, sum#38, sum#39, sum#40]

(24) Exchange
Input [5]: [s_store_id#31, sum#37, sum#38, sum#39, sum#40]
Arguments: hashpartitioning(s_store_id#31, 5), true, [id=#41]

(25) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#31, sum#37, sum#38, sum#39, sum#40]
Keys [1]: [s_store_id#31]
Functions [4]: [sum(UnscaledValue(sales_price#23)), sum(UnscaledValue(return_amt#25)), sum(UnscaledValue(profit#24)), sum(UnscaledValue(net_loss#26))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#23))#42, sum(UnscaledValue(return_amt#25))#43, sum(UnscaledValue(profit#24))#44, sum(UnscaledValue(net_loss#26))#45]
Results [5]: [store channel AS channel#46, concat(store, s_store_id#31) AS id#47, MakeDecimal(sum(UnscaledValue(sales_price#23))#42,17,2) AS sales#48, MakeDecimal(sum(UnscaledValue(return_amt#25))#43,17,2) AS returns#49, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#24))#44,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#26))#45,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#50]

(26) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#51, cs_catalog_page_sk#52, cs_ext_sales_price#53, cs_net_profit#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [cs_sold_date_sk#51, cs_catalog_page_sk#52, cs_ext_sales_price#53, cs_net_profit#54]

(28) Filter [codegen id : 7]
Input [4]: [cs_sold_date_sk#51, cs_catalog_page_sk#52, cs_ext_sales_price#53, cs_net_profit#54]
Condition : (isnotnull(cs_sold_date_sk#51) AND isnotnull(cs_catalog_page_sk#52))

(29) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#52 AS page_sk#55, cs_sold_date_sk#51 AS date_sk#56, cs_ext_sales_price#53 AS sales_price#57, cs_net_profit#54 AS profit#58, 0.00 AS return_amt#59, 0.00 AS net_loss#60]
Input [4]: [cs_sold_date_sk#51, cs_catalog_page_sk#52, cs_ext_sales_price#53, cs_net_profit#54]

(30) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#61, cr_catalog_page_sk#62, cr_return_amount#63, cr_net_loss#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(31) ColumnarToRow [codegen id : 8]
Input [4]: [cr_returned_date_sk#61, cr_catalog_page_sk#62, cr_return_amount#63, cr_net_loss#64]

(32) Filter [codegen id : 8]
Input [4]: [cr_returned_date_sk#61, cr_catalog_page_sk#62, cr_return_amount#63, cr_net_loss#64]
Condition : (isnotnull(cr_returned_date_sk#61) AND isnotnull(cr_catalog_page_sk#62))

(33) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#62 AS page_sk#65, cr_returned_date_sk#61 AS date_sk#66, 0.00 AS sales_price#67, 0.00 AS profit#68, cr_return_amount#63 AS return_amt#69, cr_net_loss#64 AS net_loss#70]
Input [4]: [cr_returned_date_sk#61, cr_catalog_page_sk#62, cr_return_amount#63, cr_net_loss#64]

(34) Union
Arguments: [page_sk#71, date_sk#72, sales_price#73, profit#74, return_amt#75, net_loss#76]

(35) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#27]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#72]
Right keys [1]: [d_date_sk#27]
Join condition: None

(37) Project [codegen id : 11]
Output [5]: [page_sk#71, sales_price#73, profit#74, return_amt#75, net_loss#76]
Input [7]: [page_sk#71, date_sk#72, sales_price#73, profit#74, return_amt#75, net_loss#76, d_date_sk#27]

(38) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#77, cp_catalog_page_id#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(39) ColumnarToRow [codegen id : 10]
Input [2]: [cp_catalog_page_sk#77, cp_catalog_page_id#78]

(40) Filter [codegen id : 10]
Input [2]: [cp_catalog_page_sk#77, cp_catalog_page_id#78]
Condition : isnotnull(cp_catalog_page_sk#77)

(41) BroadcastExchange
Input [2]: [cp_catalog_page_sk#77, cp_catalog_page_id#78]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#79]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#71]
Right keys [1]: [cp_catalog_page_sk#77]
Join condition: None

(43) Project [codegen id : 11]
Output [5]: [sales_price#73, profit#74, return_amt#75, net_loss#76, cp_catalog_page_id#78]
Input [7]: [page_sk#71, sales_price#73, profit#74, return_amt#75, net_loss#76, cp_catalog_page_sk#77, cp_catalog_page_id#78]

(44) HashAggregate [codegen id : 11]
Input [5]: [sales_price#73, profit#74, return_amt#75, net_loss#76, cp_catalog_page_id#78]
Keys [1]: [cp_catalog_page_id#78]
Functions [4]: [partial_sum(UnscaledValue(sales_price#73)), partial_sum(UnscaledValue(return_amt#75)), partial_sum(UnscaledValue(profit#74)), partial_sum(UnscaledValue(net_loss#76))]
Aggregate Attributes [4]: [sum#80, sum#81, sum#82, sum#83]
Results [5]: [cp_catalog_page_id#78, sum#84, sum#85, sum#86, sum#87]

(45) Exchange
Input [5]: [cp_catalog_page_id#78, sum#84, sum#85, sum#86, sum#87]
Arguments: hashpartitioning(cp_catalog_page_id#78, 5), true, [id=#88]

(46) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#78, sum#84, sum#85, sum#86, sum#87]
Keys [1]: [cp_catalog_page_id#78]
Functions [4]: [sum(UnscaledValue(sales_price#73)), sum(UnscaledValue(return_amt#75)), sum(UnscaledValue(profit#74)), sum(UnscaledValue(net_loss#76))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#73))#89, sum(UnscaledValue(return_amt#75))#90, sum(UnscaledValue(profit#74))#91, sum(UnscaledValue(net_loss#76))#92]
Results [5]: [catalog channel AS channel#93, concat(catalog_page, cp_catalog_page_id#78) AS id#94, MakeDecimal(sum(UnscaledValue(sales_price#73))#89,17,2) AS sales#95, MakeDecimal(sum(UnscaledValue(return_amt#75))#90,17,2) AS returns#96, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#74))#91,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#76))#92,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#97]

(47) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#98, ws_web_site_sk#99, ws_ext_sales_price#100, ws_net_profit#101]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(48) ColumnarToRow [codegen id : 13]
Input [4]: [ws_sold_date_sk#98, ws_web_site_sk#99, ws_ext_sales_price#100, ws_net_profit#101]

(49) Filter [codegen id : 13]
Input [4]: [ws_sold_date_sk#98, ws_web_site_sk#99, ws_ext_sales_price#100, ws_net_profit#101]
Condition : (isnotnull(cast(ws_sold_date_sk#98 as bigint)) AND isnotnull(ws_web_site_sk#99))

(50) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#99 AS wsr_web_site_sk#102, cast(ws_sold_date_sk#98 as bigint) AS date_sk#103, ws_ext_sales_price#100 AS sales_price#104, ws_net_profit#101 AS profit#105, 0.00 AS return_amt#106, 0.00 AS net_loss#107]
Input [4]: [ws_sold_date_sk#98, ws_web_site_sk#99, ws_ext_sales_price#100, ws_net_profit#101]

(51) Scan parquet default.web_returns
Output [5]: [wr_returned_date_sk#108, wr_item_sk#109, wr_order_number#110, wr_return_amt#111, wr_net_loss#112]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_returned_date_sk)]
ReadSchema: struct<wr_returned_date_sk:bigint,wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(52) ColumnarToRow [codegen id : 15]
Input [5]: [wr_returned_date_sk#108, wr_item_sk#109, wr_order_number#110, wr_return_amt#111, wr_net_loss#112]

(53) Filter [codegen id : 15]
Input [5]: [wr_returned_date_sk#108, wr_item_sk#109, wr_order_number#110, wr_return_amt#111, wr_net_loss#112]
Condition : isnotnull(wr_returned_date_sk#108)

(54) Scan parquet default.web_sales
Output [3]: [ws_item_sk#113, ws_web_site_sk#99, ws_order_number#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(55) ColumnarToRow [codegen id : 14]
Input [3]: [ws_item_sk#113, ws_web_site_sk#99, ws_order_number#114]

(56) Filter [codegen id : 14]
Input [3]: [ws_item_sk#113, ws_web_site_sk#99, ws_order_number#114]
Condition : ((isnotnull(ws_item_sk#113) AND isnotnull(ws_order_number#114)) AND isnotnull(ws_web_site_sk#99))

(57) BroadcastExchange
Input [3]: [ws_item_sk#113, ws_web_site_sk#99, ws_order_number#114]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint), cast(input[2, int, false] as bigint)),false), [id=#115]

(58) BroadcastHashJoin [codegen id : 15]
Left keys [2]: [wr_item_sk#109, wr_order_number#110]
Right keys [2]: [cast(ws_item_sk#113 as bigint), cast(ws_order_number#114 as bigint)]
Join condition: None

(59) Project [codegen id : 15]
Output [6]: [ws_web_site_sk#99 AS wsr_web_site_sk#116, wr_returned_date_sk#108 AS date_sk#117, 0.00 AS sales_price#118, 0.00 AS profit#119, wr_return_amt#111 AS return_amt#120, wr_net_loss#112 AS net_loss#121]
Input [8]: [wr_returned_date_sk#108, wr_item_sk#109, wr_order_number#110, wr_return_amt#111, wr_net_loss#112, ws_item_sk#113, ws_web_site_sk#99, ws_order_number#114]

(60) Union
Arguments: [wsr_web_site_sk#122, date_sk#123, sales_price#124, profit#125, return_amt#126, net_loss#127]

(61) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#27]

(62) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [date_sk#123]
Right keys [1]: [cast(d_date_sk#27 as bigint)]
Join condition: None

(63) Project [codegen id : 18]
Output [5]: [wsr_web_site_sk#122, sales_price#124, profit#125, return_amt#126, net_loss#127]
Input [7]: [wsr_web_site_sk#122, date_sk#123, sales_price#124, profit#125, return_amt#126, net_loss#127, d_date_sk#27]

(64) Scan parquet default.web_site
Output [2]: [web_site_sk#128, web_site_id#129]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(65) ColumnarToRow [codegen id : 17]
Input [2]: [web_site_sk#128, web_site_id#129]

(66) Filter [codegen id : 17]
Input [2]: [web_site_sk#128, web_site_id#129]
Condition : isnotnull(web_site_sk#128)

(67) BroadcastExchange
Input [2]: [web_site_sk#128, web_site_id#129]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#130]

(68) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [wsr_web_site_sk#122]
Right keys [1]: [web_site_sk#128]
Join condition: None

(69) Project [codegen id : 18]
Output [5]: [sales_price#124, profit#125, return_amt#126, net_loss#127, web_site_id#129]
Input [7]: [wsr_web_site_sk#122, sales_price#124, profit#125, return_amt#126, net_loss#127, web_site_sk#128, web_site_id#129]

(70) HashAggregate [codegen id : 18]
Input [5]: [sales_price#124, profit#125, return_amt#126, net_loss#127, web_site_id#129]
Keys [1]: [web_site_id#129]
Functions [4]: [partial_sum(UnscaledValue(sales_price#124)), partial_sum(UnscaledValue(return_amt#126)), partial_sum(UnscaledValue(profit#125)), partial_sum(UnscaledValue(net_loss#127))]
Aggregate Attributes [4]: [sum#131, sum#132, sum#133, sum#134]
Results [5]: [web_site_id#129, sum#135, sum#136, sum#137, sum#138]

(71) Exchange
Input [5]: [web_site_id#129, sum#135, sum#136, sum#137, sum#138]
Arguments: hashpartitioning(web_site_id#129, 5), true, [id=#139]

(72) HashAggregate [codegen id : 19]
Input [5]: [web_site_id#129, sum#135, sum#136, sum#137, sum#138]
Keys [1]: [web_site_id#129]
Functions [4]: [sum(UnscaledValue(sales_price#124)), sum(UnscaledValue(return_amt#126)), sum(UnscaledValue(profit#125)), sum(UnscaledValue(net_loss#127))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#124))#140, sum(UnscaledValue(return_amt#126))#141, sum(UnscaledValue(profit#125))#142, sum(UnscaledValue(net_loss#127))#143]
Results [5]: [web channel AS channel#144, concat(web_site, web_site_id#129) AS id#145, MakeDecimal(sum(UnscaledValue(sales_price#124))#140,17,2) AS sales#146, MakeDecimal(sum(UnscaledValue(return_amt#126))#141,17,2) AS returns#147, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#125))#142,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#127))#143,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#148]

(73) Union
Arguments: [channel#149, id#150, sales#151, returns#152, profit#153]

(74) HashAggregate [codegen id : 20]
Input [5]: [channel#149, id#150, sales#151, returns#152, profit#153]
Keys [2]: [channel#149, id#150]
Functions [3]: [partial_sum(sales#151), partial_sum(returns#152), partial_sum(profit#153)]
Aggregate Attributes [6]: [sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]
Results [8]: [channel#149, id#150, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]

(75) Exchange
Input [8]: [channel#149, id#150, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Arguments: hashpartitioning(channel#149, id#150, 5), true, [id=#166]

(76) HashAggregate [codegen id : 21]
Input [8]: [channel#149, id#150, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Keys [2]: [channel#149, id#150]
Functions [3]: [sum(sales#151), sum(returns#152), sum(profit#153)]
Aggregate Attributes [3]: [sum(sales#151)#167, sum(returns#152)#168, sum(profit#153)#169]
Results [5]: [channel#149, id#150, cast(sum(sales#151)#167 as decimal(37,2)) AS sales#170, cast(sum(returns#152)#168 as decimal(37,2)) AS returns#171, cast(sum(profit#153)#169 as decimal(38,2)) AS profit#172]

(77) ReusedExchange [Reuses operator id: 75]
Output [8]: [channel#173, id#174, sum#175, isEmpty#176, sum#177, isEmpty#178, sum#179, isEmpty#180]

(78) HashAggregate [codegen id : 42]
Input [8]: [channel#173, id#174, sum#175, isEmpty#176, sum#177, isEmpty#178, sum#179, isEmpty#180]
Keys [2]: [channel#173, id#174]
Functions [3]: [sum(sales#181), sum(returns#182), sum(profit#183)]
Aggregate Attributes [3]: [sum(sales#181)#184, sum(returns#182)#185, sum(profit#183)#186]
Results [4]: [channel#173, sum(sales#181)#184 AS sales#187, sum(returns#182)#185 AS returns#188, sum(profit#183)#186 AS profit#189]

(79) HashAggregate [codegen id : 42]
Input [4]: [channel#173, sales#187, returns#188, profit#189]
Keys [1]: [channel#173]
Functions [3]: [partial_sum(sales#187), partial_sum(returns#188), partial_sum(profit#189)]
Aggregate Attributes [6]: [sum#190, isEmpty#191, sum#192, isEmpty#193, sum#194, isEmpty#195]
Results [7]: [channel#173, sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201]

(80) Exchange
Input [7]: [channel#173, sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201]
Arguments: hashpartitioning(channel#173, 5), true, [id=#202]

(81) HashAggregate [codegen id : 43]
Input [7]: [channel#173, sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201]
Keys [1]: [channel#173]
Functions [3]: [sum(sales#187), sum(returns#188), sum(profit#189)]
Aggregate Attributes [3]: [sum(sales#187)#203, sum(returns#188)#204, sum(profit#189)#205]
Results [5]: [channel#173, null AS id#206, sum(sales#187)#203 AS sum(sales)#207, sum(returns#188)#204 AS sum(returns)#208, sum(profit#189)#205 AS sum(profit)#209]

(82) Union
Arguments: [channel#210, id#211, sales#212, returns#213, profit#214]

(83) HashAggregate [codegen id : 44]
Input [5]: [channel#210, id#211, sales#212, returns#213, profit#214]
Keys [5]: [channel#210, id#211, sales#212, returns#213, profit#214]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#210, id#211, sales#212, returns#213, profit#214]

(84) Exchange
Input [5]: [channel#210, id#211, sales#212, returns#213, profit#214]
Arguments: hashpartitioning(channel#210, id#211, sales#212, returns#213, profit#214, 5), true, [id=#215]

(85) HashAggregate [codegen id : 45]
Input [5]: [channel#210, id#211, sales#212, returns#213, profit#214]
Keys [5]: [channel#210, id#211, sales#212, returns#213, profit#214]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#210, id#211, sales#212, returns#213, profit#214]

(86) ReusedExchange [Reuses operator id: 75]
Output [8]: [channel#216, id#217, sum#218, isEmpty#219, sum#220, isEmpty#221, sum#222, isEmpty#223]

(87) HashAggregate [codegen id : 66]
Input [8]: [channel#216, id#217, sum#218, isEmpty#219, sum#220, isEmpty#221, sum#222, isEmpty#223]
Keys [2]: [channel#216, id#217]
Functions [3]: [sum(sales#224), sum(returns#225), sum(profit#226)]
Aggregate Attributes [3]: [sum(sales#224)#227, sum(returns#225)#228, sum(profit#226)#229]
Results [3]: [sum(sales#224)#227 AS sales#187, sum(returns#225)#228 AS returns#188, sum(profit#226)#229 AS profit#189]

(88) HashAggregate [codegen id : 66]
Input [3]: [sales#187, returns#188, profit#189]
Keys: []
Functions [3]: [partial_sum(sales#187), partial_sum(returns#188), partial_sum(profit#189)]
Aggregate Attributes [6]: [sum#230, isEmpty#231, sum#232, isEmpty#233, sum#234, isEmpty#235]
Results [6]: [sum#236, isEmpty#237, sum#238, isEmpty#239, sum#240, isEmpty#241]

(89) Exchange
Input [6]: [sum#236, isEmpty#237, sum#238, isEmpty#239, sum#240, isEmpty#241]
Arguments: SinglePartition, true, [id=#242]

(90) HashAggregate [codegen id : 67]
Input [6]: [sum#236, isEmpty#237, sum#238, isEmpty#239, sum#240, isEmpty#241]
Keys: []
Functions [3]: [sum(sales#187), sum(returns#188), sum(profit#189)]
Aggregate Attributes [3]: [sum(sales#187)#243, sum(returns#188)#244, sum(profit#189)#245]
Results [5]: [null AS channel#246, null AS id#247, sum(sales#187)#243 AS sum(sales)#248, sum(returns#188)#244 AS sum(returns)#249, sum(profit#189)#245 AS sum(profit)#250]

(91) Union
Arguments: [channel#251, id#252, sales#253, returns#254, profit#255]

(92) HashAggregate [codegen id : 68]
Input [5]: [channel#251, id#252, sales#253, returns#254, profit#255]
Keys [5]: [channel#251, id#252, sales#253, returns#254, profit#255]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#251, id#252, sales#253, returns#254, profit#255]

(93) Exchange
Input [5]: [channel#251, id#252, sales#253, returns#254, profit#255]
Arguments: hashpartitioning(channel#251, id#252, sales#253, returns#254, profit#255, 5), true, [id=#256]

(94) HashAggregate [codegen id : 69]
Input [5]: [channel#251, id#252, sales#253, returns#254, profit#255]
Keys [5]: [channel#251, id#252, sales#253, returns#254, profit#255]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#251, id#252, sales#253, returns#254, profit#255]

(95) TakeOrderedAndProject
Input [5]: [channel#251, id#252, sales#253, returns#254, profit#255]
Arguments: 100, [channel#251 ASC NULLS FIRST, id#252 ASC NULLS FIRST], [channel#251, id#252, sales#253, returns#254, profit#255]

