== Parsed Logical Plan ==
'Project ['count(1) AS total#0, 'count('ss_sold_date_sk) AS not_null_total#0, 'count('ss_sold_date_sk) AS unique_days#0, 'max('ss_sold_date_sk) AS max_ss_sold_date_sk#0, 'max('ss_sold_time_sk) AS max_ss_sold_time_sk#0, 'max('ss_item_sk) AS max_ss_item_sk#0, 'max('ss_customer_sk) AS max_ss_customer_sk#0, 'max('ss_cdemo_sk) AS max_ss_cdemo_sk#0, 'max('ss_hdemo_sk) AS max_ss_hdemo_sk#0, 'max('ss_addr_sk) AS max_ss_addr_sk#0, 'max('ss_store_sk) AS max_ss_store_sk#0, 'max('ss_promo_sk) AS max_ss_promo_sk#0]
+- 'UnresolvedRelation `store_sales`

== Analyzed Logical Plan ==
total: bigint, not_null_total: bigint, unique_days: bigint, max_ss_sold_date_sk: int, max_ss_sold_time_sk: int, max_ss_item_sk: int, max_ss_customer_sk: int, max_ss_cdemo_sk: int, max_ss_hdemo_sk: int, max_ss_addr_sk: int, max_ss_store_sk: int, max_ss_promo_sk: int
Aggregate [count(1) AS total#0L, count(ss_sold_date_sk#0) AS not_null_total#0L, count(distinct ss_sold_date_sk#0) AS unique_days#0L, max(ss_sold_date_sk#0) AS max_ss_sold_date_sk#0, max(ss_sold_time_sk#0) AS max_ss_sold_time_sk#0, max(ss_item_sk#0) AS max_ss_item_sk#0, max(ss_customer_sk#0) AS max_ss_customer_sk#0, max(ss_cdemo_sk#0) AS max_ss_cdemo_sk#0, max(ss_hdemo_sk#0) AS max_ss_hdemo_sk#0, max(ss_addr_sk#0) AS max_ss_addr_sk#0, max(ss_store_sk#0) AS max_ss_store_sk#0, max(ss_promo_sk#0) AS max_ss_promo_sk#0]
+- SubqueryAlias store_sales
   +- Relation[ss_sold_date_sk#0,ss_sold_time_sk#0,ss_item_sk#0,ss_customer_sk#0,ss_cdemo_sk#0,ss_hdemo_sk#0,ss_addr_sk#0,ss_store_sk#0,ss_promo_sk#0,ss_ticket_number#0,ss_quantity#0,ss_wholesale_cost#0,ss_list_price#0,ss_sales_price#0,ss_ext_discount_amt#0,ss_ext_sales_price#0,ss_ext_wholesale_cost#0,ss_ext_list_price#0,ss_ext_tax#0,ss_coupon_amt#0,ss_net_paid#0,ss_net_paid_inc_tax#0,ss_net_profit#0] parquet

== Optimized Logical Plan ==
Aggregate [count(1) AS total#0L, count(ss_sold_date_sk#0) AS not_null_total#0L, count(distinct ss_sold_date_sk#0) AS unique_days#0L, max(ss_sold_date_sk#0) AS max_ss_sold_date_sk#0, max(ss_sold_time_sk#0) AS max_ss_sold_time_sk#0, max(ss_item_sk#0) AS max_ss_item_sk#0, max(ss_customer_sk#0) AS max_ss_customer_sk#0, max(ss_cdemo_sk#0) AS max_ss_cdemo_sk#0, max(ss_hdemo_sk#0) AS max_ss_hdemo_sk#0, max(ss_addr_sk#0) AS max_ss_addr_sk#0, max(ss_store_sk#0) AS max_ss_store_sk#0, max(ss_promo_sk#0) AS max_ss_promo_sk#0]
+- Project [ss_sold_date_sk#0, ss_sold_time_sk#0, ss_item_sk#0, ss_customer_sk#0, ss_cdemo_sk#0, ss_hdemo_sk#0, ss_addr_sk#0, ss_store_sk#0, ss_promo_sk#0]
   +- Relation[ss_sold_date_sk#0,ss_sold_time_sk#0,ss_item_sk#0,ss_customer_sk#0,ss_cdemo_sk#0,ss_hdemo_sk#0,ss_addr_sk#0,ss_store_sk#0,ss_promo_sk#0,ss_ticket_number#0,ss_quantity#0,ss_wholesale_cost#0,ss_list_price#0,ss_sales_price#0,ss_ext_discount_amt#0,ss_ext_sales_price#0,ss_ext_wholesale_cost#0,ss_ext_list_price#0,ss_ext_tax#0,ss_coupon_amt#0,ss_net_paid#0,ss_net_paid_inc_tax#0,ss_net_profit#0] parquet

== Physical Plan ==
*(3) HashAggregate(keys=[], functions=[count(1), count(ss_sold_date_sk#0), max(ss_sold_date_sk#0), max(ss_sold_time_sk#0), max(ss_item_sk#0), max(ss_customer_sk#0), max(ss_cdemo_sk#0), max(ss_hdemo_sk#0), max(ss_addr_sk#0), max(ss_store_sk#0), max(ss_promo_sk#0), count(distinct ss_sold_date_sk#0)], output=[total#0L, not_null_total#0L, unique_days#0L, max_ss_sold_date_sk#0, max_ss_sold_time_sk#0, max_ss_item_sk#0, max_ss_customer_sk#0, max_ss_cdemo_sk#0, max_ss_hdemo_sk#0, max_ss_addr_sk#0, max_ss_store_sk#0, max_ss_promo_sk#0])
+- Exchange SinglePartition
   +- *(2) HashAggregate(keys=[], functions=[merge_count(1), merge_count(ss_sold_date_sk#0), merge_max(ss_sold_date_sk#0), merge_max(ss_sold_time_sk#0), merge_max(ss_item_sk#0), merge_max(ss_customer_sk#0), merge_max(ss_cdemo_sk#0), merge_max(ss_hdemo_sk#0), merge_max(ss_addr_sk#0), merge_max(ss_store_sk#0), merge_max(ss_promo_sk#0), partial_count(distinct ss_sold_date_sk#0)], output=[count#0L, count#0L, max#0, max#0, max#0, max#0, max#0, max#0, max#0, max#0, max#0, count#0L])
      +- *(2) HashAggregate(keys=[ss_sold_date_sk#0], functions=[merge_count(1), merge_count(ss_sold_date_sk#0), merge_max(ss_sold_date_sk#0), merge_max(ss_sold_time_sk#0), merge_max(ss_item_sk#0), merge_max(ss_customer_sk#0), merge_max(ss_cdemo_sk#0), merge_max(ss_hdemo_sk#0), merge_max(ss_addr_sk#0), merge_max(ss_store_sk#0), merge_max(ss_promo_sk#0)], output=[ss_sold_date_sk#0, count#0L, count#0L, max#0, max#0, max#0, max#0, max#0, max#0, max#0, max#0, max#0])
         +- Exchange hashpartitioning(ss_sold_date_sk#0, 5)
            +- *(1) HashAggregate(keys=[ss_sold_date_sk#0], functions=[partial_count(1), partial_count(ss_sold_date_sk#0), partial_max(ss_sold_date_sk#0), partial_max(ss_sold_time_sk#0), partial_max(ss_item_sk#0), partial_max(ss_customer_sk#0), partial_max(ss_cdemo_sk#0), partial_max(ss_hdemo_sk#0), partial_max(ss_addr_sk#0), partial_max(ss_store_sk#0), partial_max(ss_promo_sk#0)], output=[ss_sold_date_sk#0, count#0L, count#0L, max#0, max#0, max#0, max#0, max#0, max#0, max#0, max#0, max#0])
               +- *(1) FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_sold_time_sk#0,ss_item_sk#0,ss_customer_sk#0,ss_cdemo_sk#0,ss_hdemo_sk#0,ss_addr_sk#0,ss_store_sk#0,ss_promo_sk#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/maropu/IdeaProjects/spark/spark-master/sql/core/spark-warehouse/sto..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ss_sold_date_sk:int,ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,...
