== Physical Plan ==
TakeOrderedAndProject (88)
+- * Project (87)
   +- * SortMergeJoin Inner (86)
      :- * Project (68)
      :  +- * SortMergeJoin Inner (67)
      :     :- * Project (47)
      :     :  +- * SortMergeJoin Inner (46)
      :     :     :- * Sort (25)
      :     :     :  +- Exchange (24)
      :     :     :     +- * Project (23)
      :     :     :        +- * Filter (22)
      :     :     :           +- * HashAggregate (21)
      :     :     :              +- Exchange (20)
      :     :     :                 +- * HashAggregate (19)
      :     :     :                    +- * Project (18)
      :     :     :                       +- * SortMergeJoin Inner (17)
      :     :     :                          :- * Sort (11)
      :     :     :                          :  +- Exchange (10)
      :     :     :                          :     +- * Project (9)
      :     :     :                          :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :                          :           :- * Filter (3)
      :     :     :                          :           :  +- * ColumnarToRow (2)
      :     :     :                          :           :     +- Scan parquet default.store_sales (1)
      :     :     :                          :           +- BroadcastExchange (7)
      :     :     :                          :              +- * Filter (6)
      :     :     :                          :                 +- * ColumnarToRow (5)
      :     :     :                          :                    +- Scan parquet default.date_dim (4)
      :     :     :                          +- * Sort (16)
      :     :     :                             +- Exchange (15)
      :     :     :                                +- * Filter (14)
      :     :     :                                   +- * ColumnarToRow (13)
      :     :     :                                      +- Scan parquet default.customer (12)
      :     :     +- * Sort (45)
      :     :        +- Exchange (44)
      :     :           +- * HashAggregate (43)
      :     :              +- Exchange (42)
      :     :                 +- * HashAggregate (41)
      :     :                    +- * Project (40)
      :     :                       +- * SortMergeJoin Inner (39)
      :     :                          :- * Sort (36)
      :     :                          :  +- Exchange (35)
      :     :                          :     +- * Project (34)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (33)
      :     :                          :           :- * Filter (28)
      :     :                          :           :  +- * ColumnarToRow (27)
      :     :                          :           :     +- Scan parquet default.store_sales (26)
      :     :                          :           +- BroadcastExchange (32)
      :     :                          :              +- * Filter (31)
      :     :                          :                 +- * ColumnarToRow (30)
      :     :                          :                    +- Scan parquet default.date_dim (29)
      :     :                          +- * Sort (38)
      :     :                             +- ReusedExchange (37)
      :     +- * Sort (66)
      :        +- Exchange (65)
      :           +- * Project (64)
      :              +- * Filter (63)
      :                 +- * HashAggregate (62)
      :                    +- Exchange (61)
      :                       +- * HashAggregate (60)
      :                          +- * Project (59)
      :                             +- * SortMergeJoin Inner (58)
      :                                :- * Sort (55)
      :                                :  +- Exchange (54)
      :                                :     +- * Project (53)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (52)
      :                                :           :- * Filter (50)
      :                                :           :  +- * ColumnarToRow (49)
      :                                :           :     +- Scan parquet default.web_sales (48)
      :                                :           +- ReusedExchange (51)
      :                                +- * Sort (57)
      :                                   +- ReusedExchange (56)
      +- * Sort (85)
         +- Exchange (84)
            +- * HashAggregate (83)
               +- Exchange (82)
                  +- * HashAggregate (81)
                     +- * Project (80)
                        +- * SortMergeJoin Inner (79)
                           :- * Sort (76)
                           :  +- Exchange (75)
                           :     +- * Project (74)
                           :        +- * BroadcastHashJoin Inner BuildRight (73)
                           :           :- * Filter (71)
                           :           :  +- * ColumnarToRow (70)
                           :           :     +- Scan parquet default.web_sales (69)
                           :           +- ReusedExchange (72)
                           +- * Sort (78)
                              +- ReusedExchange (77)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2001)) AND isnotnull(d_date_sk#5))

(7) BroadcastExchange
Input [2]: [d_date_sk#5, d_year#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#7]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_date_sk#5, d_year#6]

(10) Exchange
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#8]

(11) Sort [codegen id : 3]
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(13) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(14) Filter [codegen id : 4]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Condition : (isnotnull(c_customer_sk#9) AND isnotnull(c_customer_id#10))

(15) Exchange
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: hashpartitioning(c_customer_sk#9, 5), true, [id=#17]

(16) Sort [codegen id : 5]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(18) Project [codegen id : 6]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [12]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(19) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#18]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#19]

(20) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#19]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, 5), true, [id=#20]

(21) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#19]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#21]
Results [2]: [c_customer_id#10 AS customer_id#22, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#21,18,2) AS year_total#23]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#22, year_total#23]
Condition : (isnotnull(year_total#23) AND (year_total#23 > 0.00))

(23) Project [codegen id : 7]
Output [2]: [customer_id#22 AS customer_id#24, year_total#23 AS year_total#25]
Input [2]: [customer_id#22, year_total#23]

(24) Exchange
Input [2]: [customer_id#24, year_total#25]
Arguments: hashpartitioning(customer_id#24, 5), true, [id=#26]

(25) Sort [codegen id : 8]
Input [2]: [customer_id#24, year_total#25]
Arguments: [customer_id#24 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 10]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]

(28) Filter [codegen id : 10]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(29) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(30) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#5, d_year#6]

(31) Filter [codegen id : 9]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2002)) AND isnotnull(d_date_sk#5))

(32) BroadcastExchange
Input [2]: [d_date_sk#5, d_year#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(34) Project [codegen id : 10]
Output [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_date_sk#5, d_year#6]

(35) Exchange
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#28]

(36) Sort [codegen id : 11]
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(37) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(38) Sort [codegen id : 13]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(40) Project [codegen id : 14]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [12]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(41) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#29]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#30]

(42) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#30]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, 5), true, [id=#31]

(43) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#30]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#32]
Results [3]: [c_customer_id#10 AS customer_id#33, c_preferred_cust_flag#13 AS customer_preferred_cust_flag#34, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#32,18,2) AS year_total#35]

(44) Exchange
Input [3]: [customer_id#33, customer_preferred_cust_flag#34, year_total#35]
Arguments: hashpartitioning(customer_id#33, 5), true, [id=#36]

(45) Sort [codegen id : 16]
Input [3]: [customer_id#33, customer_preferred_cust_flag#34, year_total#35]
Arguments: [customer_id#33 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#24]
Right keys [1]: [customer_id#33]
Join condition: None

(47) Project [codegen id : 17]
Output [4]: [customer_id#24, year_total#25, customer_preferred_cust_flag#34, year_total#35]
Input [5]: [customer_id#24, year_total#25, customer_id#33, customer_preferred_cust_flag#34, year_total#35]

(48) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(49) ColumnarToRow [codegen id : 19]
Input [4]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40]

(50) Filter [codegen id : 19]
Input [4]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40]
Condition : (isnotnull(ws_bill_customer_sk#38) AND isnotnull(ws_sold_date_sk#37))

(51) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#5, d_year#6]

(52) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#5]
Join condition: None

(53) Project [codegen id : 19]
Output [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Input [6]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_date_sk#5, d_year#6]

(54) Exchange
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), true, [id=#41]

(55) Sort [codegen id : 20]
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Arguments: [ws_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(56) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(57) Sort [codegen id : 22]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(59) Project [codegen id : 23]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Input [12]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(60) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#42]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#43]

(61) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#43]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, 5), true, [id=#44]

(62) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#43]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#45]
Results [2]: [c_customer_id#10 AS customer_id#46, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#45,18,2) AS year_total#47]

(63) Filter [codegen id : 24]
Input [2]: [customer_id#46, year_total#47]
Condition : (isnotnull(year_total#47) AND (year_total#47 > 0.00))

(64) Project [codegen id : 24]
Output [2]: [customer_id#46 AS customer_id#48, year_total#47 AS year_total#49]
Input [2]: [customer_id#46, year_total#47]

(65) Exchange
Input [2]: [customer_id#48, year_total#49]
Arguments: hashpartitioning(customer_id#48, 5), true, [id=#50]

(66) Sort [codegen id : 25]
Input [2]: [customer_id#48, year_total#49]
Arguments: [customer_id#48 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#24]
Right keys [1]: [customer_id#48]
Join condition: None

(68) Project [codegen id : 26]
Output [5]: [customer_id#24, year_total#25, customer_preferred_cust_flag#34, year_total#35, year_total#49]
Input [6]: [customer_id#24, year_total#25, customer_preferred_cust_flag#34, year_total#35, customer_id#48, year_total#49]

(69) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(70) ColumnarToRow [codegen id : 28]
Input [4]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40]

(71) Filter [codegen id : 28]
Input [4]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40]
Condition : (isnotnull(ws_bill_customer_sk#38) AND isnotnull(ws_sold_date_sk#37))

(72) ReusedExchange [Reuses operator id: 32]
Output [2]: [d_date_sk#5, d_year#6]

(73) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#5]
Join condition: None

(74) Project [codegen id : 28]
Output [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Input [6]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_date_sk#5, d_year#6]

(75) Exchange
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), true, [id=#51]

(76) Sort [codegen id : 29]
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Arguments: [ws_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(78) Sort [codegen id : 31]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(79) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(80) Project [codegen id : 32]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Input [12]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(81) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#52]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#53]

(82) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#53]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, 5), true, [id=#54]

(83) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#53]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#55]
Results [2]: [c_customer_id#10 AS customer_id#56, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#55,18,2) AS year_total#57]

(84) Exchange
Input [2]: [customer_id#56, year_total#57]
Arguments: hashpartitioning(customer_id#56, 5), true, [id=#58]

(85) Sort [codegen id : 34]
Input [2]: [customer_id#56, year_total#57]
Arguments: [customer_id#56 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#24]
Right keys [1]: [customer_id#56]
Join condition: (CASE WHEN (year_total#49 > 0.00) THEN CheckOverflow((promote_precision(year_total#57) / promote_precision(year_total#49)), DecimalType(38,20), true) ELSE null END > CASE WHEN (year_total#25 > 0.00) THEN CheckOverflow((promote_precision(year_total#35) / promote_precision(year_total#25)), DecimalType(38,20), true) ELSE null END)

(87) Project [codegen id : 35]
Output [1]: [customer_preferred_cust_flag#34]
Input [7]: [customer_id#24, year_total#25, customer_preferred_cust_flag#34, year_total#35, year_total#49, customer_id#56, year_total#57]

(88) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#34]
Arguments: 100, [customer_preferred_cust_flag#34 ASC NULLS FIRST], [customer_preferred_cust_flag#34]

