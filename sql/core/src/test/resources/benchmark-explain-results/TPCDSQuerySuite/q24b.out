*Project [c_last_name#0, s_store_name#0, paid#0, c_first_name#0]
+- *Filter ((cast(sum(netpaid#0)#0 as decimal(33,8)) > cast(Subquery none as decimal(33,8))) && isnotnull(sum(netpaid#0)#0))
   :  +- Subquery none
   :     +- Subquery none
   :        +- *HashAggregate(keys=[], functions=[avg(netpaid#0)])
   :           +- Exchange SinglePartition
   :              +- *HashAggregate(keys=[], functions=[partial_avg(netpaid#0)])
   :                 +- *HashAggregate(keys=[c_last_name#0, c_first_name#0, s_store_name#0, ca_state#0, s_state#0, i_color#0, i_current_price#0, i_manager_id#0, i_units#0, i_size#0], functions=[sum(UnscaledValue(ss_net_paid#0))])
   :                    +- Exchange hashpartitioning(c_last_name#0, c_first_name#0, s_store_name#0, ca_state#0, s_state#0, i_color#0, i_current_price#0, i_manager_id#0, i_units#0, i_size#0, 5)
   :                       +- *HashAggregate(keys=[c_last_name#0, c_first_name#0, s_store_name#0, ca_state#0, s_state#0, i_color#0, i_current_price#0, i_manager_id#0, i_units#0, i_size#0], functions=[partial_sum(UnscaledValue(ss_net_paid#0))])
   :                          +- *Project [i_manager_id#0, ss_net_paid#0, c_first_name#0, i_color#0, i_size#0, i_units#0, s_state#0, c_last_name#0, s_store_name#0, ca_state#0, i_current_price#0]
   :                             +- *BroadcastHashJoin [c_birth_country#0, s_zip#0], [upper(ca_country#0), ca_zip#0], Inner, BuildRight
   :                                :- *Project [i_manager_id#0, ss_net_paid#0, c_first_name#0, i_color#0, i_size#0, i_units#0, s_state#0, c_last_name#0, s_zip#0, s_store_name#0, c_birth_country#0, i_current_price#0]
   :                                :  +- *BroadcastHashJoin [ss_customer_sk#0], [c_customer_sk#0], Inner, BuildRight
   :                                :     :- *Project [i_manager_id#0, ss_net_paid#0, i_color#0, i_size#0, i_units#0, s_state#0, s_zip#0, ss_customer_sk#0, s_store_name#0, i_current_price#0]
   :                                :     :  +- *BroadcastHashJoin [ss_item_sk#0], [i_item_sk#0], Inner, BuildRight
   :                                :     :     :- *Project [ss_net_paid#0, s_state#0, ss_item_sk#0, s_zip#0, ss_customer_sk#0, s_store_name#0]
   :                                :     :     :  +- *BroadcastHashJoin [ss_store_sk#0], [s_store_sk#0], Inner, BuildRight
   :                                :     :     :     :- *Project [ss_net_paid#0, ss_item_sk#0, ss_store_sk#0, ss_customer_sk#0]
   :                                :     :     :     :  +- *BroadcastHashJoin [cast(ss_ticket_number#0 as bigint), cast(ss_item_sk#0 as bigint)], [sr_ticket_number#0L, sr_item_sk#0L], Inner, BuildRight
   :                                :     :     :     :     :- *Project [ss_net_paid#0, ss_item_sk#0, ss_ticket_number#0, ss_store_sk#0, ss_customer_sk#0]
   :                                :     :     :     :     :  +- *Filter (((isnotnull(ss_item_sk#0) && isnotnull(ss_store_sk#0)) && isnotnull(ss_ticket_number#0)) && isnotnull(ss_customer_sk#0))
   :                                :     :     :     :     :     +- *FileScan parquet default.store_sales[ss_item_sk#0,ss_customer_sk#0,ss_store_sk#0,ss_ticket_number#0,ss_net_paid#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ss_net_paid:decimal...
   :                                :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
   :                                :     :     :     :        +- *Project [sr_item_sk#0L, sr_ticket_number#0L]
   :                                :     :     :     :           +- *Filter (isnotnull(sr_item_sk#0L) && isnotnull(sr_ticket_number#0L))
   :                                :     :     :     :              +- *FileScan parquet default.store_returns[sr_item_sk#0L,sr_ticket_number#0L] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,sr_ticket_number:bigint>
   :                                :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
   :                                :     :     :        +- *Project [s_state#0, s_zip#0, s_store_sk#0, s_store_name#0]
   :                                :     :     :           +- *Filter (((isnotnull(s_market_id#0) && isnotnull(s_store_sk#0)) && isnotnull(s_zip#0)) && (8 = s_market_id#0))
   :                                :     :     :              +- *FileScan parquet default.store[s_store_sk#0,s_store_name#0,s_market_id#0,s_state#0,s_zip#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,s_zip:string>
   :                                :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
   :                                :     :        +- *Project [i_manager_id#0, i_color#0, i_size#0, i_units#0, i_item_sk#0, i_current_price#0]
   :                                :     :           +- *Filter isnotnull(i_item_sk#0)
   :                                :     :              +- *FileScan parquet default.item[i_item_sk#0,i_current_price#0,i_size#0,i_color#0,i_units#0,i_manager_id#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_m...
   :                                :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
   :                                :        +- *Project [c_first_name#0, c_last_name#0, c_customer_sk#0, c_birth_country#0]
   :                                :           +- *Filter (isnotnull(c_customer_sk#0) && isnotnull(c_birth_country#0))
   :                                :              +- *FileScan parquet default.customer[c_customer_sk#0,c_first_name#0,c_last_name#0,c_birth_country#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_birth_country:string>
   :                                +- BroadcastExchange HashedRelationBroadcastMode(List(upper(input[2, string, true]), input[1, string, true]))
   :                                   +- *Project [ca_country#0, ca_zip#0, ca_state#0]
   :                                      +- *Filter isnotnull(ca_zip#0)
   :                                         +- *FileScan parquet default.customer_address[ca_state#0,ca_zip#0,ca_country#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ca_country:string>
   +- *HashAggregate(keys=[c_last_name#0, c_first_name#0, s_store_name#0], functions=[sum(netpaid#0)])
      +- Exchange hashpartitioning(c_last_name#0, c_first_name#0, s_store_name#0, 5)
         +- *HashAggregate(keys=[c_last_name#0, c_first_name#0, s_store_name#0], functions=[partial_sum(netpaid#0)])
            +- *HashAggregate(keys=[c_last_name#0, c_first_name#0, s_store_name#0, ca_state#0, s_state#0, i_color#0, i_current_price#0, i_manager_id#0, i_units#0, i_size#0], functions=[sum(UnscaledValue(ss_net_paid#0))])
               +- Exchange hashpartitioning(c_last_name#0, c_first_name#0, s_store_name#0, ca_state#0, s_state#0, i_color#0, i_current_price#0, i_manager_id#0, i_units#0, i_size#0, 5)
                  +- *HashAggregate(keys=[c_last_name#0, c_first_name#0, s_store_name#0, ca_state#0, s_state#0, i_color#0, i_current_price#0, i_manager_id#0, i_units#0, i_size#0], functions=[partial_sum(UnscaledValue(ss_net_paid#0))])
                     +- *Project [i_manager_id#0, ss_net_paid#0, c_first_name#0, i_color#0, i_size#0, i_units#0, s_state#0, c_last_name#0, s_store_name#0, ca_state#0, i_current_price#0]
                        +- *BroadcastHashJoin [c_birth_country#0, s_zip#0], [upper(ca_country#0), ca_zip#0], Inner, BuildRight
                           :- *Project [i_manager_id#0, ss_net_paid#0, c_first_name#0, i_color#0, i_size#0, i_units#0, s_state#0, c_last_name#0, s_zip#0, s_store_name#0, c_birth_country#0, i_current_price#0]
                           :  +- *BroadcastHashJoin [ss_customer_sk#0], [c_customer_sk#0], Inner, BuildRight
                           :     :- *Project [i_manager_id#0, ss_net_paid#0, i_color#0, i_size#0, i_units#0, s_state#0, s_zip#0, ss_customer_sk#0, s_store_name#0, i_current_price#0]
                           :     :  +- *BroadcastHashJoin [ss_item_sk#0], [i_item_sk#0], Inner, BuildRight
                           :     :     :- *Project [ss_net_paid#0, s_state#0, ss_item_sk#0, s_zip#0, ss_customer_sk#0, s_store_name#0]
                           :     :     :  +- *BroadcastHashJoin [ss_store_sk#0], [s_store_sk#0], Inner, BuildRight
                           :     :     :     :- *Project [ss_net_paid#0, ss_item_sk#0, ss_store_sk#0, ss_customer_sk#0]
                           :     :     :     :  +- *BroadcastHashJoin [cast(ss_ticket_number#0 as bigint), cast(ss_item_sk#0 as bigint)], [sr_ticket_number#0L, sr_item_sk#0L], Inner, BuildRight
                           :     :     :     :     :- *Project [ss_net_paid#0, ss_item_sk#0, ss_ticket_number#0, ss_store_sk#0, ss_customer_sk#0]
                           :     :     :     :     :  +- *Filter (((isnotnull(ss_item_sk#0) && isnotnull(ss_store_sk#0)) && isnotnull(ss_ticket_number#0)) && isnotnull(ss_customer_sk#0))
                           :     :     :     :     :     +- *FileScan parquet default.store_sales[ss_item_sk#0,ss_customer_sk#0,ss_store_sk#0,ss_ticket_number#0,ss_net_paid#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ss_net_paid:decimal...
                           :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
                           :     :     :     :        +- *Project [sr_item_sk#0L, sr_ticket_number#0L]
                           :     :     :     :           +- *Filter (isnotnull(sr_item_sk#0L) && isnotnull(sr_ticket_number#0L))
                           :     :     :     :              +- *FileScan parquet default.store_returns[sr_item_sk#0L,sr_ticket_number#0L] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,sr_ticket_number:bigint>
                           :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           :     :     :        +- *Project [s_state#0, s_zip#0, s_store_sk#0, s_store_name#0]
                           :     :     :           +- *Filter (((isnotnull(s_market_id#0) && isnotnull(s_store_sk#0)) && isnotnull(s_zip#0)) && (8 = s_market_id#0))
                           :     :     :              +- *FileScan parquet default.store[s_store_sk#0,s_store_name#0,s_market_id#0,s_state#0,s_zip#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,s_zip:string>
                           :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           :     :        +- *Project [i_manager_id#0, i_color#0, i_size#0, i_units#0, i_item_sk#0, i_current_price#0]
                           :     :           +- *Filter ((isnotnull(i_item_sk#0) && (chiffon = i_color#0)) && isnotnull(i_color#0))
                           :     :              +- *FileScan parquet default.item[i_item_sk#0,i_current_price#0,i_size#0,i_color#0,i_units#0,i_manager_id#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_m...
                           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           :        +- *Project [c_first_name#0, c_last_name#0, c_customer_sk#0, c_birth_country#0]
                           :           +- *Filter (isnotnull(c_customer_sk#0) && isnotnull(c_birth_country#0))
                           :              +- *FileScan parquet default.customer[c_customer_sk#0,c_first_name#0,c_last_name#0,c_birth_country#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_birth_country:string>
                           +- BroadcastExchange HashedRelationBroadcastMode(List(upper(input[2, string, true]), input[1, string, true]))
                              +- *Project [ca_country#0, ca_zip#0, ca_state#0]
                                 +- *Filter isnotnull(ca_zip#0)
                                    +- *FileScan parquet default.customer_address[ca_state#0,ca_zip#0,ca_country#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ca_country:string>
