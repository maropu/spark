== Physical Plan ==
TakeOrderedAndProject (87)
+- * Project (86)
   +- * SortMergeJoin Inner (85)
      :- * Project (67)
      :  +- * SortMergeJoin Inner (66)
      :     :- * SortMergeJoin Inner (46)
      :     :  :- * Sort (25)
      :     :  :  +- Exchange (24)
      :     :  :     +- * Project (23)
      :     :  :        +- * Filter (22)
      :     :  :           +- * HashAggregate (21)
      :     :  :              +- Exchange (20)
      :     :  :                 +- * HashAggregate (19)
      :     :  :                    +- * Project (18)
      :     :  :                       +- * SortMergeJoin Inner (17)
      :     :  :                          :- * Sort (11)
      :     :  :                          :  +- Exchange (10)
      :     :  :                          :     +- * Project (9)
      :     :  :                          :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                          :           :- * Filter (3)
      :     :  :                          :           :  +- * ColumnarToRow (2)
      :     :  :                          :           :     +- Scan parquet default.store_sales (1)
      :     :  :                          :           +- BroadcastExchange (7)
      :     :  :                          :              +- * Filter (6)
      :     :  :                          :                 +- * ColumnarToRow (5)
      :     :  :                          :                    +- Scan parquet default.date_dim (4)
      :     :  :                          +- * Sort (16)
      :     :  :                             +- Exchange (15)
      :     :  :                                +- * Filter (14)
      :     :  :                                   +- * ColumnarToRow (13)
      :     :  :                                      +- Scan parquet default.customer (12)
      :     :  +- * Sort (45)
      :     :     +- Exchange (44)
      :     :        +- * HashAggregate (43)
      :     :           +- Exchange (42)
      :     :              +- * HashAggregate (41)
      :     :                 +- * Project (40)
      :     :                    +- * SortMergeJoin Inner (39)
      :     :                       :- * Sort (36)
      :     :                       :  +- Exchange (35)
      :     :                       :     +- * Project (34)
      :     :                       :        +- * BroadcastHashJoin Inner BuildRight (33)
      :     :                       :           :- * Filter (28)
      :     :                       :           :  +- * ColumnarToRow (27)
      :     :                       :           :     +- Scan parquet default.store_sales (26)
      :     :                       :           +- BroadcastExchange (32)
      :     :                       :              +- * Filter (31)
      :     :                       :                 +- * ColumnarToRow (30)
      :     :                       :                    +- Scan parquet default.date_dim (29)
      :     :                       +- * Sort (38)
      :     :                          +- ReusedExchange (37)
      :     +- * Sort (65)
      :        +- Exchange (64)
      :           +- * Project (63)
      :              +- * Filter (62)
      :                 +- * HashAggregate (61)
      :                    +- Exchange (60)
      :                       +- * HashAggregate (59)
      :                          +- * Project (58)
      :                             +- * SortMergeJoin Inner (57)
      :                                :- * Sort (54)
      :                                :  +- Exchange (53)
      :                                :     +- * Project (52)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (51)
      :                                :           :- * Filter (49)
      :                                :           :  +- * ColumnarToRow (48)
      :                                :           :     +- Scan parquet default.web_sales (47)
      :                                :           +- ReusedExchange (50)
      :                                +- * Sort (56)
      :                                   +- ReusedExchange (55)
      +- * Sort (84)
         +- Exchange (83)
            +- * HashAggregate (82)
               +- Exchange (81)
                  +- * HashAggregate (80)
                     +- * Project (79)
                        +- * SortMergeJoin Inner (78)
                           :- * Sort (75)
                           :  +- Exchange (74)
                           :     +- * Project (73)
                           :        +- * BroadcastHashJoin Inner BuildRight (72)
                           :           :- * Filter (70)
                           :           :  +- * ColumnarToRow (69)
                           :           :     +- Scan parquet default.web_sales (68)
                           :           +- ReusedExchange (71)
                           +- * Sort (77)
                              +- ReusedExchange (76)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2001)) AND isnotnull(d_date_sk#5))

(7) BroadcastExchange
Input [2]: [d_date_sk#5, d_year#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#7]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_date_sk#5, d_year#6]

(10) Exchange
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#8]

(11) Sort [codegen id : 3]
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(13) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(14) Filter [codegen id : 4]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Condition : (isnotnull(c_customer_sk#9) AND isnotnull(c_customer_id#10))

(15) Exchange
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: hashpartitioning(c_customer_sk#9, 5), true, [id=#17]

(16) Sort [codegen id : 5]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(18) Project [codegen id : 6]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [12]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(19) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#18]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#19]

(20) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#19]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, 5), true, [id=#20]

(21) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#19]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#21]
Results [2]: [c_customer_id#10 AS customer_id#22, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#21,18,2) AS year_total#23]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#22, year_total#23]
Condition : (isnotnull(year_total#23) AND (year_total#23 > 0.00))

(23) Project [codegen id : 7]
Output [2]: [customer_id#22 AS customer_id#24, year_total#23 AS year_total#25]
Input [2]: [customer_id#22, year_total#23]

(24) Exchange
Input [2]: [customer_id#24, year_total#25]
Arguments: hashpartitioning(customer_id#24, 5), true, [id=#26]

(25) Sort [codegen id : 8]
Input [2]: [customer_id#24, year_total#25]
Arguments: [customer_id#24 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 10]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]

(28) Filter [codegen id : 10]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(29) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(30) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#5, d_year#6]

(31) Filter [codegen id : 9]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2002)) AND isnotnull(d_date_sk#5))

(32) BroadcastExchange
Input [2]: [d_date_sk#5, d_year#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(34) Project [codegen id : 10]
Output [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_date_sk#5, d_year#6]

(35) Exchange
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#28]

(36) Sort [codegen id : 11]
Input [4]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(37) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(38) Sort [codegen id : 13]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(40) Project [codegen id : 14]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Input [12]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(41) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ss_ext_discount_amt#3, ss_ext_list_price#4, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#29]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#30]

(42) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#30]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, 5), true, [id=#31]

(43) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, sum#30]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#6, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#32]
Results [5]: [c_customer_id#10 AS customer_id#33, c_first_name#11 AS customer_first_name#34, c_last_name#12 AS customer_last_name#35, c_email_address#16 AS customer_email_address#36, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#4 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(8,2)))), DecimalType(8,2), true)))#32,18,2) AS year_total#37]

(44) Exchange
Input [5]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37]
Arguments: hashpartitioning(customer_id#33, 5), true, [id=#38]

(45) Sort [codegen id : 16]
Input [5]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37]
Arguments: [customer_id#33 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#24]
Right keys [1]: [customer_id#33]
Join condition: None

(47) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 19]
Input [4]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42]

(49) Filter [codegen id : 19]
Input [4]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42]
Condition : (isnotnull(ws_bill_customer_sk#40) AND isnotnull(ws_sold_date_sk#39))

(50) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#5, d_year#6]

(51) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#39]
Right keys [1]: [d_date_sk#5]
Join condition: None

(52) Project [codegen id : 19]
Output [4]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Input [6]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_date_sk#5, d_year#6]

(53) Exchange
Input [4]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Arguments: hashpartitioning(ws_bill_customer_sk#40, 5), true, [id=#43]

(54) Sort [codegen id : 20]
Input [4]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Arguments: [ws_bill_customer_sk#40 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(56) Sort [codegen id : 22]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#40]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(58) Project [codegen id : 23]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Input [12]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(59) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#44]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#45]

(60) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#45]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, 5), true, [id=#46]

(61) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#45]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))#47]
Results [2]: [c_customer_id#10 AS customer_id#48, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))#47,18,2) AS year_total#49]

(62) Filter [codegen id : 24]
Input [2]: [customer_id#48, year_total#49]
Condition : (isnotnull(year_total#49) AND (year_total#49 > 0.00))

(63) Project [codegen id : 24]
Output [2]: [customer_id#48 AS customer_id#50, year_total#49 AS year_total#51]
Input [2]: [customer_id#48, year_total#49]

(64) Exchange
Input [2]: [customer_id#50, year_total#51]
Arguments: hashpartitioning(customer_id#50, 5), true, [id=#52]

(65) Sort [codegen id : 25]
Input [2]: [customer_id#50, year_total#51]
Arguments: [customer_id#50 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#24]
Right keys [1]: [customer_id#50]
Join condition: None

(67) Project [codegen id : 26]
Output [8]: [customer_id#24, year_total#25, customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37, year_total#51]
Input [9]: [customer_id#24, year_total#25, customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37, customer_id#50, year_total#51]

(68) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(69) ColumnarToRow [codegen id : 28]
Input [4]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42]

(70) Filter [codegen id : 28]
Input [4]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42]
Condition : (isnotnull(ws_bill_customer_sk#40) AND isnotnull(ws_sold_date_sk#39))

(71) ReusedExchange [Reuses operator id: 32]
Output [2]: [d_date_sk#5, d_year#6]

(72) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#39]
Right keys [1]: [d_date_sk#5]
Join condition: None

(73) Project [codegen id : 28]
Output [4]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Input [6]: [ws_sold_date_sk#39, ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_date_sk#5, d_year#6]

(74) Exchange
Input [4]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Arguments: hashpartitioning(ws_bill_customer_sk#40, 5), true, [id=#53]

(75) Sort [codegen id : 29]
Input [4]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Arguments: [ws_bill_customer_sk#40 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(77) Sort [codegen id : 31]
Input [8]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#40]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(79) Project [codegen id : 32]
Output [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Input [12]: [ws_bill_customer_sk#40, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16]

(80) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, ws_ext_discount_amt#41, ws_ext_list_price#42, d_year#6]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#54]
Results [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#55]

(81) Exchange
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#55]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, 5), true, [id=#56]

(82) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6, sum#55]
Keys [8]: [c_customer_id#10, c_first_name#11, c_last_name#12, c_preferred_cust_flag#13, c_birth_country#14, c_login#15, c_email_address#16, d_year#6]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))#57]
Results [2]: [c_customer_id#10 AS customer_id#58, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#42 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#41 as decimal(8,2)))), DecimalType(8,2), true)))#57,18,2) AS year_total#59]

(83) Exchange
Input [2]: [customer_id#58, year_total#59]
Arguments: hashpartitioning(customer_id#58, 5), true, [id=#60]

(84) Sort [codegen id : 34]
Input [2]: [customer_id#58, year_total#59]
Arguments: [customer_id#58 ASC NULLS FIRST], false, 0

(85) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#24]
Right keys [1]: [customer_id#58]
Join condition: (CASE WHEN (year_total#51 > 0.00) THEN CheckOverflow((promote_precision(year_total#59) / promote_precision(year_total#51)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#25 > 0.00) THEN CheckOverflow((promote_precision(year_total#37) / promote_precision(year_total#25)), DecimalType(38,20), true) ELSE 0E-20 END)

(86) Project [codegen id : 35]
Output [4]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36]
Input [10]: [customer_id#24, year_total#25, customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37, year_total#51, customer_id#58, year_total#59]

(87) TakeOrderedAndProject
Input [4]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36]
Arguments: 100, [customer_id#33 ASC NULLS FIRST, customer_first_name#34 ASC NULLS FIRST, customer_last_name#35 ASC NULLS FIRST, customer_email_address#36 ASC NULLS FIRST], [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36]

