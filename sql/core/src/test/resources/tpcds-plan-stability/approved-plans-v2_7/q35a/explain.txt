== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- Exchange (45)
      +- * HashAggregate (44)
         +- * Project (43)
            +- BroadcastNestedLoopJoin LeftSemi BuildRight (42)
               :- * Project (27)
               :  +- * BroadcastHashJoin Inner BuildRight (26)
               :     :- * Project (21)
               :     :  +- * BroadcastHashJoin Inner BuildRight (20)
               :     :     :- * BroadcastHashJoin LeftSemi BuildRight (15)
               :     :     :  :- * Filter (3)
               :     :     :  :  +- * ColumnarToRow (2)
               :     :     :  :     +- Scan parquet default.customer (1)
               :     :     :  +- BroadcastExchange (14)
               :     :     :     +- * Project (13)
               :     :     :        +- * BroadcastHashJoin Inner BuildRight (12)
               :     :     :           :- * Filter (6)
               :     :     :           :  +- * ColumnarToRow (5)
               :     :     :           :     +- Scan parquet default.store_sales (4)
               :     :     :           +- BroadcastExchange (11)
               :     :     :              +- * Project (10)
               :     :     :                 +- * Filter (9)
               :     :     :                    +- * ColumnarToRow (8)
               :     :     :                       +- Scan parquet default.date_dim (7)
               :     :     +- BroadcastExchange (19)
               :     :        +- * Filter (18)
               :     :           +- * ColumnarToRow (17)
               :     :              +- Scan parquet default.customer_address (16)
               :     +- BroadcastExchange (25)
               :        +- * Filter (24)
               :           +- * ColumnarToRow (23)
               :              +- Scan parquet default.customer_demographics (22)
               +- BroadcastExchange (41)
                  +- Union (40)
                     :- * Project (33)
                     :  +- * BroadcastHashJoin Inner BuildRight (32)
                     :     :- * Filter (30)
                     :     :  +- * ColumnarToRow (29)
                     :     :     +- Scan parquet default.web_sales (28)
                     :     +- ReusedExchange (31)
                     +- * Project (39)
                        +- * BroadcastHashJoin Inner BuildRight (38)
                           :- * Filter (36)
                           :  +- * ColumnarToRow (35)
                           :     +- Scan parquet default.catalog_sales (34)
                           +- ReusedExchange (37)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 5]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 5]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#4, ss_customer_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_sold_date_sk#4, ss_customer_sk#5]

(6) Filter [codegen id : 2]
Input [2]: [ss_sold_date_sk#4, ss_customer_sk#5]
Condition : isnotnull(ss_sold_date_sk#4)

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_qoy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(8) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_qoy#8]

(9) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_qoy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_qoy#8)) AND (d_year#7 = 1999)) AND (d_qoy#8 < 4)) AND isnotnull(d_date_sk#6))

(10) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [3]: [d_date_sk#6, d_year#7, d_qoy#8]

(11) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(13) Project [codegen id : 2]
Output [1]: [ss_customer_sk#5]
Input [3]: [ss_sold_date_sk#4, ss_customer_sk#5, d_date_sk#6]

(14) BroadcastExchange
Input [1]: [ss_customer_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(16) Scan parquet default.customer_address
Output [2]: [ca_address_sk#11, ca_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(17) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#11, ca_state#12]

(18) Filter [codegen id : 3]
Input [2]: [ca_address_sk#11, ca_state#12]
Condition : isnotnull(ca_address_sk#11)

(19) BroadcastExchange
Input [2]: [ca_address_sk#11, ca_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#11]
Join condition: None

(21) Project [codegen id : 5]
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, ca_state#12]
Input [5]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#11, ca_state#12]

(22) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(23) ColumnarToRow [codegen id : 4]
Input [6]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]

(24) Filter [codegen id : 4]
Input [6]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Condition : isnotnull(cd_demo_sk#14)

(25) BroadcastExchange
Input [6]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join condition: None

(27) Project [codegen id : 5]
Output [7]: [c_customer_sk#1, ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Input [9]: [c_customer_sk#1, c_current_cdemo_sk#2, ca_state#12, cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]

(28) Scan parquet default.web_sales
Output [1]: [ws_sold_date_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int>

(29) ColumnarToRow [codegen id : 7]
Input [1]: [ws_sold_date_sk#21]

(30) Filter [codegen id : 7]
Input [1]: [ws_sold_date_sk#21]
Condition : isnotnull(ws_sold_date_sk#21)

(31) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#6]

(32) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#21]
Right keys [1]: [d_date_sk#6]
Join condition: None

(33) Project [codegen id : 7]
Output: []
Input [2]: [ws_sold_date_sk#21, d_date_sk#6]

(34) Scan parquet default.catalog_sales
Output [1]: [cs_sold_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int>

(35) ColumnarToRow [codegen id : 9]
Input [1]: [cs_sold_date_sk#22]

(36) Filter [codegen id : 9]
Input [1]: [cs_sold_date_sk#22]
Condition : isnotnull(cs_sold_date_sk#22)

(37) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#6]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#6]
Join condition: None

(39) Project [codegen id : 9]
Output: []
Input [2]: [cs_sold_date_sk#22, d_date_sk#6]

(40) Union

(41) BroadcastExchange
Input: []
Arguments: IdentityBroadcastMode, [id=#23]

(42) BroadcastNestedLoopJoin
Join condition: (customsk#24 = c_customer_sk#1)

(43) Project [codegen id : 10]
Output [6]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Input [7]: [c_customer_sk#1, ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]

(44) HashAggregate [codegen id : 10]
Input [6]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Keys [6]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Functions [10]: [partial_count(1), partial_avg(cast(cd_dep_count#17 as bigint)), partial_max(cd_dep_count#17), partial_sum(cast(cd_dep_count#17 as bigint)), partial_avg(cast(cd_dep_employed_count#18 as bigint)), partial_max(cd_dep_employed_count#18), partial_sum(cast(cd_dep_employed_count#18 as bigint)), partial_avg(cast(cd_dep_college_count#19 as bigint)), partial_max(cd_dep_college_count#19), partial_sum(cast(cd_dep_college_count#19 as bigint))]
Aggregate Attributes [13]: [count#25, sum#26, count#27, max#28, sum#29, sum#30, count#31, max#32, sum#33, sum#34, count#35, max#36, sum#37]
Results [19]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19, count#38, sum#39, count#40, max#41, sum#42, sum#43, count#44, max#45, sum#46, sum#47, count#48, max#49, sum#50]

(45) Exchange
Input [19]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19, count#38, sum#39, count#40, max#41, sum#42, sum#43, count#44, max#45, sum#46, sum#47, count#48, max#49, sum#50]
Arguments: hashpartitioning(ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19, 5), true, [id=#51]

(46) HashAggregate [codegen id : 11]
Input [19]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19, count#38, sum#39, count#40, max#41, sum#42, sum#43, count#44, max#45, sum#46, sum#47, count#48, max#49, sum#50]
Keys [6]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cd_dep_employed_count#18, cd_dep_college_count#19]
Functions [10]: [count(1), avg(cast(cd_dep_count#17 as bigint)), max(cd_dep_count#17), sum(cast(cd_dep_count#17 as bigint)), avg(cast(cd_dep_employed_count#18 as bigint)), max(cd_dep_employed_count#18), sum(cast(cd_dep_employed_count#18 as bigint)), avg(cast(cd_dep_college_count#19 as bigint)), max(cd_dep_college_count#19), sum(cast(cd_dep_college_count#19 as bigint))]
Aggregate Attributes [10]: [count(1)#52, avg(cast(cd_dep_count#17 as bigint))#53, max(cd_dep_count#17)#54, sum(cast(cd_dep_count#17 as bigint))#55, avg(cast(cd_dep_employed_count#18 as bigint))#56, max(cd_dep_employed_count#18)#57, sum(cast(cd_dep_employed_count#18 as bigint))#58, avg(cast(cd_dep_college_count#19 as bigint))#59, max(cd_dep_college_count#19)#60, sum(cast(cd_dep_college_count#19 as bigint))#61]
Results [18]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, count(1)#52 AS cnt1#62, avg(cast(cd_dep_count#17 as bigint))#53 AS avg(cd_dep_count)#63, max(cd_dep_count#17)#54 AS max(cd_dep_count)#64, sum(cast(cd_dep_count#17 as bigint))#55 AS sum(cd_dep_count)#65, cd_dep_employed_count#18, count(1)#52 AS cnt2#66, avg(cast(cd_dep_employed_count#18 as bigint))#56 AS avg(cd_dep_employed_count)#67, max(cd_dep_employed_count#18)#57 AS max(cd_dep_employed_count)#68, sum(cast(cd_dep_employed_count#18 as bigint))#58 AS sum(cd_dep_employed_count)#69, cd_dep_college_count#19, count(1)#52 AS cnt3#70, avg(cast(cd_dep_college_count#19 as bigint))#59 AS avg(cd_dep_college_count)#71, max(cd_dep_college_count#19)#60 AS max(cd_dep_college_count)#72, sum(cast(cd_dep_college_count#19 as bigint))#61 AS sum(cd_dep_college_count)#73]

(47) TakeOrderedAndProject
Input [18]: [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cnt1#62, avg(cd_dep_count)#63, max(cd_dep_count)#64, sum(cd_dep_count)#65, cd_dep_employed_count#18, cnt2#66, avg(cd_dep_employed_count)#67, max(cd_dep_employed_count)#68, sum(cd_dep_employed_count)#69, cd_dep_college_count#19, cnt3#70, avg(cd_dep_college_count)#71, max(cd_dep_college_count)#72, sum(cd_dep_college_count)#73]
Arguments: 100, [ca_state#12 ASC NULLS FIRST, cd_gender#15 ASC NULLS FIRST, cd_marital_status#16 ASC NULLS FIRST, cd_dep_count#17 ASC NULLS FIRST, cd_dep_employed_count#18 ASC NULLS FIRST, cd_dep_college_count#19 ASC NULLS FIRST], [ca_state#12, cd_gender#15, cd_marital_status#16, cd_dep_count#17, cnt1#62, avg(cd_dep_count)#63, max(cd_dep_count)#64, sum(cd_dep_count)#65, cd_dep_employed_count#18, cnt2#66, avg(cd_dep_employed_count)#67, max(cd_dep_employed_count)#68, sum(cd_dep_employed_count)#69, cd_dep_college_count#19, cnt3#70, avg(cd_dep_college_count)#71, max(cd_dep_college_count)#72, sum(cd_dep_college_count)#73]

