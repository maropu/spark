TakeOrderedAndProject(limit=100, orderBy=[CheckOverflow((promote_precision(cast(sum_sales#0 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#0 as decimal(22,6)))), DecimalType(22,6)) ASC NULLS FIRST,cc_name#0 ASC NULLS FIRST], output=[i_category#0,i_brand#0,cc_name#0,d_year#0,d_moy#0,avg_monthly_sales#0,sum_sales#0,psum#0,nsum#0])
+- *Project [sum_sales#0 AS none#0, d_moy#0, sum_sales#0, avg_monthly_sales#0, i_category#0, sum_sales#0 AS none#0, i_brand#0, d_year#0, cc_name#0]
   +- *BroadcastHashJoin [i_category#0, i_brand#0, cc_name#0, rn#0], [i_category#0, i_brand#0, cc_name#0, (rn#0 - 1)], Inner, BuildRight
      :- *Project [cc_name#0, d_moy#0, i_category#0, i_brand#0, rn#0, sum_sales#0, sum_sales#0, d_year#0, avg_monthly_sales#0]
      :  +- *BroadcastHashJoin [i_category#0, i_brand#0, cc_name#0, rn#0], [i_category#0, i_brand#0, cc_name#0, (rn#0 + 1)], Inner, BuildRight
      :     :- *Project [cc_name#0, d_moy#0, i_category#0, i_brand#0, rn#0, sum_sales#0, d_year#0, avg_monthly_sales#0]
      :     :  +- *Filter ((((avg_monthly_sales#0 > 0.000000) && isnotnull(rn#0)) && (CASE WHEN (avg_monthly_sales#0 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#0 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#0 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#0 as decimal(22,6)))), DecimalType(38,16)) ELSE null END > 0.1000000000000000)) && isnotnull(avg_monthly_sales#0))
      :     :     +- Window [avg(_w0#0) windowspecdefinition(i_category#0, i_brand#0, cc_name#0, d_year#0, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS none#0], [i_category#0, i_brand#0, cc_name#0, d_year#0]
      :     :        +- *Filter (isnotnull(d_year#0) && (d_year#0 = 1999))
      :     :           +- Window [rank(d_year#0, d_moy#0) windowspecdefinition(i_category#0, i_brand#0, cc_name#0, d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS none#0], [i_category#0, i_brand#0, cc_name#0], [d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST]
      :     :              +- *Sort [i_category#0 ASC NULLS FIRST, i_brand#0 ASC NULLS FIRST, cc_name#0 ASC NULLS FIRST, d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST], false, 0
      :     :                 +- Exchange hashpartitioning(i_category#0, i_brand#0, cc_name#0, 5)
      :     :                    +- *HashAggregate(keys=[i_category#0, i_brand#0, cc_name#0, d_year#0, d_moy#0], functions=[sum(UnscaledValue(cs_sales_price#0))])
      :     :                       +- Exchange hashpartitioning(i_category#0, i_brand#0, cc_name#0, d_year#0, d_moy#0, 5)
      :     :                          +- *HashAggregate(keys=[i_category#0, i_brand#0, cc_name#0, d_year#0, d_moy#0], functions=[partial_sum(UnscaledValue(cs_sales_price#0))])
      :     :                             +- *Project [i_brand#0, d_year#0, cc_name#0, cs_sales_price#0, d_moy#0, i_category#0]
      :     :                                +- *BroadcastHashJoin [cs_call_center_sk#0], [cc_call_center_sk#0], Inner, BuildRight
      :     :                                   :- *Project [i_brand#0, d_year#0, cs_call_center_sk#0, cs_sales_price#0, d_moy#0, i_category#0]
      :     :                                   :  +- *BroadcastHashJoin [cs_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :     :                                   :     :- *Project [i_brand#0, cs_call_center_sk#0, cs_sales_price#0, cs_sold_date_sk#0, i_category#0]
      :     :                                   :     :  +- *BroadcastHashJoin [i_item_sk#0], [cs_item_sk#0], Inner, BuildRight
      :     :                                   :     :     :- *Project [i_brand#0, i_item_sk#0, i_category#0]
      :     :                                   :     :     :  +- *Filter ((isnotnull(i_item_sk#0) && isnotnull(i_brand#0)) && isnotnull(i_category#0))
      :     :                                   :     :     :     +- *FileScan parquet default.item[i_item_sk#0,i_brand#0,i_category#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_category:string>
      :     :                                   :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)))
      :     :                                   :     :        +- *Project [cs_call_center_sk#0, cs_sales_price#0, cs_sold_date_sk#0, cs_item_sk#0]
      :     :                                   :     :           +- *Filter ((isnotnull(cs_call_center_sk#0) && isnotnull(cs_sold_date_sk#0)) && isnotnull(cs_item_sk#0))
      :     :                                   :     :              +- *FileScan parquet default.catalog_sales[cs_sold_date_sk#0,cs_call_center_sk#0,cs_item_sk#0,cs_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
      :     :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                                   :        +- *Project [d_date_sk#0, d_year#0, d_moy#0]
      :     :                                   :           +- *Filter (isnotnull(d_date_sk#0) && ((((d_moy#0 = 1) && (2000 = d_year#0)) || ((d_moy#0 = 12) && (1998 = d_year#0))) || (1999 = d_year#0)))
      :     :                                   :              +- *FileScan parquet default.date_dim[d_date_sk#0,d_year#0,d_moy#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_moy:int>
      :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                                      +- *Project [cc_name#0, cc_call_center_sk#0]
      :     :                                         +- *Filter (isnotnull(cc_name#0) && isnotnull(cc_call_center_sk#0))
      :     :                                            +- *FileScan parquet default.call_center[cc_call_center_sk#0,cc_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,cc_name:string>
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] + 1)))
      :        +- *Project [cc_name#0, i_category#0, i_brand#0, rn#0, sum_sales#0]
      :           +- *Filter isnotnull(rn#0)
      :              +- Window [rank(d_year#0, d_moy#0) windowspecdefinition(i_category#0, i_brand#0, cc_name#0, d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS none#0], [i_category#0, i_brand#0, cc_name#0], [d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST]
      :                 +- *Sort [i_category#0 ASC NULLS FIRST, i_brand#0 ASC NULLS FIRST, cc_name#0 ASC NULLS FIRST, d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST], false, 0
      :                    +- Exchange hashpartitioning(i_category#0, i_brand#0, cc_name#0, 5)
      :                       +- *HashAggregate(keys=[i_category#0, i_brand#0, cc_name#0, d_year#0, d_moy#0], functions=[sum(UnscaledValue(cs_sales_price#0))])
      :                          +- ReusedExchange [i_category#0, i_brand#0, cc_name#0, d_year#0, d_moy#0, sum#0L], Exchange hashpartitioning(i_category#422, i_brand#418, cc_name#1580, d_year#54, d_moy#56, 5)
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] - 1)))
         +- *Project [cc_name#0, i_category#0, i_brand#0, rn#0, sum_sales#0]
            +- *Filter isnotnull(rn#0)
               +- Window [rank(d_year#0, d_moy#0) windowspecdefinition(i_category#0, i_brand#0, cc_name#0, d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS none#0], [i_category#0, i_brand#0, cc_name#0], [d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST]
                  +- *Sort [i_category#0 ASC NULLS FIRST, i_brand#0 ASC NULLS FIRST, cc_name#0 ASC NULLS FIRST, d_year#0 ASC NULLS FIRST, d_moy#0 ASC NULLS FIRST], false, 0
                     +- ReusedExchange [i_category#0, i_brand#0, cc_name#0, d_year#0, d_moy#0, sum_sales#0], Exchange hashpartitioning(i_category#5574, i_brand#5570, cc_name#5736, 5)
