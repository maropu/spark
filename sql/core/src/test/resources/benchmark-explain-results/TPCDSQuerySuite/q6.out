TakeOrderedAndProject(limit=100, orderBy=[cnt#0L ASC NULLS FIRST], output=[state#0,cnt#0L])
+- *Project [cnt#0L, state#0]
   +- *Filter (count(1)#0L >= 10)
      +- *HashAggregate(keys=[ca_state#0], functions=[count(1)])
         +- Exchange hashpartitioning(ca_state#0, 5)
            +- *HashAggregate(keys=[ca_state#0], functions=[partial_count(1)])
               +- *Project [ca_state#0]
                  +- *BroadcastHashJoin [ss_item_sk#0], [i_item_sk#0], Inner, BuildRight
                     :- *Project [ss_item_sk#0, ca_state#0]
                     :  +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                     :     :- *Project [ss_item_sk#0, ss_sold_date_sk#0, ca_state#0]
                     :     :  +- *BroadcastHashJoin [c_customer_sk#0], [ss_customer_sk#0], Inner, BuildRight
                     :     :     :- *Project [c_customer_sk#0, ca_state#0]
                     :     :     :  +- *BroadcastHashJoin [ca_address_sk#0], [c_current_addr_sk#0], Inner, BuildRight
                     :     :     :     :- *Project [ca_address_sk#0, ca_state#0]
                     :     :     :     :  +- *Filter isnotnull(ca_address_sk#0)
                     :     :     :     :     +- *FileScan parquet default.customer_address[ca_address_sk#0,ca_state#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ca_state:string>
                     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
                     :     :     :        +- *Project [c_current_addr_sk#0, c_customer_sk#0]
                     :     :     :           +- *Filter (isnotnull(c_current_addr_sk#0) && isnotnull(c_customer_sk#0))
                     :     :     :              +- *FileScan parquet default.customer[c_customer_sk#0,c_current_addr_sk#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_current_addr_sk:int>
                     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)))
                     :     :        +- *Project [ss_item_sk#0, ss_sold_date_sk#0, ss_customer_sk#0]
                     :     :           +- *Filter ((isnotnull(ss_sold_date_sk#0) && isnotnull(ss_customer_sk#0)) && isnotnull(ss_item_sk#0))
                     :     :              +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_item_sk#0,ss_customer_sk#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ss_customer_sk:int>
                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                     :        +- *Project [d_date_sk#0]
                     :           +- *Filter ((isnotnull(d_date_sk#0) && (Subquery none = d_month_seq#0)) && isnotnull(d_month_seq#0))
                     :              :  +- Subquery none
                     :              :     +- Subquery none
                     :              :        +- *HashAggregate(keys=[d_month_seq#0], functions=[])
                     :              :           +- Exchange hashpartitioning(d_month_seq#0, 5)
                     :              :              +- *HashAggregate(keys=[d_month_seq#0], functions=[])
                     :              :                 +- *Project [d_month_seq#0]
                     :              :                    +- *Filter ((((d_moy#0 = 1) && isnotnull(d_moy#0)) && isnotnull(d_year#0)) && (2000 = d_year#0))
                     :              :                       +- *FileScan parquet default.date_dim[d_month_seq#0,d_year#0,d_moy#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_moy:int>
                     :              +- *FileScan parquet default.date_dim[d_date_sk#0,d_month_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_month_seq:int>
                     :                    +- Subquery none
                     :                       +- Subquery none
                     :                          +- *HashAggregate(keys=[d_month_seq#0], functions=[])
                     :                             +- Exchange hashpartitioning(d_month_seq#0, 5)
                     :                                +- *HashAggregate(keys=[d_month_seq#0], functions=[])
                     :                                   +- *Project [d_month_seq#0]
                     :                                      +- *Filter ((((d_moy#0 = 1) && isnotnull(d_moy#0)) && isnotnull(d_year#0)) && (2000 = d_year#0))
                     :                                         +- *FileScan parquet default.date_dim[d_month_seq#0,d_year#0,d_moy#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_moy:int>
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                        +- *Project [i_item_sk#0]
                           +- *Filter (cast(i_current_price#0 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#0)), DecimalType(14,7)))
                              +- *BroadcastHashJoin [i_category#0], [i_category#0#0], LeftOuter, BuildRight
                                 :- *Project [i_item_sk#0, i_current_price#0, i_category#0]
                                 :  +- *Filter (isnotnull(i_current_price#0) && isnotnull(i_item_sk#0))
                                 :     +- *FileScan parquet default.item[i_item_sk#0,i_current_price#0,i_category#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_category:string>
                                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]))
                                    +- *HashAggregate(keys=[i_category#0], functions=[avg(UnscaledValue(i_current_price#0))])
                                       +- Exchange hashpartitioning(i_category#0, 5)
                                          +- *HashAggregate(keys=[i_category#0], functions=[partial_avg(UnscaledValue(i_current_price#0))])
                                             +- *FileScan parquet default.item[i_current_price#0,i_category#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_category:string>
