TakeOrderedAndProject(limit=100, orderBy=[item_id#0 ASC NULLS FIRST,ss_item_rev#0 ASC NULLS FIRST], output=[item_id#0,ss_item_rev#0,ss_dev#0,cs_item_rev#0,cs_dev#0,ws_item_rev#0,ws_dev#0,average#0])
+- *Project [CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#0 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#0 as decimal(18,2))) + promote_precision(cast(cs_item_rev#0 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#0 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS none#0, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#0 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#0 as decimal(18,2))) + promote_precision(cast(cs_item_rev#0 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#0 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS none#0, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#0 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#0 as decimal(18,2))) + promote_precision(cast(cs_item_rev#0 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#0 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS none#0, item_id#0, ss_item_rev#0, cs_item_rev#0, ws_item_rev#0, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#0 as decimal(18,2))) + promote_precision(cast(cs_item_rev#0 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#0 as decimal(19,2)))), DecimalType(19,2))) / 3.00), DecimalType(23,6)) AS none#0]
   +- *BroadcastHashJoin [item_id#0], [item_id#0], Inner, BuildRight, ((((((((cast(ss_item_rev#0 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#0)), DecimalType(19,3))) && (cast(ss_item_rev#0 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#0)), DecimalType(20,3)))) && (cast(cs_item_rev#0 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#0)), DecimalType(19,3)))) && (cast(cs_item_rev#0 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#0)), DecimalType(20,3)))) && (cast(ws_item_rev#0 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#0)), DecimalType(19,3)))) && (cast(ws_item_rev#0 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#0)), DecimalType(20,3)))) && (cast(ws_item_rev#0 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#0)), DecimalType(19,3)))) && (cast(ws_item_rev#0 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#0)), DecimalType(20,3))))
      :- *Project [item_id#0, ss_item_rev#0, cs_item_rev#0]
      :  +- *BroadcastHashJoin [item_id#0], [item_id#0], Inner, BuildRight, ((((cast(ss_item_rev#0 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#0)), DecimalType(19,3))) && (cast(ss_item_rev#0 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#0)), DecimalType(20,3)))) && (cast(cs_item_rev#0 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#0)), DecimalType(19,3)))) && (cast(cs_item_rev#0 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#0)), DecimalType(20,3))))
      :     :- *Filter isnotnull(ss_item_rev#0)
      :     :  +- *HashAggregate(keys=[i_item_id#0], functions=[sum(UnscaledValue(ss_ext_sales_price#0))])
      :     :     +- Exchange hashpartitioning(i_item_id#0, 5)
      :     :        +- *HashAggregate(keys=[i_item_id#0], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#0))])
      :     :           +- *Project [i_item_id#0, ss_ext_sales_price#0]
      :     :              +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :     :                 :- *Project [i_item_id#0, ss_sold_date_sk#0, ss_ext_sales_price#0]
      :     :                 :  +- *BroadcastHashJoin [ss_item_sk#0], [i_item_sk#0], Inner, BuildRight
      :     :                 :     :- *Project [ss_item_sk#0, ss_sold_date_sk#0, ss_ext_sales_price#0]
      :     :                 :     :  +- *Filter (isnotnull(ss_item_sk#0) && isnotnull(ss_sold_date_sk#0))
      :     :                 :     :     +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_item_sk#0,ss_ext_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
      :     :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                 :        +- *Project [i_item_sk#0, i_item_id#0]
      :     :                 :           +- *Filter (isnotnull(i_item_sk#0) && isnotnull(i_item_id#0))
      :     :                 :              +- *FileScan parquet default.item[i_item_sk#0,i_item_id#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,i_item_id:string>
      :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                    +- *Project [d_date_sk#0]
      :     :                       +- *BroadcastHashJoin [d_date#0], [d_date#0#0], LeftSemi, BuildRight
      :     :                          :- *Project [d_date_sk#0, d_date#0]
      :     :                          :  +- *Filter isnotnull(d_date_sk#0)
      :     :                          :     +- *FileScan parquet default.date_dim[d_date_sk#0,d_date#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_date:string>
      :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :     :                             +- *Project [d_date#0 AS none#0]
      :     :                                +- *Filter (isnotnull(d_week_seq#0) && (Subquery none = d_week_seq#0))
      :     :                                   :  +- Subquery none
      :     :                                   :     +- Subquery none
      :     :                                   :        +- *Project [d_week_seq#0]
      :     :                                   :           +- *Filter (isnotnull(d_date#0) && (2000-01-03 = d_date#0))
      :     :                                   :              +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
      :     :                                   +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
      :     :                                         +- Subquery none
      :     :                                            +- Subquery none
      :     :                                               +- *Project [d_week_seq#0]
      :     :                                                  +- *Filter (isnotnull(d_date#0) && (2000-01-03 = d_date#0))
      :     :                                                     +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :        +- *Filter isnotnull(cs_item_rev#0)
      :           +- *HashAggregate(keys=[i_item_id#0], functions=[sum(UnscaledValue(cs_ext_sales_price#0))])
      :              +- Exchange hashpartitioning(i_item_id#0, 5)
      :                 +- *HashAggregate(keys=[i_item_id#0], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#0))])
      :                    +- *Project [i_item_id#0, cs_ext_sales_price#0]
      :                       +- *BroadcastHashJoin [cs_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :                          :- *Project [i_item_id#0, cs_ext_sales_price#0, cs_sold_date_sk#0]
      :                          :  +- *BroadcastHashJoin [cs_item_sk#0], [i_item_sk#0], Inner, BuildRight
      :                          :     :- *Project [cs_ext_sales_price#0, cs_sold_date_sk#0, cs_item_sk#0]
      :                          :     :  +- *Filter (isnotnull(cs_sold_date_sk#0) && isnotnull(cs_item_sk#0))
      :                          :     :     +- *FileScan parquet default.catalog_sales[cs_sold_date_sk#0,cs_item_sk#0,cs_ext_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
      :                          :     +- ReusedExchange [i_item_sk#0, i_item_id#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                             +- *Project [d_date_sk#0]
      :                                +- *BroadcastHashJoin [d_date#0], [d_date#0#0], LeftSemi, BuildRight
      :                                   :- *Project [d_date_sk#0, d_date#0]
      :                                   :  +- *Filter isnotnull(d_date_sk#0)
      :                                   :     +- *FileScan parquet default.date_dim[d_date_sk#0,d_date#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_date:string>
      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :                                      +- *Project [d_date#0 AS none#0]
      :                                         +- *Filter (isnotnull(d_week_seq#0) && (Subquery none = d_week_seq#0))
      :                                            :  +- Subquery none
      :                                            :     +- Subquery none
      :                                            :        +- *Project [d_week_seq#0]
      :                                            :           +- *Filter (isnotnull(d_date#0) && (2000-01-03 = d_date#0))
      :                                            :              +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
      :                                            +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
      :                                                  +- Subquery none
      :                                                     +- Subquery none
      :                                                        +- *Project [d_week_seq#0]
      :                                                           +- *Filter (isnotnull(d_date#0) && (2000-01-03 = d_date#0))
      :                                                              +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
         +- *Filter isnotnull(ws_item_rev#0)
            +- *HashAggregate(keys=[i_item_id#0], functions=[sum(UnscaledValue(ws_ext_sales_price#0))])
               +- Exchange hashpartitioning(i_item_id#0, 5)
                  +- *HashAggregate(keys=[i_item_id#0], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#0))])
                     +- *Project [ws_ext_sales_price#0, i_item_id#0]
                        +- *BroadcastHashJoin [ws_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                           :- *Project [ws_sold_date_sk#0, ws_ext_sales_price#0, i_item_id#0]
                           :  +- *BroadcastHashJoin [ws_item_sk#0], [i_item_sk#0], Inner, BuildRight
                           :     :- *Project [ws_item_sk#0, ws_sold_date_sk#0, ws_ext_sales_price#0]
                           :     :  +- *Filter (isnotnull(ws_item_sk#0) && isnotnull(ws_sold_date_sk#0))
                           :     :     +- *FileScan parquet default.web_sales[ws_sold_date_sk#0,ws_item_sk#0,ws_ext_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
                           :     +- ReusedExchange [i_item_sk#0, i_item_id#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              +- *Project [d_date_sk#0]
                                 +- *BroadcastHashJoin [d_date#0], [d_date#0#0], LeftSemi, BuildRight
                                    :- *Project [d_date_sk#0, d_date#0]
                                    :  +- *Filter isnotnull(d_date_sk#0)
                                    :     +- *FileScan parquet default.date_dim[d_date_sk#0,d_date#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_date:string>
                                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
                                       +- *Project [d_date#0 AS none#0]
                                          +- *Filter (isnotnull(d_week_seq#0) && (Subquery none = d_week_seq#0))
                                             :  +- Subquery none
                                             :     +- Subquery none
                                             :        +- *Project [d_week_seq#0]
                                             :           +- *Filter (isnotnull(d_date#0) && (2000-01-03 = d_date#0))
                                             :              +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
                                             +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
                                                   +- Subquery none
                                                      +- Subquery none
                                                         +- *Project [d_week_seq#0]
                                                            +- *Filter (isnotnull(d_date#0) && (2000-01-03 = d_date#0))
                                                               +- *FileScan parquet default.date_dim[d_date#0,d_week_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_week_seq:int>
