TakeOrderedAndProject(limit=100, orderBy=[ratio#0 ASC NULLS FIRST,ss_qty#0L DESC NULLS LAST,ss_wc#0 DESC NULLS LAST,ss_sp#0 DESC NULLS LAST,other_chan_qty#0L ASC NULLS FIRST,other_chan_wholesale_cost#0 ASC NULLS FIRST,other_chan_sales_price#0 ASC NULLS FIRST,round((cast(ss_qty#0L as double) / cast(coalesce((ws_qty#0L + cs_qty#0L), 1) as double)), 2) ASC NULLS FIRST], output=[ratio#0,store_qty#0L,store_wholesale_cost#0,store_sales_price#0,other_chan_qty#0L,other_chan_wholesale_cost#0,other_chan_sales_price#0])
+- *Project [ss_wc#0 AS none#0, ss_wc#0, CheckOverflow((promote_precision(cast(coalesce(ws_sp#0, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#0, 0.00) as decimal(18,2)))), DecimalType(18,2)) AS none#0, ss_sp#0, ws_qty#0L, (coalesce(ws_qty#0L, 0) + coalesce(cs_qty#0L, 0)) AS none#0L, cs_qty#0L, round((cast(ss_qty#0L as double) / cast(coalesce((ws_qty#0L + cs_qty#0L), 1) as double)), 2) AS none#0, CheckOverflow((promote_precision(cast(coalesce(ws_wc#0, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#0, 0.00) as decimal(18,2)))), DecimalType(18,2)) AS none#0, ss_qty#0L, ss_sp#0 AS none#0, ss_qty#0L AS none#0L]
   +- *BroadcastHashJoin [ss_sold_year#0, ss_item_sk#0, ss_customer_sk#0], [cs_sold_year#0, cs_item_sk#0, cs_customer_sk#0], Inner, BuildRight
      :- *Project [ws_wc#0, ss_customer_sk#0, ws_sp#0, ss_qty#0L, ws_qty#0L, ss_wc#0, ss_sold_year#0, ss_sp#0, ss_item_sk#0]
      :  +- *BroadcastHashJoin [ss_sold_year#0, ss_item_sk#0, ss_customer_sk#0], [ws_sold_year#0, ws_item_sk#0, ws_customer_sk#0], Inner, BuildRight
      :     :- *HashAggregate(keys=[d_year#0, ss_item_sk#0, ss_customer_sk#0], functions=[sum(cast(ss_quantity#0 as bigint)), sum(UnscaledValue(ss_wholesale_cost#0)), sum(UnscaledValue(ss_sales_price#0))])
      :     :  +- Exchange hashpartitioning(d_year#0, ss_item_sk#0, ss_customer_sk#0, 5)
      :     :     +- *HashAggregate(keys=[d_year#0, ss_item_sk#0, ss_customer_sk#0], functions=[partial_sum(cast(ss_quantity#0 as bigint)), partial_sum(UnscaledValue(ss_wholesale_cost#0)), partial_sum(UnscaledValue(ss_sales_price#0))])
      :     :        +- *Project [ss_sales_price#0, ss_quantity#0, d_year#0, ss_item_sk#0, ss_wholesale_cost#0, ss_customer_sk#0]
      :     :           +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :     :              :- *Project [ss_sales_price#0, ss_quantity#0, ss_item_sk#0, ss_sold_date_sk#0, ss_wholesale_cost#0, ss_customer_sk#0]
      :     :              :  +- *Filter isnull(sr_ticket_number#0L)
      :     :              :     +- *BroadcastHashJoin [cast(ss_ticket_number#0 as bigint), cast(ss_item_sk#0 as bigint)], [sr_ticket_number#0L, sr_item_sk#0L], LeftOuter, BuildRight
      :     :              :        :- *Project [ss_sales_price#0, ss_quantity#0, ss_item_sk#0, ss_ticket_number#0, ss_sold_date_sk#0, ss_wholesale_cost#0, ss_customer_sk#0]
      :     :              :        :  +- *Filter ((isnotnull(ss_item_sk#0) && isnotnull(ss_customer_sk#0)) && isnotnull(ss_sold_date_sk#0))
      :     :              :        :     +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_item_sk#0,ss_customer_sk#0,ss_ticket_number#0,ss_quantity#0,ss_wholesale_cost#0,ss_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ss_quantity:int...
      :     :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
      :     :              :           +- *FileScan parquet default.store_returns[sr_item_sk#0L,sr_ticket_number#0L] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,sr_ticket_number:bigint>
      :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                 +- *Project [d_date_sk#0, d_year#0]
      :     :                    +- *Filter ((isnotnull(d_date_sk#0) && isnotnull(d_year#0)) && (2000 = d_year#0))
      :     :                       +- *FileScan parquet default.date_dim[d_date_sk#0,d_year#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_year:int>
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]))
      :        +- *Filter (coalesce(ws_qty#0L, 0) > 0)
      :           +- *HashAggregate(keys=[d_year#0, ws_item_sk#0, ws_bill_customer_sk#0], functions=[sum(cast(ws_quantity#0 as bigint)), sum(UnscaledValue(ws_wholesale_cost#0)), sum(UnscaledValue(ws_sales_price#0))])
      :              +- Exchange hashpartitioning(d_year#0, ws_item_sk#0, ws_bill_customer_sk#0, 5)
      :                 +- *HashAggregate(keys=[d_year#0, ws_item_sk#0, ws_bill_customer_sk#0], functions=[partial_sum(cast(ws_quantity#0 as bigint)), partial_sum(UnscaledValue(ws_wholesale_cost#0)), partial_sum(UnscaledValue(ws_sales_price#0))])
      :                    +- *Project [d_year#0, ws_bill_customer_sk#0, ws_wholesale_cost#0, ws_item_sk#0, ws_quantity#0, ws_sales_price#0]
      :                       +- *BroadcastHashJoin [ws_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :                          :- *Project [ws_bill_customer_sk#0, ws_wholesale_cost#0, ws_item_sk#0, ws_sold_date_sk#0, ws_quantity#0, ws_sales_price#0]
      :                          :  +- *Filter isnull(wr_order_number#0L)
      :                          :     +- *BroadcastHashJoin [cast(ws_order_number#0 as bigint), cast(ws_item_sk#0 as bigint)], [wr_order_number#0L, wr_item_sk#0L], LeftOuter, BuildRight
      :                          :        :- *Project [ws_order_number#0, ws_bill_customer_sk#0, ws_wholesale_cost#0, ws_item_sk#0, ws_sold_date_sk#0, ws_quantity#0, ws_sales_price#0]
      :                          :        :  +- *Filter ((isnotnull(ws_item_sk#0) && isnotnull(ws_sold_date_sk#0)) && isnotnull(ws_bill_customer_sk#0))
      :                          :        :     +- *FileScan parquet default.web_sales[ws_sold_date_sk#0,ws_item_sk#0,ws_bill_customer_sk#0,ws_order_number#0,ws_quantity#0,ws_wholesale_cost#0,ws_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ws_quantity...
      :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
      :                          :           +- *FileScan parquet default.web_returns[wr_item_sk#0L,wr_order_number#0L] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,wr_order_number:bigint>
      :                          +- ReusedExchange [d_date_sk#0, d_year#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]))
         +- *Filter (coalesce(cs_qty#0L, 0) > 0)
            +- *HashAggregate(keys=[d_year#0, cs_item_sk#0, cs_bill_customer_sk#0], functions=[sum(cast(cs_quantity#0 as bigint)), sum(UnscaledValue(cs_wholesale_cost#0)), sum(UnscaledValue(cs_sales_price#0))])
               +- Exchange hashpartitioning(d_year#0, cs_item_sk#0, cs_bill_customer_sk#0, 5)
                  +- *HashAggregate(keys=[d_year#0, cs_item_sk#0, cs_bill_customer_sk#0], functions=[partial_sum(cast(cs_quantity#0 as bigint)), partial_sum(UnscaledValue(cs_wholesale_cost#0)), partial_sum(UnscaledValue(cs_sales_price#0))])
                     +- *Project [d_year#0, cs_quantity#0, cs_sales_price#0, cs_bill_customer_sk#0, cs_wholesale_cost#0, cs_item_sk#0]
                        +- *BroadcastHashJoin [cs_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                           :- *Project [cs_quantity#0, cs_sales_price#0, cs_bill_customer_sk#0, cs_sold_date_sk#0, cs_wholesale_cost#0, cs_item_sk#0]
                           :  +- *Filter isnull(cr_order_number#0)
                           :     +- *BroadcastHashJoin [cs_order_number#0, cs_item_sk#0], [cr_order_number#0, cr_item_sk#0], LeftOuter, BuildRight
                           :        :- *Project [cs_quantity#0, cs_sales_price#0, cs_order_number#0, cs_bill_customer_sk#0, cs_sold_date_sk#0, cs_wholesale_cost#0, cs_item_sk#0]
                           :        :  +- *Filter ((isnotnull(cs_sold_date_sk#0) && isnotnull(cs_bill_customer_sk#0)) && isnotnull(cs_item_sk#0))
                           :        :     +- *FileScan parquet default.catalog_sales[cs_sold_date_sk#0,cs_bill_customer_sk#0,cs_item_sk#0,cs_order_number#0,cs_quantity#0,cs_wholesale_cost#0,cs_sales_price#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,cs_quantity...
                           :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))))
                           :           +- *FileScan parquet default.catalog_returns[cr_item_sk#0,cr_order_number#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,cr_order_number:int>
                           +- ReusedExchange [d_date_sk#0, d_year#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
