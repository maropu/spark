TakeOrderedAndProject(limit=100, orderBy=[customer_id#0 ASC NULLS FIRST,customer_id#0 ASC NULLS FIRST,customer_id#0 ASC NULLS FIRST], output=[customer_id#0,customer_first_name#0,customer_last_name#0])
+- *Project [customer_last_name#0, customer_id#0, customer_first_name#0]
   +- *BroadcastHashJoin [customer_id#0], [customer_id#0], Inner, BuildRight, (CASE WHEN (year_total#0 > 0.00) THEN CheckOverflow((promote_precision(year_total#0) / promote_precision(year_total#0)), DecimalType(37,20)) ELSE null END > CASE WHEN (year_total#0 > 0.00) THEN CheckOverflow((promote_precision(year_total#0) / promote_precision(year_total#0)), DecimalType(37,20)) ELSE null END)
      :- *Project [customer_last_name#0, customer_id#0, customer_id#0, customer_first_name#0, year_total#0, year_total#0, year_total#0]
      :  +- *BroadcastHashJoin [customer_id#0], [customer_id#0], Inner, BuildRight
      :     :- *BroadcastHashJoin [customer_id#0], [customer_id#0], Inner, BuildRight
      :     :  :- Union
      :     :  :  :- *Filter ((year_total#0 > 0.00) && isnotnull(year_total#0))
      :     :  :  :  +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[sum(UnscaledValue(ss_net_paid#0))])
      :     :  :  :     +- Exchange hashpartitioning(c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0, 5)
      :     :  :  :        +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[partial_sum(UnscaledValue(ss_net_paid#0))])
      :     :  :  :           +- *Project [ss_net_paid#0, d_year#0, c_first_name#0, c_last_name#0, c_customer_id#0]
      :     :  :  :              +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :     :  :  :                 :- *Project [ss_net_paid#0, c_first_name#0, c_last_name#0, ss_sold_date_sk#0, c_customer_id#0]
      :     :  :  :                 :  +- *BroadcastHashJoin [c_customer_sk#0], [ss_customer_sk#0], Inner, BuildRight
      :     :  :  :                 :     :- *Project [c_first_name#0, c_last_name#0, c_customer_sk#0, c_customer_id#0]
      :     :  :  :                 :     :  +- *Filter (isnotnull(c_customer_id#0) && isnotnull(c_customer_sk#0))
      :     :  :  :                 :     :     +- *FileScan parquet default.customer[c_customer_sk#0,c_customer_id#0,c_first_name#0,c_last_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_last_name:string>
      :     :  :  :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :  :  :                 :        +- *Project [ss_net_paid#0, ss_sold_date_sk#0, ss_customer_sk#0]
      :     :  :  :                 :           +- *Filter (isnotnull(ss_customer_sk#0) && isnotnull(ss_sold_date_sk#0))
      :     :  :  :                 :              +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_customer_sk#0,ss_net_paid#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
      :     :  :  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :  :  :                    +- *Project [d_date_sk#0, d_year#0]
      :     :  :  :                       +- *Filter (((isnotnull(d_date_sk#0) && (2001 = d_year#0)) && isnotnull(d_year#0)) && d_year#0 IN (2001,2002))
      :     :  :  :                          +- *FileScan parquet default.date_dim[d_date_sk#0,d_year#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_year:int>
      :     :  :  +- LocalTableScan <empty>, [customer_id#0, year_total#0]
      :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :     :     +- Union
      :     :        :- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[sum(UnscaledValue(ss_net_paid#0))])
      :     :        :  +- Exchange hashpartitioning(c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0, 5)
      :     :        :     +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[partial_sum(UnscaledValue(ss_net_paid#0))])
      :     :        :        +- *Project [ss_net_paid#0, d_year#0, c_first_name#0, c_last_name#0, c_customer_id#0]
      :     :        :           +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :     :        :              :- *Project [ss_net_paid#0, c_first_name#0, c_last_name#0, ss_sold_date_sk#0, c_customer_id#0]
      :     :        :              :  +- *BroadcastHashJoin [c_customer_sk#0], [ss_customer_sk#0], Inner, BuildRight
      :     :        :              :     :- *Project [c_first_name#0, c_last_name#0, c_customer_sk#0, c_customer_id#0]
      :     :        :              :     :  +- *Filter (isnotnull(c_customer_id#0) && isnotnull(c_customer_sk#0))
      :     :        :              :     :     +- *FileScan parquet default.customer[c_customer_sk#0,c_customer_id#0,c_first_name#0,c_last_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_last_name:string>
      :     :        :              :     +- ReusedExchange [ss_sold_date_sk#0, ss_customer_sk#0, ss_net_paid#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :        :                 +- *Project [d_date_sk#0, d_year#0]
      :     :        :                    +- *Filter (((isnotnull(d_date_sk#0) && isnotnull(d_year#0)) && d_year#0 IN (2001,2002)) && (2002 = d_year#0))
      :     :        :                       +- *FileScan parquet default.date_dim[d_date_sk#0,d_year#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_year:int>
      :     :        +- LocalTableScan <empty>, [customer_id#0, customer_first_name#0, customer_last_name#0, year_total#0]
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :        +- Union
      :           :- LocalTableScan <empty>, [customer_id#0, year_total#0]
      :           +- *Filter ((year_total#0 > 0.00) && isnotnull(year_total#0))
      :              +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[sum(UnscaledValue(ws_net_paid#0))])
      :                 +- Exchange hashpartitioning(c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0, 5)
      :                    +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[partial_sum(UnscaledValue(ws_net_paid#0))])
      :                       +- *Project [d_year#0, c_first_name#0, c_last_name#0, ws_net_paid#0, c_customer_id#0]
      :                          +- *BroadcastHashJoin [ws_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
      :                             :- *Project [c_first_name#0, ws_sold_date_sk#0, c_last_name#0, ws_net_paid#0, c_customer_id#0]
      :                             :  +- *BroadcastHashJoin [c_customer_sk#0], [ws_bill_customer_sk#0], Inner, BuildRight
      :                             :     :- *Project [c_first_name#0, c_last_name#0, c_customer_sk#0, c_customer_id#0]
      :                             :     :  +- *Filter (isnotnull(c_customer_id#0) && isnotnull(c_customer_sk#0))
      :                             :     :     +- *FileScan parquet default.customer[c_customer_sk#0,c_customer_id#0,c_first_name#0,c_last_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_last_name:string>
      :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :                             :        +- *Project [ws_bill_customer_sk#0, ws_sold_date_sk#0, ws_net_paid#0]
      :                             :           +- *Filter (isnotnull(ws_sold_date_sk#0) && isnotnull(ws_bill_customer_sk#0))
      :                             :              +- *FileScan parquet default.web_sales[ws_sold_date_sk#0,ws_bill_customer_sk#0,ws_net_paid#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,2)>
      :                             +- ReusedExchange [d_date_sk#0, d_year#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
         +- Union
            :- LocalTableScan <empty>, [customer_id#0, year_total#0]
            +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[sum(UnscaledValue(ws_net_paid#0))])
               +- Exchange hashpartitioning(c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0, 5)
                  +- *HashAggregate(keys=[c_customer_id#0, c_first_name#0, c_last_name#0, d_year#0], functions=[partial_sum(UnscaledValue(ws_net_paid#0))])
                     +- *Project [d_year#0, c_first_name#0, c_last_name#0, ws_net_paid#0, c_customer_id#0]
                        +- *BroadcastHashJoin [ws_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                           :- *Project [c_first_name#0, ws_sold_date_sk#0, c_last_name#0, ws_net_paid#0, c_customer_id#0]
                           :  +- *BroadcastHashJoin [c_customer_sk#0], [ws_bill_customer_sk#0], Inner, BuildRight
                           :     :- *Project [c_first_name#0, c_last_name#0, c_customer_sk#0, c_customer_id#0]
                           :     :  +- *Filter (isnotnull(c_customer_id#0) && isnotnull(c_customer_sk#0))
                           :     :     +- *FileScan parquet default.customer[c_customer_sk#0,c_customer_id#0,c_first_name#0,c_last_name#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,c_last_name:string>
                           :     +- ReusedExchange [ws_sold_date_sk#0, ws_bill_customer_sk#0, ws_net_paid#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
                           +- ReusedExchange [d_date_sk#0, d_year#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
