CollectLimit 100
+- *LocalLimit 100
   +- *HashAggregate(keys=[], functions=[sum(cast(CASE WHEN (isnotnull(customer_sk#0) && isnull(customer_sk#0)) THEN 1 ELSE 0 END as bigint)), sum(cast(CASE WHEN (isnull(customer_sk#0) && isnotnull(customer_sk#0)) THEN 1 ELSE 0 END as bigint)), sum(cast(CASE WHEN (isnotnull(customer_sk#0) && isnotnull(customer_sk#0)) THEN 1 ELSE 0 END as bigint))])
      +- Exchange SinglePartition
         +- *HashAggregate(keys=[], functions=[partial_sum(cast(CASE WHEN (isnotnull(customer_sk#0) && isnull(customer_sk#0)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnull(customer_sk#0) && isnotnull(customer_sk#0)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnotnull(customer_sk#0) && isnotnull(customer_sk#0)) THEN 1 ELSE 0 END as bigint))])
            +- *Project [customer_sk#0, customer_sk#0]
               +- SortMergeJoin [customer_sk#0, item_sk#0], [customer_sk#0, item_sk#0], FullOuter
                  :- *Sort [customer_sk#0 ASC NULLS FIRST, item_sk#0 ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(customer_sk#0, item_sk#0, 5)
                  :     +- *HashAggregate(keys=[ss_customer_sk#0, ss_item_sk#0], functions=[])
                  :        +- Exchange hashpartitioning(ss_customer_sk#0, ss_item_sk#0, 5)
                  :           +- *HashAggregate(keys=[ss_customer_sk#0, ss_item_sk#0], functions=[])
                  :              +- *Project [ss_item_sk#0, ss_customer_sk#0]
                  :                 +- *BroadcastHashJoin [ss_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                  :                    :- *Project [ss_item_sk#0, ss_sold_date_sk#0, ss_customer_sk#0]
                  :                    :  +- *Filter isnotnull(ss_sold_date_sk#0)
                  :                    :     +- *FileScan parquet default.store_sales[ss_sold_date_sk#0,ss_item_sk#0,ss_customer_sk#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,ss_customer_sk:int>
                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                  :                       +- *Project [d_date_sk#0]
                  :                          +- *Filter (((isnotnull(d_date_sk#0) && (1211 >= d_month_seq#0)) && isnotnull(d_month_seq#0)) && (1200 <= d_month_seq#0))
                  :                             +- *FileScan parquet default.date_dim[d_date_sk#0,d_month_seq#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,d_month_seq:int>
                  +- *Sort [customer_sk#0 ASC NULLS FIRST, item_sk#0 ASC NULLS FIRST], false, 0
                     +- Exchange hashpartitioning(customer_sk#0, item_sk#0, 5)
                        +- *HashAggregate(keys=[cs_bill_customer_sk#0, cs_item_sk#0], functions=[])
                           +- Exchange hashpartitioning(cs_bill_customer_sk#0, cs_item_sk#0, 5)
                              +- *HashAggregate(keys=[cs_bill_customer_sk#0, cs_item_sk#0], functions=[])
                                 +- *Project [cs_bill_customer_sk#0, cs_item_sk#0]
                                    +- *BroadcastHashJoin [cs_sold_date_sk#0], [d_date_sk#0], Inner, BuildRight
                                       :- *Project [cs_bill_customer_sk#0, cs_sold_date_sk#0, cs_item_sk#0]
                                       :  +- *Filter isnotnull(cs_sold_date_sk#0)
                                       :     +- *FileScan parquet default.catalog_sales[cs_sold_date_sk#0,cs_bill_customer_sk#0,cs_item_sk#0] Batched: true, Format: Parquet, Location: InMemoryFileIndex[<PATH>,cs_item_sk:int>
                                       +- ReusedExchange [d_date_sk#0], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
