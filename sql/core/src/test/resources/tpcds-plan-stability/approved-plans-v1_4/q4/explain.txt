== Physical Plan ==
TakeOrderedAndProject (108)
+- * Project (107)
   +- * BroadcastHashJoin Inner BuildRight (106)
      :- * Project (92)
      :  +- * BroadcastHashJoin Inner BuildRight (91)
      :     :- * Project (72)
      :     :  +- * BroadcastHashJoin Inner BuildRight (71)
      :     :     :- * Project (57)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (56)
      :     :     :     :- * BroadcastHashJoin Inner BuildRight (37)
      :     :     :     :  :- * Project (20)
      :     :     :     :  :  +- * Filter (19)
      :     :     :     :  :     +- * HashAggregate (18)
      :     :     :     :  :        +- Exchange (17)
      :     :     :     :  :           +- * HashAggregate (16)
      :     :     :     :  :              +- * Project (15)
      :     :     :     :  :                 +- * BroadcastHashJoin Inner BuildRight (14)
      :     :     :     :  :                    :- * Project (9)
      :     :     :     :  :                    :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :  :                    :     :- * Filter (3)
      :     :     :     :  :                    :     :  +- * ColumnarToRow (2)
      :     :     :     :  :                    :     :     +- Scan parquet default.customer (1)
      :     :     :     :  :                    :     +- BroadcastExchange (7)
      :     :     :     :  :                    :        +- * Filter (6)
      :     :     :     :  :                    :           +- * ColumnarToRow (5)
      :     :     :     :  :                    :              +- Scan parquet default.store_sales (4)
      :     :     :     :  :                    +- BroadcastExchange (13)
      :     :     :     :  :                       +- * Filter (12)
      :     :     :     :  :                          +- * ColumnarToRow (11)
      :     :     :     :  :                             +- Scan parquet default.date_dim (10)
      :     :     :     :  +- BroadcastExchange (36)
      :     :     :     :     +- * HashAggregate (35)
      :     :     :     :        +- Exchange (34)
      :     :     :     :           +- * HashAggregate (33)
      :     :     :     :              +- * Project (32)
      :     :     :     :                 +- * BroadcastHashJoin Inner BuildRight (31)
      :     :     :     :                    :- * Project (26)
      :     :     :     :                    :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :     :     :                    :     :- * Filter (23)
      :     :     :     :                    :     :  +- * ColumnarToRow (22)
      :     :     :     :                    :     :     +- Scan parquet default.customer (21)
      :     :     :     :                    :     +- ReusedExchange (24)
      :     :     :     :                    +- BroadcastExchange (30)
      :     :     :     :                       +- * Filter (29)
      :     :     :     :                          +- * ColumnarToRow (28)
      :     :     :     :                             +- Scan parquet default.date_dim (27)
      :     :     :     +- BroadcastExchange (55)
      :     :     :        +- * Project (54)
      :     :     :           +- * Filter (53)
      :     :     :              +- * HashAggregate (52)
      :     :     :                 +- Exchange (51)
      :     :     :                    +- * HashAggregate (50)
      :     :     :                       +- * Project (49)
      :     :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
      :     :     :                             :- * Project (46)
      :     :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
      :     :     :                             :     :- * Filter (40)
      :     :     :                             :     :  +- * ColumnarToRow (39)
      :     :     :                             :     :     +- Scan parquet default.customer (38)
      :     :     :                             :     +- BroadcastExchange (44)
      :     :     :                             :        +- * Filter (43)
      :     :     :                             :           +- * ColumnarToRow (42)
      :     :     :                             :              +- Scan parquet default.catalog_sales (41)
      :     :     :                             +- ReusedExchange (47)
      :     :     +- BroadcastExchange (70)
      :     :        +- * HashAggregate (69)
      :     :           +- Exchange (68)
      :     :              +- * HashAggregate (67)
      :     :                 +- * Project (66)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (65)
      :     :                       :- * Project (63)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (62)
      :     :                       :     :- * Filter (60)
      :     :                       :     :  +- * ColumnarToRow (59)
      :     :                       :     :     +- Scan parquet default.customer (58)
      :     :                       :     +- ReusedExchange (61)
      :     :                       +- ReusedExchange (64)
      :     +- BroadcastExchange (90)
      :        +- * Project (89)
      :           +- * Filter (88)
      :              +- * HashAggregate (87)
      :                 +- Exchange (86)
      :                    +- * HashAggregate (85)
      :                       +- * Project (84)
      :                          +- * BroadcastHashJoin Inner BuildRight (83)
      :                             :- * Project (81)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (80)
      :                             :     :- * Filter (75)
      :                             :     :  +- * ColumnarToRow (74)
      :                             :     :     +- Scan parquet default.customer (73)
      :                             :     +- BroadcastExchange (79)
      :                             :        +- * Filter (78)
      :                             :           +- * ColumnarToRow (77)
      :                             :              +- Scan parquet default.web_sales (76)
      :                             +- ReusedExchange (82)
      +- BroadcastExchange (105)
         +- * HashAggregate (104)
            +- Exchange (103)
               +- * HashAggregate (102)
                  +- * Project (101)
                     +- * BroadcastHashJoin Inner BuildRight (100)
                        :- * Project (98)
                        :  +- * BroadcastHashJoin Inner BuildRight (97)
                        :     :- * Filter (95)
                        :     :  +- * ColumnarToRow (94)
                        :     :     +- Scan parquet default.customer (93)
                        :     +- ReusedExchange (96)
                        +- ReusedExchange (99)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]

(6) Filter [codegen id : 1]
Input [6]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]
Condition : (isnotnull(ss_customer_sk#10) AND isnotnull(ss_sold_date_sk#9))

(7) BroadcastExchange
Input [6]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#15]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: None

(9) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#16, d_year#17]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2001)) AND isnotnull(d_date_sk#16))

(13) BroadcastExchange
Input [2]: [d_date_sk#16, d_year#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#16]
Join condition: None

(15) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14, d_date_sk#16, d_year#17]

(16) HashAggregate [codegen id : 3]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#19, isEmpty#20]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#21, isEmpty#22]

(17) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#21, isEmpty#22]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), true, [id=#23]

(18) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#21, isEmpty#22]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#24]
Results [2]: [c_customer_id#2 AS customer_id#25, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#24 AS year_total#26]

(19) Filter [codegen id : 24]
Input [2]: [customer_id#25, year_total#26]
Condition : (isnotnull(year_total#26) AND (year_total#26 > 0.000000))

(20) Project [codegen id : 24]
Output [2]: [customer_id#25 AS customer_id#27, year_total#26 AS year_total#28]
Input [2]: [customer_id#25, year_total#26]

(21) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(22) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(23) Filter [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(24) ReusedExchange [Reuses operator id: 7]
Output [6]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: None

(26) Project [codegen id : 6]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14]

(27) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(28) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#16, d_year#17]

(29) Filter [codegen id : 5]
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2002)) AND isnotnull(d_date_sk#16))

(30) BroadcastExchange
Input [2]: [d_date_sk#16, d_year#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#16]
Join condition: None

(32) Project [codegen id : 6]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14, d_date_sk#16, d_year#17]

(33) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_sales_price#12, ss_ext_wholesale_cost#13, ss_ext_list_price#14, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#32, isEmpty#33]

(34) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), true, [id=#34]

(35) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#32, isEmpty#33]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#35]
Results [8]: [c_customer_id#2 AS customer_id#36, c_first_name#3 AS customer_first_name#37, c_last_name#4 AS customer_last_name#38, c_preferred_cust_flag#5 AS customer_preferred_cust_flag#39, c_birth_country#6 AS customer_birth_country#40, c_login#7 AS customer_login#41, c_email_address#8 AS customer_email_address#42, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#14 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#13 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#35 AS year_total#43]

(36) BroadcastExchange
Input [8]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#44]

(37) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#36]
Join condition: None

(38) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(39) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(40) Filter [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(41) Scan parquet default.catalog_sales
Output [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(42) ColumnarToRow [codegen id : 8]
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(43) Filter [codegen id : 8]
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Condition : (isnotnull(cs_bill_customer_sk#46) AND isnotnull(cs_sold_date_sk#45))

(44) BroadcastExchange
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#51]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#46]
Join condition: None

(46) Project [codegen id : 10]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(47) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#16, d_year#17]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#45]
Right keys [1]: [d_date_sk#16]
Join condition: None

(49) Project [codegen id : 10]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_date_sk#16, d_year#17]

(50) HashAggregate [codegen id : 10]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#52, isEmpty#53]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#54, isEmpty#55]

(51) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#54, isEmpty#55]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), true, [id=#56]

(52) HashAggregate [codegen id : 11]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#54, isEmpty#55]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#57]
Results [2]: [c_customer_id#2 AS customer_id#58, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#57 AS year_total#59]

(53) Filter [codegen id : 11]
Input [2]: [customer_id#58, year_total#59]
Condition : (isnotnull(year_total#59) AND (year_total#59 > 0.000000))

(54) Project [codegen id : 11]
Output [2]: [customer_id#58 AS customer_id#60, year_total#59 AS year_total#61]
Input [2]: [customer_id#58, year_total#59]

(55) BroadcastExchange
Input [2]: [customer_id#60, year_total#61]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#62]

(56) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#60]
Join condition: None

(57) Project [codegen id : 24]
Output [11]: [customer_id#27, year_total#28, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43, year_total#61]
Input [12]: [customer_id#27, year_total#28, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43, customer_id#60, year_total#61]

(58) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(59) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(60) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(61) ReusedExchange [Reuses operator id: 44]
Output [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(62) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#46]
Join condition: None

(63) Project [codegen id : 14]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(64) ReusedExchange [Reuses operator id: 30]
Output [2]: [d_date_sk#16, d_year#17]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#45]
Right keys [1]: [d_date_sk#16]
Join condition: None

(66) Project [codegen id : 14]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_date_sk#16, d_year#17]

(67) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#65, isEmpty#66]

(68) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#65, isEmpty#66]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), true, [id=#67]

(69) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#65, isEmpty#66]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#68]
Results [2]: [c_customer_id#2 AS customer_id#69, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#68 AS year_total#70]

(70) BroadcastExchange
Input [2]: [customer_id#69, year_total#70]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#71]

(71) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#69]
Join condition: (CASE WHEN (year_total#61 > 0.000000) THEN CheckOverflow((promote_precision(year_total#70) / promote_precision(year_total#61)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#28 > 0.000000) THEN CheckOverflow((promote_precision(year_total#43) / promote_precision(year_total#28)), DecimalType(38,14), true) ELSE null END)

(72) Project [codegen id : 24]
Output [10]: [customer_id#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70]
Input [13]: [customer_id#27, year_total#28, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43, year_total#61, customer_id#69, year_total#70]

(73) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(74) ColumnarToRow [codegen id : 18]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(75) Filter [codegen id : 18]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(76) Scan parquet default.web_sales
Output [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(77) ColumnarToRow [codegen id : 16]
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(78) Filter [codegen id : 16]
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Condition : (isnotnull(ws_bill_customer_sk#73) AND isnotnull(ws_sold_date_sk#72))

(79) BroadcastExchange
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#78]

(80) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#73]
Join condition: None

(81) Project [codegen id : 18]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(82) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#16, d_year#17]

(83) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#72]
Right keys [1]: [d_date_sk#16]
Join condition: None

(84) Project [codegen id : 18]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_date_sk#16, d_year#17]

(85) HashAggregate [codegen id : 18]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#79, isEmpty#80]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#81, isEmpty#82]

(86) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#81, isEmpty#82]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), true, [id=#83]

(87) HashAggregate [codegen id : 19]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#81, isEmpty#82]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#84]
Results [2]: [c_customer_id#2 AS customer_id#85, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#84 AS year_total#86]

(88) Filter [codegen id : 19]
Input [2]: [customer_id#85, year_total#86]
Condition : (isnotnull(year_total#86) AND (year_total#86 > 0.000000))

(89) Project [codegen id : 19]
Output [2]: [customer_id#85 AS customer_id#87, year_total#86 AS year_total#88]
Input [2]: [customer_id#85, year_total#86]

(90) BroadcastExchange
Input [2]: [customer_id#87, year_total#88]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#89]

(91) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#87]
Join condition: None

(92) Project [codegen id : 24]
Output [11]: [customer_id#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70, year_total#88]
Input [12]: [customer_id#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70, customer_id#87, year_total#88]

(93) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(94) ColumnarToRow [codegen id : 22]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(95) Filter [codegen id : 22]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(96) ReusedExchange [Reuses operator id: 79]
Output [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(97) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#73]
Join condition: None

(98) Project [codegen id : 22]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(99) ReusedExchange [Reuses operator id: 30]
Output [2]: [d_date_sk#16, d_year#17]

(100) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#72]
Right keys [1]: [d_date_sk#16]
Join condition: None

(101) Project [codegen id : 22]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_date_sk#16, d_year#17]

(102) HashAggregate [codegen id : 22]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#90, isEmpty#91]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#92, isEmpty#93]

(103) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#92, isEmpty#93]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), true, [id=#94]

(104) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#92, isEmpty#93]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#95]
Results [2]: [c_customer_id#2 AS customer_id#96, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#95 AS year_total#97]

(105) BroadcastExchange
Input [2]: [customer_id#96, year_total#97]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#98]

(106) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#96]
Join condition: (CASE WHEN (year_total#61 > 0.000000) THEN CheckOverflow((promote_precision(year_total#70) / promote_precision(year_total#61)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#88 > 0.000000) THEN CheckOverflow((promote_precision(year_total#97) / promote_precision(year_total#88)), DecimalType(38,14), true) ELSE null END)

(107) Project [codegen id : 24]
Output [7]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42]
Input [13]: [customer_id#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70, year_total#88, customer_id#96, year_total#97]

(108) TakeOrderedAndProject
Input [7]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42]
Arguments: 100, [customer_id#36 ASC NULLS FIRST, customer_first_name#37 ASC NULLS FIRST, customer_last_name#38 ASC NULLS FIRST, customer_preferred_cust_flag#39 ASC NULLS FIRST, customer_birth_country#40 ASC NULLS FIRST, customer_login#41 ASC NULLS FIRST, customer_email_address#42 ASC NULLS FIRST], [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42]

