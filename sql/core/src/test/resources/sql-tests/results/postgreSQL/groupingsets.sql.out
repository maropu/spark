-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 54


-- !query 0
create temp view gstest1(a,b,v)
  as values (1,1,10),(1,1,11),(1,2,12),(1,2,13),(1,3,14),
            (2,3,15),
            (3,3,16),(3,4,17),
            (4,1,18),(4,1,19)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
create table gstest2 (a integer, b integer, c integer, d integer,
                      e integer, f integer, g integer, h integer) using parquet
-- !query 1 schema
struct<>
-- !query 1 output



-- !query 2
insert into gstest2 values
  (1, 1, 1, 1, 1, 1, 1, 1),
  (1, 1, 1, 1, 1, 1, 1, 2),
  (1, 1, 1, 1, 1, 1, 2, 2),
  (1, 1, 1, 1, 1, 2, 2, 2),
  (1, 1, 1, 1, 2, 2, 2, 2),
  (1, 1, 1, 2, 2, 2, 2, 2),
  (1, 1, 2, 2, 2, 2, 2, 2),
  (1, 2, 2, 2, 2, 2, 2, 2),
  (2, 2, 2, 2, 2, 2, 2, 2)
-- !query 2 schema
struct<>
-- !query 2 output



-- !query 3
create table gstest3 (a integer, b integer, c integer, d integer) using parquet
-- !query 3 schema
struct<>
-- !query 3 output



-- !query 4
insert into gstest3 values
  (1, 1, 1, 1),
  (2, 2, 2, 2)
-- !query 4 schema
struct<>
-- !query 4 output



-- !query 5
create table gstest4(id integer, v integer,
                     unhashable_col /* bit(4) */ byte, unsortable_col /* xid */ integer) using parquet
-- !query 5 schema
struct<>
-- !query 5 output



-- !query 6
insert into gstest4
values (1,1,tinyint('0'),1), (2,2,tinyint('1'),1),
       (3,4,tinyint('2'),2), (4,8,tinyint('3'),2),
       (5,16,tinyint('0'),2), (6,32,tinyint('1'),2),
       (7,64,tinyint('2'),1), (8,128,tinyint('3'),1)
-- !query 6 schema
struct<>
-- !query 6 output



-- !query 7
create table gstest_empty (a integer, b integer, v integer) using parquet
-- !query 7 schema
struct<>
-- !query 7 output



-- !query 8
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b)
-- !query 8 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 8 output
1	1	0	0	21	2	11
1	2	0	0	25	2	13
1	3	0	0	14	1	14
1	NULL	0	1	60	5	14
2	3	0	0	15	1	15
2	NULL	0	1	15	1	15
3	3	0	0	16	1	16
3	4	0	0	17	1	17
3	NULL	0	1	33	2	17
4	1	0	0	37	2	19
4	NULL	0	1	37	2	19
NULL	NULL	1	1	145	10	19


-- !query 9
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b) order by a,b
-- !query 9 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 9 output
NULL	NULL	1	1	145	10	19
1	NULL	0	1	60	5	14
1	1	0	0	21	2	11
1	2	0	0	25	2	13
1	3	0	0	14	1	14
2	NULL	0	1	15	1	15
2	3	0	0	15	1	15
3	NULL	0	1	33	2	17
3	3	0	0	16	1	16
3	4	0	0	17	1	17
4	NULL	0	1	37	2	19
4	1	0	0	37	2	19


-- !query 10
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b) order by b desc, a
-- !query 10 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 10 output
3	4	0	0	17	1	17
1	3	0	0	14	1	14
2	3	0	0	15	1	15
3	3	0	0	16	1	16
1	2	0	0	25	2	13
1	1	0	0	21	2	11
4	1	0	0	37	2	19
NULL	NULL	1	1	145	10	19
1	NULL	0	1	60	5	14
2	NULL	0	1	15	1	15
3	NULL	0	1	33	2	17
4	NULL	0	1	37	2	19


-- !query 11
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b) order by coalesce(a,0)+coalesce(b,0)
-- !query 11 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 11 output
NULL	NULL	1	1	145	10	19
1	NULL	0	1	60	5	14
1	1	0	0	21	2	11
2	NULL	0	1	15	1	15
1	2	0	0	25	2	13
3	NULL	0	1	33	2	17
1	3	0	0	14	1	14
4	NULL	0	1	37	2	19
4	1	0	0	37	2	19
2	3	0	0	15	1	15
3	3	0	0	16	1	16
3	4	0	0	17	1	17


-- !query 12
select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
  from gstest2 group by rollup (a,b) order by rsum, a, b
-- !query 12 schema
struct<>
-- !query 12 output
org.apache.spark.sql.AnalysisException
grouping expressions sequence is empty, and '`a`' is not an aggregate function. Wrap '(sum(CAST(default.gstest2.`c` AS BIGINT)) AS `sum(c)`, sum(CAST(default.gstest2.`c` AS BIGINT)) AS `_w0`)' in windowing function(s) or wrap '`a`' in first() (or first_value) if you don't care which value you get.;


-- !query 13
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a)
-- !query 13 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 13 output



-- !query 14
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),())
-- !query 14 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 14 output
NULL	NULL	NULL	0


-- !query 15
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),())
-- !query 15 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 15 output
NULL	NULL	NULL	0


-- !query 16
select sum(v), count(*) from gstest_empty group by grouping sets ((),(),())
-- !query 16 schema
struct<sum(v):bigint,count(1):bigint>
-- !query 16 output
NULL	0


-- !query 17
select t1.a, t2.b, sum(t1.v), count(*) from gstest_empty t1, gstest_empty t2
 group by grouping sets ((t1.a,t2.b),())
-- !query 17 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 17 output
NULL	NULL	NULL	0


-- !query 18
select t1.a, t2.b, grouping(t1.a), grouping(t2.b), sum(t1.v), max(t2.a)
  from gstest1 t1, gstest2 t2
 group by grouping sets ((t1.a, t2.b), ())
-- !query 18 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,max(a):int>
-- !query 18 output
1	1	0	0	420	1
1	2	0	0	120	2
2	1	0	0	105	1
2	2	0	0	30	2
3	1	0	0	231	1
3	2	0	0	66	2
4	1	0	0	259	1
4	2	0	0	74	2
NULL	NULL	1	1	1305	2


-- !query 19
select t1.a, t2.b, grouping(t1.a), grouping(t2.b), sum(t1.v), max(t2.a)
  from gstest1 t1 join gstest2 t2 on (t1.a=t2.a)
 group by grouping sets ((t1.a, t2.b), ())
-- !query 19 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,max(a):int>
-- !query 19 output
1	1	0	0	420	1
1	2	0	0	60	1
2	2	0	0	15	2
NULL	NULL	1	1	495	2


-- !query 20
select a, b, grouping(a), grouping(b), sum(t1.v), max(t2.c)
  from gstest1 t1 join gstest2 t2 using (a,b)
 group by grouping sets ((a, b), ())
-- !query 20 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,max(c):int>
-- !query 20 output
1	1	0	0	147	2
1	2	0	0	25	2
NULL	NULL	1	1	172	2


-- !query 21
select four, x
  from (select four, ten, 'foo' as x from tenk1) as t
  group by grouping sets (four, x)
  having x = 'foo'
-- !query 21 schema
struct<four:int,x:string>
-- !query 21 output
NULL	foo


-- !query 22
select four, x || 'x'
  from (select four, ten, 'foo' as x from tenk1) as t
  group by grouping sets (four, x)
  order by four
-- !query 22 schema
struct<four:int,concat(x, x):string>
-- !query 22 output
NULL	foox
0	NULL
1	NULL
2	NULL
3	NULL


-- !query 23
select (x+y)*1, sum(z)
 from (select 1 as x, 2 as y, 3 as z) s
 group by grouping sets (x+y, x)
-- !query 23 schema
struct<((x + y) * 1):int,sum(z):bigint>
-- !query 23 output
3	3
NULL	3


-- !query 24
CREATE TEMP VIEW int8_tbl AS SELECT * FROM VALUES
  (123L, 456L),
  (123L, 4567890123456789L),
  (4567890123456789L, 123L),
  (4567890123456789L, 4567890123456789L),
  (4567890123456789L, -4567890123456789L) as int8_tbl(q1, q2)
-- !query 24 schema
struct<>
-- !query 24 output



-- !query 25
select x, not x as not_x, q2 from
  (select *, q1 = 1 as x from int8_tbl i1) as t
  group by grouping sets(x, q2)
  order by x, q2
-- !query 25 schema
struct<x:boolean,not_x:boolean,q2:bigint>
-- !query 25 output
NULL	NULL	-4567890123456789
NULL	NULL	123
NULL	NULL	456
NULL	NULL	4567890123456789
false	true	NULL


-- !query 26
DROP VIEW int8_tbl
-- !query 26 schema
struct<>
-- !query 26 output



-- !query 27
select ten, sum(distinct four) from onek a
group by grouping sets((ten,four),(ten))
having exists (select 1 from onek b where sum(distinct a.four) = b.four)
-- !query 27 schema
struct<ten:int,sum(DISTINCT four):bigint>
-- !query 27 output
0	0
0	2
0	2
1	1
1	3
2	0
2	2
2	2
3	1
3	3
4	0
4	2
4	2
5	1
5	3
6	0
6	2
6	2
7	1
7	3
8	0
8	2
8	2
9	1
9	3


-- !query 28
select a,count(*) from gstest2 group by rollup(a) order by a
-- !query 28 schema
struct<a:int,count(1):bigint>
-- !query 28 output
NULL	9
1	8
2	1


-- !query 29
select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a
-- !query 29 schema
struct<a:int,count(1):bigint>
-- !query 29 output
NULL	9
2	1


-- !query 30
select ten, grouping(ten) from onek
group by grouping sets(ten) having grouping(ten) >= 0
order by 2,1
-- !query 30 schema
struct<ten:int,grouping(ten):tinyint>
-- !query 30 output
0	0
1	0
2	0
3	0
4	0
5	0
6	0
7	0
8	0
9	0


-- !query 31
select ten, grouping(ten) from onek
group by grouping sets(ten, four) having grouping(ten) > 0
order by 2,1
-- !query 31 schema
struct<ten:int,grouping(ten):tinyint>
-- !query 31 output
NULL	1
NULL	1
NULL	1
NULL	1


-- !query 32
select ten, grouping(ten) from onek
group by rollup(ten) having grouping(ten) > 0
order by 2,1
-- !query 32 schema
struct<>
-- !query 32 output
org.apache.spark.sql.catalyst.errors.package$TreeNodeException
Max iterations (100) reached for batch Resolution, tree:
'Sort [unresolvedordinal(2) ASC NULLS FIRST, unresolvedordinal(1) ASC NULLS FIRST], true
+- !Filter (cast(cast((shiftright(grouping_id() AS grouping__id#29080 AS grouping_id()#29079 AS grouping__id#29078 AS grouping_id()#29077 AS grouping__id#29076 AS grouping_id()#29075 AS grouping__id#29074 AS grouping_id()#29073 AS grouping__id#29072 AS grouping_id()#29071 AS grouping__id#29070 AS grouping_id()#29069 AS grouping__id#29068 AS grouping_id()#29067 AS grouping__id#29066 AS grouping_id()#29065 AS grouping__id#29064 AS grouping_id()#29063 AS grouping__id#29062 AS grouping_id()#29061 AS grouping__id#29060 AS grouping_id()#29059 AS grouping__id#29058 AS grouping_id()#29057 AS grouping__id#29056 AS grouping_id()#29055 AS grouping__id#29054 AS grouping_id()#29053 AS grouping__id#29052 AS grouping_id()#29051 AS grouping__id#29050 AS grouping_id()#29049 AS grouping__id#29048 AS grouping_id()#29047 AS grouping__id#29046 AS grouping_id()#29045 AS grouping__id#29044 AS grouping_id()#29043 AS grouping__id#29042 AS grouping_id()#29041 AS grouping__id#29040 AS grouping_id()#29039 AS grouping__id#29038 AS grouping_id()#29037 AS grouping__id#29036 AS grouping_id()#29035 AS grouping__id#29034 AS grouping_id()#29033 AS grouping__id#29032 AS grouping_id()#29031 AS grouping__id#29030 AS grouping_id()#29029 AS grouping__id#29028 AS grouping_id()#29027 AS grouping__id#29026 AS grouping_id()#29025 AS grouping__id#29024 AS grouping_id()#29023 AS grouping__id#29022 AS grouping_id()#29021 AS grouping__id#29020 AS grouping_id()#29019 AS grouping__id#29018 AS grouping_id()#29017 AS grouping__id#29016 AS grouping_id()#29015 AS grouping__id#29014 AS grouping_id()#29013 AS grouping__id#29012 AS grouping_id()#29011 AS grouping__id#29010 AS grouping_id()#29009 AS grouping__id#29008 AS grouping_id()#29007 AS grouping__id#29006 AS grouping_id()#29005 AS grouping__id#29004 AS grouping_id()#29003 AS grouping__id#29002 AS grouping_id()#29001 AS grouping__id#29000 AS grouping_id()#28999 AS grouping__id#28998 AS grouping_id()#28997 AS grouping__id#28996 AS grouping_id()#28995 AS grouping__id#28994 AS grouping_id()#28993 AS grouping__id#28992 AS grouping_id()#28991 AS grouping__id#28990 AS grouping_id()#28989 AS grouping__id#28988 AS grouping_id()#28987 AS grouping__id#28986 AS grouping_id()#28985 AS grouping__id#28984 AS grouping_id()#28983 AS grouping__id#28982 AS grouping_id()#28981 AS grouping__id#28980 AS grouping_id()#28979 AS grouping__id#28978 AS grouping_id()#28977 AS grouping__id#28976 AS grouping_id()#28975 AS grouping__id#28974 AS grouping_id()#28973 AS grouping__id#28972 AS grouping_id()#28971 AS grouping__id#28970 AS grouping_id()#28969 AS grouping__id#28968 AS grouping_id()#28967 AS grouping__id#28966 AS grouping_id()#28965 AS grouping__id#28964 AS grouping_id()#28963 AS grouping__id#28962 AS grouping_id()#28961 AS grouping__id#28960 AS grouping_id()#28959 AS grouping__id#28958 AS grouping_id()#28957 AS grouping__id#28956 AS grouping_id()#28955 AS grouping__id#28954 AS grouping_id()#28953 AS grouping__id#28952 AS grouping_id()#28951 AS grouping__id#28950 AS grouping_id()#28949 AS grouping__id#28948 AS grouping_id()#28947 AS grouping__id#28946 AS grouping_id()#28945 AS grouping__id#28944 AS grouping_id()#28943 AS grouping__id#28942 AS grouping_id()#28941 AS grouping__id#28940 AS grouping_id()#28939 AS grouping__id#28938 AS grouping_id()#28937 AS grouping__id#28936 AS grouping_id()#28935 AS grouping__id#28934 AS grouping_id()#28933 AS grouping__id#28932 AS grouping_id()#28931 AS grouping__id#28930 AS grouping_id()#28929 AS grouping__id#28928 AS grouping_id()#28927 AS grouping__id#28926 AS grouping_id()#28925 AS grouping__id#28924 AS grouping_id()#28923 AS grouping__id#28922 AS grouping_id()#28921 AS grouping__id#28920 AS grouping_id()#28919 AS grouping__id#28918 AS grouping_id()#28917 AS grouping__id#28916 AS grouping_id()#28915 AS grouping__id#28914 AS grouping_id()#28913 AS grouping__id#28912 AS grouping_id()#28911 AS grouping__id#28910 AS grouping_id()#28909 AS grouping__id#28908 AS grouping_id()#28907 AS grouping__id#28906 AS grouping_id()#28905 AS grouping__id#28904 AS grouping_id()#28903 AS grouping__id#28902 AS grouping_id()#28901 AS grouping__id#28900 AS grouping_id()#28899 AS grouping__id#28898 AS grouping_id()#28897 AS grouping__id#28896 AS grouping_id()#28895 AS grouping__id#28894 AS grouping_id()#28893 AS grouping__id#28892 AS grouping_id()#28891 AS grouping__id#28890 AS grouping_id()#28889 AS grouping__id#28888 AS grouping_id()#28887 AS grouping__id#28886, 0) & 1) as tinyint) AS grouping(ten)#28885 as int) > 0)
   +- Union
      :- Aggregate [ten#28878, spark_grouping_id#28876], [ten#28878, cast((shiftright(spark_grouping_id#28876, 0) & 1) as tinyint) AS grouping(ten)#28879 AS grouping(ten)#28875]
      :  +- Expand [List(unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224, ten#28877, 0)], [unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224, ten#28878, spark_grouping_id#28876]
      :     +- Project [unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224, ten#28213 AS ten#28877]
      :        +- SubqueryAlias `onek`
      :           +- RelationV2[unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224] csv file:/Users/maropu/Repositories/spark/spark-master/sql/core/target/scala-2.12/test-classes/test-data/postgresql/onek.data
      +- Project [ten#28881 AS ten#28883, grouping(ten)#28875 AS grouping(ten)#28884]
         +- Aggregate [null AS ten#28881, cast((shiftright(3 AS gid#28880, 0) & 1) as tinyint) AS grouping(ten)#28882 AS grouping(ten)#28875]
            +- SubqueryAlias `onek`
               +- RelationV2[unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224] csv file:/Users/maropu/Repositories/spark/spark-master/sql/core/target/scala-2.12/test-classes/test-data/postgresql/onek.data


-- !query 33
select ten, grouping(ten) from onek
group by cube(ten) having grouping(ten) > 0
order by 2,1
-- !query 33 schema
struct<>
-- !query 33 output
org.apache.spark.sql.catalyst.errors.package$TreeNodeException
Max iterations (100) reached for batch Resolution, tree:
'Sort [unresolvedordinal(2) ASC NULLS FIRST, unresolvedordinal(1) ASC NULLS FIRST], true
+- !Filter (cast(cast((shiftright(grouping_id() AS grouping__id#29286 AS grouping_id()#29285 AS grouping__id#29284 AS grouping_id()#29283 AS grouping__id#29282 AS grouping_id()#29281 AS grouping__id#29280 AS grouping_id()#29279 AS grouping__id#29278 AS grouping_id()#29277 AS grouping__id#29276 AS grouping_id()#29275 AS grouping__id#29274 AS grouping_id()#29273 AS grouping__id#29272 AS grouping_id()#29271 AS grouping__id#29270 AS grouping_id()#29269 AS grouping__id#29268 AS grouping_id()#29267 AS grouping__id#29266 AS grouping_id()#29265 AS grouping__id#29264 AS grouping_id()#29263 AS grouping__id#29262 AS grouping_id()#29261 AS grouping__id#29260 AS grouping_id()#29259 AS grouping__id#29258 AS grouping_id()#29257 AS grouping__id#29256 AS grouping_id()#29255 AS grouping__id#29254 AS grouping_id()#29253 AS grouping__id#29252 AS grouping_id()#29251 AS grouping__id#29250 AS grouping_id()#29249 AS grouping__id#29248 AS grouping_id()#29247 AS grouping__id#29246 AS grouping_id()#29245 AS grouping__id#29244 AS grouping_id()#29243 AS grouping__id#29242 AS grouping_id()#29241 AS grouping__id#29240 AS grouping_id()#29239 AS grouping__id#29238 AS grouping_id()#29237 AS grouping__id#29236 AS grouping_id()#29235 AS grouping__id#29234 AS grouping_id()#29233 AS grouping__id#29232 AS grouping_id()#29231 AS grouping__id#29230 AS grouping_id()#29229 AS grouping__id#29228 AS grouping_id()#29227 AS grouping__id#29226 AS grouping_id()#29225 AS grouping__id#29224 AS grouping_id()#29223 AS grouping__id#29222 AS grouping_id()#29221 AS grouping__id#29220 AS grouping_id()#29219 AS grouping__id#29218 AS grouping_id()#29217 AS grouping__id#29216 AS grouping_id()#29215 AS grouping__id#29214 AS grouping_id()#29213 AS grouping__id#29212 AS grouping_id()#29211 AS grouping__id#29210 AS grouping_id()#29209 AS grouping__id#29208 AS grouping_id()#29207 AS grouping__id#29206 AS grouping_id()#29205 AS grouping__id#29204 AS grouping_id()#29203 AS grouping__id#29202 AS grouping_id()#29201 AS grouping__id#29200 AS grouping_id()#29199 AS grouping__id#29198 AS grouping_id()#29197 AS grouping__id#29196 AS grouping_id()#29195 AS grouping__id#29194 AS grouping_id()#29193 AS grouping__id#29192 AS grouping_id()#29191 AS grouping__id#29190 AS grouping_id()#29189 AS grouping__id#29188 AS grouping_id()#29187 AS grouping__id#29186 AS grouping_id()#29185 AS grouping__id#29184 AS grouping_id()#29183 AS grouping__id#29182 AS grouping_id()#29181 AS grouping__id#29180 AS grouping_id()#29179 AS grouping__id#29178 AS grouping_id()#29177 AS grouping__id#29176 AS grouping_id()#29175 AS grouping__id#29174 AS grouping_id()#29173 AS grouping__id#29172 AS grouping_id()#29171 AS grouping__id#29170 AS grouping_id()#29169 AS grouping__id#29168 AS grouping_id()#29167 AS grouping__id#29166 AS grouping_id()#29165 AS grouping__id#29164 AS grouping_id()#29163 AS grouping__id#29162 AS grouping_id()#29161 AS grouping__id#29160 AS grouping_id()#29159 AS grouping__id#29158 AS grouping_id()#29157 AS grouping__id#29156 AS grouping_id()#29155 AS grouping__id#29154 AS grouping_id()#29153 AS grouping__id#29152 AS grouping_id()#29151 AS grouping__id#29150 AS grouping_id()#29149 AS grouping__id#29148 AS grouping_id()#29147 AS grouping__id#29146 AS grouping_id()#29145 AS grouping__id#29144 AS grouping_id()#29143 AS grouping__id#29142 AS grouping_id()#29141 AS grouping__id#29140 AS grouping_id()#29139 AS grouping__id#29138 AS grouping_id()#29137 AS grouping__id#29136 AS grouping_id()#29135 AS grouping__id#29134 AS grouping_id()#29133 AS grouping__id#29132 AS grouping_id()#29131 AS grouping__id#29130 AS grouping_id()#29129 AS grouping__id#29128 AS grouping_id()#29127 AS grouping__id#29126 AS grouping_id()#29125 AS grouping__id#29124 AS grouping_id()#29123 AS grouping__id#29122 AS grouping_id()#29121 AS grouping__id#29120 AS grouping_id()#29119 AS grouping__id#29118 AS grouping_id()#29117 AS grouping__id#29116 AS grouping_id()#29115 AS grouping__id#29114 AS grouping_id()#29113 AS grouping__id#29112 AS grouping_id()#29111 AS grouping__id#29110 AS grouping_id()#29109 AS grouping__id#29108 AS grouping_id()#29107 AS grouping__id#29106 AS grouping_id()#29105 AS grouping__id#29104 AS grouping_id()#29103 AS grouping__id#29102 AS grouping_id()#29101 AS grouping__id#29100 AS grouping_id()#29099 AS grouping__id#29098 AS grouping_id()#29097 AS grouping__id#29096 AS grouping_id()#29095 AS grouping__id#29094 AS grouping_id()#29093 AS grouping__id#29092, 0) & 1) as tinyint) AS grouping(ten)#29091 as int) > 0)
   +- Union
      :- Aggregate [ten#29084, spark_grouping_id#29082], [ten#29084, cast((shiftright(spark_grouping_id#29082, 0) & 1) as tinyint) AS grouping(ten)#29085 AS grouping(ten)#29081]
      :  +- Expand [List(unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224, ten#29083, 0)], [unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224, ten#29084, spark_grouping_id#29082]
      :     +- Project [unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224, ten#28213 AS ten#29083]
      :        +- SubqueryAlias `onek`
      :           +- RelationV2[unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224] csv file:/Users/maropu/Repositories/spark/spark-master/sql/core/target/scala-2.12/test-classes/test-data/postgresql/onek.data
      +- Project [ten#29087 AS ten#29089, grouping(ten)#29081 AS grouping(ten)#29090]
         +- Aggregate [null AS ten#29087, cast((shiftright(3 AS gid#29086, 0) & 1) as tinyint) AS grouping(ten)#29088 AS grouping(ten)#29081]
            +- SubqueryAlias `onek`
               +- RelationV2[unique1#28209, unique2#28210, two#28211, four#28212, ten#28213, twenty#28214, hundred#28215, thousand#28216, twothousand#28217, fivethous#28218, tenthous#28219, odd#28220, even#28221, stringu1#28222, stringu2#28223, string4#28224] csv file:/Users/maropu/Repositories/spark/spark-master/sql/core/target/scala-2.12/test-classes/test-data/postgresql/onek.data


-- !query 34
select count(*) from gstest4 group by rollup(unhashable_col,unsortable_col)
-- !query 34 schema
struct<count(1):bigint>
-- !query 34 output
1
1
1
1
1
1
1
1
2
2
2
2
8


-- !query 35
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by grouping sets ((a),(b)) order by 3,4,1,2 /* 3,1,2 */
-- !query 35 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 35 output
1	NULL	0	1	60	5	14
2	NULL	0	1	15	1	15
3	NULL	0	1	33	2	17
4	NULL	0	1	37	2	19
NULL	1	1	0	58	4	19
NULL	2	1	0	25	2	13
NULL	3	1	0	45	3	16
NULL	4	1	0	17	1	17


-- !query 36
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by cube(a,b) order by 3,4,1,2 /* 3,1,2 */
-- !query 36 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 36 output
1	1	0	0	21	2	11
1	2	0	0	25	2	13
1	3	0	0	14	1	14
2	3	0	0	15	1	15
3	3	0	0	16	1	16
3	4	0	0	17	1	17
4	1	0	0	37	2	19
1	NULL	0	1	60	5	14
2	NULL	0	1	15	1	15
3	NULL	0	1	33	2	17
4	NULL	0	1	37	2	19
NULL	1	1	0	58	4	19
NULL	2	1	0	25	2	13
NULL	3	1	0	45	3	16
NULL	4	1	0	17	1	17
NULL	NULL	1	1	145	10	19


-- !query 37
select unsortable_col, count(*)
  from gstest4 group by grouping sets ((unsortable_col),(unsortable_col))
  order by string(unsortable_col)
-- !query 37 schema
struct<unsortable_col:int,count(1):bigint>
-- !query 37 output
1	8
2	8


-- !query 38
select unhashable_col, unsortable_col,
       grouping(unhashable_col), grouping(unsortable_col),
       count(*), sum(v)
  from gstest4 group by grouping sets ((unhashable_col),(unsortable_col))
 order by 3, 4, 6 /* 3, 5 */
-- !query 38 schema
struct<unhashable_col:tinyint,unsortable_col:int,grouping(unhashable_col):tinyint,grouping(unsortable_col):tinyint,count(1):bigint,sum(v):bigint>
-- !query 38 output
0	NULL	0	1	2	17
1	NULL	0	1	2	34
2	NULL	0	1	2	68
3	NULL	0	1	2	136
NULL	2	1	0	4	60
NULL	1	1	0	4	195


-- !query 39
select unhashable_col, unsortable_col,
       grouping(unhashable_col), grouping(unsortable_col),
       count(*), sum(v)
  from gstest4 group by grouping sets ((v,unhashable_col),(v,unsortable_col))
 order by 3, 4, 6 /* 3,5 */
-- !query 39 schema
struct<unhashable_col:tinyint,unsortable_col:int,grouping(unhashable_col):tinyint,grouping(unsortable_col):tinyint,count(1):bigint,sum(v):bigint>
-- !query 39 output
0	NULL	0	1	1	1
1	NULL	0	1	1	2
2	NULL	0	1	1	4
3	NULL	0	1	1	8
0	NULL	0	1	1	16
1	NULL	0	1	1	32
2	NULL	0	1	1	64
3	NULL	0	1	1	128
NULL	1	1	0	1	1
NULL	1	1	0	1	2
NULL	2	1	0	1	4
NULL	2	1	0	1	8
NULL	2	1	0	1	16
NULL	2	1	0	1	32
NULL	1	1	0	1	64
NULL	1	1	0	1	128


-- !query 40
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a)
-- !query 40 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 40 output



-- !query 41
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),())
-- !query 41 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 41 output
NULL	NULL	NULL	0


-- !query 42
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),())
-- !query 42 schema
struct<a:int,b:int,sum(v):bigint,count(1):bigint>
-- !query 42 output
NULL	NULL	NULL	0


-- !query 43
select sum(v), count(*) from gstest_empty group by grouping sets ((),(),())
-- !query 43 schema
struct<sum(v):bigint,count(1):bigint>
-- !query 43 output
NULL	0


-- !query 44
select a, b, grouping(a), grouping(b), sum(v), count(*), max(v)
  from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,4,7 /* 3,6 */
-- !query 44 schema
struct<a:int,b:int,grouping(a):tinyint,grouping(b):tinyint,sum(v):bigint,count(1):bigint,max(v):int>
-- !query 44 output
1	1	0	0	21	2	11
1	2	0	0	25	2	13
1	3	0	0	14	1	14
2	3	0	0	15	1	15
3	3	0	0	16	1	16
3	4	0	0	17	1	17
4	1	0	0	37	2	19
NULL	NULL	1	1	21	2	11
NULL	NULL	1	1	21	2	11
NULL	NULL	1	1	25	2	13
NULL	NULL	1	1	25	2	13
NULL	NULL	1	1	14	1	14
NULL	NULL	1	1	14	1	14
NULL	NULL	1	1	15	1	15
NULL	NULL	1	1	15	1	15
NULL	NULL	1	1	16	1	16
NULL	NULL	1	1	16	1	16
NULL	NULL	1	1	17	1	17
NULL	NULL	1	1	17	1	17
NULL	NULL	1	1	37	2	19
NULL	NULL	1	1	37	2	19


-- !query 45
select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
  from gstest2 group by cube (a,b) order by rsum, a, b
-- !query 45 schema
struct<>
-- !query 45 output
org.apache.spark.sql.AnalysisException
grouping expressions sequence is empty, and '`a`' is not an aggregate function. Wrap '(sum(CAST(default.gstest2.`c` AS BIGINT)) AS `sum(c)`, sum(CAST(default.gstest2.`c` AS BIGINT)) AS `_w0`)' in windowing function(s) or wrap '`a`' in first() (or first_value) if you don't care which value you get.;


-- !query 46
SELECT a, b, count(*), max(a), max(b) FROM gstest3 GROUP BY GROUPING SETS(a, b,()) ORDER BY a, b
-- !query 46 schema
struct<a:int,b:int,count(1):bigint,max(a):int,max(b):int>
-- !query 46 output
NULL	NULL	2	2	2
NULL	1	1	1	1
NULL	2	1	2	2
1	NULL	1	1	1
2	NULL	1	2	2


-- !query 47
select v||'a', case grouping(v||'a') when 1 then 1 else 0 end, count(*)
  from values (1, 'a'), (1, 'b') u(i,v)
 group by rollup(i, v||'a') order by 1,3
-- !query 47 schema
struct<concat(v, a):string,CASE WHEN (CAST(grouping(concat(v, a)) AS INT) = 1) THEN 1 ELSE 0 END:int,count(1):bigint>
-- !query 47 output
NULL	1	2
NULL	1	2
aa	0	1
ba	0	1


-- !query 48
select v||'a', case when grouping(v||'a') = 1 then 1 else 0 end, count(*)
  from values (1, 'a'), (1, 'b') u(i,v)
 group by rollup(i, v||'a') order by 1,3
-- !query 48 schema
struct<concat(v, a):string,CASE WHEN (CAST(grouping(concat(v, a)) AS INT) = 1) THEN 1 ELSE 0 END:int,count(1):bigint>
-- !query 48 output
NULL	1	2
NULL	1	2
aa	0	1
ba	0	1


-- !query 49
DROP VIEW gstest1
-- !query 49 schema
struct<>
-- !query 49 output



-- !query 50
DROP TABLE gstest2
-- !query 50 schema
struct<>
-- !query 50 output



-- !query 51
DROP TABLE gstest3
-- !query 51 schema
struct<>
-- !query 51 output



-- !query 52
DROP TABLE gstest4
-- !query 52 schema
struct<>
-- !query 52 output



-- !query 53
DROP TABLE gstest_empty
-- !query 53 schema
struct<>
-- !query 53 output

