== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- BroadcastNestedLoopJoin LeftSemi BuildLeft (46)
               :- BroadcastExchange (32)
               :  +- * Project (31)
               :     +- * BroadcastHashJoin Inner BuildLeft (30)
               :        :- BroadcastExchange (26)
               :        :  +- * Project (25)
               :        :     +- * BroadcastHashJoin Inner BuildRight (24)
               :        :        :- SortMergeJoin LeftSemi (18)
               :        :        :  :- * Sort (5)
               :        :        :  :  +- Exchange (4)
               :        :        :  :     +- * Filter (3)
               :        :        :  :        +- * ColumnarToRow (2)
               :        :        :  :           +- Scan parquet default.customer (1)
               :        :        :  +- * Sort (17)
               :        :        :     +- Exchange (16)
               :        :        :        +- * Project (15)
               :        :        :           +- * BroadcastHashJoin Inner BuildRight (14)
               :        :        :              :- * Filter (8)
               :        :        :              :  +- * ColumnarToRow (7)
               :        :        :              :     +- Scan parquet default.store_sales (6)
               :        :        :              +- BroadcastExchange (13)
               :        :        :                 +- * Project (12)
               :        :        :                    +- * Filter (11)
               :        :        :                       +- * ColumnarToRow (10)
               :        :        :                          +- Scan parquet default.date_dim (9)
               :        :        +- BroadcastExchange (23)
               :        :           +- * Project (22)
               :        :              +- * Filter (21)
               :        :                 +- * ColumnarToRow (20)
               :        :                    +- Scan parquet default.customer_address (19)
               :        +- * Filter (29)
               :           +- * ColumnarToRow (28)
               :              +- Scan parquet default.customer_demographics (27)
               +- Union (45)
                  :- * Project (38)
                  :  +- * BroadcastHashJoin Inner BuildRight (37)
                  :     :- * Filter (35)
                  :     :  +- * ColumnarToRow (34)
                  :     :     +- Scan parquet default.web_sales (33)
                  :     +- ReusedExchange (36)
                  +- * Project (44)
                     +- * BroadcastHashJoin Inner BuildRight (43)
                        :- * Filter (41)
                        :  +- * ColumnarToRow (40)
                        :     +- Scan parquet default.catalog_sales (39)
                        +- ReusedExchange (42)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), true, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Condition : isnotnull(ss_sold_date_sk#5)

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2002)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 7)) AND isnotnull(d_date_sk#7))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(13) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_sold_date_sk#5, ss_customer_sk#6, d_date_sk#7]

(16) Exchange
Input [1]: [ss_customer_sk#6]
Arguments: hashpartitioning(ss_customer_sk#6, 5), true, [id=#11]

(17) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(18) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(19) Scan parquet default.customer_address
Output [2]: [ca_address_sk#12, ca_county#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Walker County,Richland County,Gaines County,Douglas County,Dona Ana County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#12, ca_county#13]

(21) Filter [codegen id : 6]
Input [2]: [ca_address_sk#12, ca_county#13]
Condition : (ca_county#13 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#12))

(22) Project [codegen id : 6]
Output [1]: [ca_address_sk#12]
Input [2]: [ca_address_sk#12, ca_county#13]

(23) BroadcastExchange
Input [1]: [ca_address_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(24) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#12]
Join condition: None

(25) Project [codegen id : 7]
Output [2]: [c_customer_sk#1, c_current_cdemo_sk#2]
Input [4]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#12]

(26) BroadcastExchange
Input [2]: [c_customer_sk#1, c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#15]

(27) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#16, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(28) ColumnarToRow
Input [9]: [cd_demo_sk#16, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]

(29) Filter
Input [9]: [cd_demo_sk#16, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Condition : isnotnull(cd_demo_sk#16)

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#16]
Join condition: None

(31) Project [codegen id : 8]
Output [9]: [c_customer_sk#1, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Input [11]: [c_customer_sk#1, c_current_cdemo_sk#2, cd_demo_sk#16, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]

(32) BroadcastExchange
Input [9]: [c_customer_sk#1, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Arguments: IdentityBroadcastMode, [id=#25]

(33) Scan parquet default.web_sales
Output [1]: [ws_sold_date_sk#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int>

(34) ColumnarToRow [codegen id : 10]
Input [1]: [ws_sold_date_sk#26]

(35) Filter [codegen id : 10]
Input [1]: [ws_sold_date_sk#26]
Condition : isnotnull(ws_sold_date_sk#26)

(36) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#26]
Right keys [1]: [d_date_sk#7]
Join condition: None

(38) Project [codegen id : 10]
Output: []
Input [2]: [ws_sold_date_sk#26, d_date_sk#7]

(39) Scan parquet default.catalog_sales
Output [1]: [cs_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int>

(40) ColumnarToRow [codegen id : 12]
Input [1]: [cs_sold_date_sk#27]

(41) Filter [codegen id : 12]
Input [1]: [cs_sold_date_sk#27]
Condition : isnotnull(cs_sold_date_sk#27)

(42) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(43) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#27]
Right keys [1]: [d_date_sk#7]
Join condition: None

(44) Project [codegen id : 12]
Output: []
Input [2]: [cs_sold_date_sk#27, d_date_sk#7]

(45) Union

(46) BroadcastNestedLoopJoin
Join condition: (c_customer_sk#1 = customer_sk#28)

(47) Project [codegen id : 13]
Output [8]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Input [9]: [c_customer_sk#1, cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]

(48) HashAggregate [codegen id : 13]
Input [8]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Keys [8]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#29]
Results [9]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, count#30]

(49) Exchange
Input [9]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, count#30]
Arguments: hashpartitioning(cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, 5), true, [id=#31]

(50) HashAggregate [codegen id : 14]
Input [9]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, count#30]
Keys [8]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cd_purchase_estimate#20, cd_credit_rating#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#32]
Results [14]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, count(1)#32 AS cnt1#33, cd_purchase_estimate#20, count(1)#32 AS cnt2#34, cd_credit_rating#21, count(1)#32 AS cnt3#35, cd_dep_count#22, count(1)#32 AS cnt4#36, cd_dep_employed_count#23, count(1)#32 AS cnt5#37, cd_dep_college_count#24, count(1)#32 AS cnt6#38]

(51) TakeOrderedAndProject
Input [14]: [cd_gender#17, cd_marital_status#18, cd_education_status#19, cnt1#33, cd_purchase_estimate#20, cnt2#34, cd_credit_rating#21, cnt3#35, cd_dep_count#22, cnt4#36, cd_dep_employed_count#23, cnt5#37, cd_dep_college_count#24, cnt6#38]
Arguments: 100, [cd_gender#17 ASC NULLS FIRST, cd_marital_status#18 ASC NULLS FIRST, cd_education_status#19 ASC NULLS FIRST, cd_purchase_estimate#20 ASC NULLS FIRST, cd_credit_rating#21 ASC NULLS FIRST, cd_dep_count#22 ASC NULLS FIRST, cd_dep_employed_count#23 ASC NULLS FIRST, cd_dep_college_count#24 ASC NULLS FIRST], [cd_gender#17, cd_marital_status#18, cd_education_status#19, cnt1#33, cd_purchase_estimate#20, cnt2#34, cd_credit_rating#21, cnt3#35, cd_dep_count#22, cnt4#36, cd_dep_employed_count#23, cnt5#37, cd_dep_college_count#24, cnt6#38]

