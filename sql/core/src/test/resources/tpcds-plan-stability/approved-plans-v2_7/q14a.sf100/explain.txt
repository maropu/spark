== Physical Plan ==
TakeOrderedAndProject (222)
+- * HashAggregate (221)
   +- Exchange (220)
      +- * HashAggregate (219)
         +- Union (218)
            :- * HashAggregate (198)
            :  +- Exchange (197)
            :     +- * HashAggregate (196)
            :        +- Union (195)
            :           :- * HashAggregate (175)
            :           :  +- Exchange (174)
            :           :     +- * HashAggregate (173)
            :           :        +- Union (172)
            :           :           :- * HashAggregate (152)
            :           :           :  +- Exchange (151)
            :           :           :     +- * HashAggregate (150)
            :           :           :        +- Union (149)
            :           :           :           :- * HashAggregate (129)
            :           :           :           :  +- Exchange (128)
            :           :           :           :     +- * HashAggregate (127)
            :           :           :           :        +- Union (126)
            :           :           :           :           :- * Project (87)
            :           :           :           :           :  +- * Filter (86)
            :           :           :           :           :     +- * HashAggregate (85)
            :           :           :           :           :        +- Exchange (84)
            :           :           :           :           :           +- * HashAggregate (83)
            :           :           :           :           :              +- * Project (82)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (81)
            :           :           :           :           :                    :- * Project (71)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
            :           :           :           :           :                    :     :- SortMergeJoin LeftSemi (64)
            :           :           :           :           :                    :     :  :- * Sort (5)
            :           :           :           :           :                    :     :  :  +- Exchange (4)
            :           :           :           :           :                    :     :  :     +- * Filter (3)
            :           :           :           :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :           :           :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :           :           :           :                    :     :  +- * Sort (63)
            :           :           :           :           :                    :     :     +- Exchange (62)
            :           :           :           :           :                    :     :        +- * Project (61)
            :           :           :           :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
            :           :           :           :           :                    :     :              :- * Filter (8)
            :           :           :           :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :           :           :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :           :           :           :                    :     :              +- BroadcastExchange (59)
            :           :           :           :           :                    :     :                 +- * HashAggregate (58)
            :           :           :           :           :                    :     :                    +- * HashAggregate (57)
            :           :           :           :           :                    :     :                       +- * HashAggregate (56)
            :           :           :           :           :                    :     :                          +- Exchange (55)
            :           :           :           :           :                    :     :                             +- * HashAggregate (54)
            :           :           :           :           :                    :     :                                +- SortMergeJoin LeftSemi (53)
            :           :           :           :           :                    :     :                                   :- SortMergeJoin LeftSemi (41)
            :           :           :           :           :                    :     :                                   :  :- * Sort (26)
            :           :           :           :           :                    :     :                                   :  :  +- Exchange (25)
            :           :           :           :           :                    :     :                                   :  :     +- * Project (24)
            :           :           :           :           :                    :     :                                   :  :        +- * BroadcastHashJoin Inner BuildRight (23)
            :           :           :           :           :                    :     :                                   :  :           :- * Project (18)
            :           :           :           :           :                    :     :                                   :  :           :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :           :           :           :                    :     :                                   :  :           :     :- * Filter (11)
            :           :           :           :           :                    :     :                                   :  :           :     :  +- * ColumnarToRow (10)
            :           :           :           :           :                    :     :                                   :  :           :     :     +- Scan parquet default.store_sales (9)
            :           :           :           :           :                    :     :                                   :  :           :     +- BroadcastExchange (16)
            :           :           :           :           :                    :     :                                   :  :           :        +- * Project (15)
            :           :           :           :           :                    :     :                                   :  :           :           +- * Filter (14)
            :           :           :           :           :                    :     :                                   :  :           :              +- * ColumnarToRow (13)
            :           :           :           :           :                    :     :                                   :  :           :                 +- Scan parquet default.date_dim (12)
            :           :           :           :           :                    :     :                                   :  :           +- BroadcastExchange (22)
            :           :           :           :           :                    :     :                                   :  :              +- * Filter (21)
            :           :           :           :           :                    :     :                                   :  :                 +- * ColumnarToRow (20)
            :           :           :           :           :                    :     :                                   :  :                    +- Scan parquet default.item (19)
            :           :           :           :           :                    :     :                                   :  +- * Sort (40)
            :           :           :           :           :                    :     :                                   :     +- Exchange (39)
            :           :           :           :           :                    :     :                                   :        +- * Project (38)
            :           :           :           :           :                    :     :                                   :           +- * BroadcastHashJoin Inner BuildRight (37)
            :           :           :           :           :                    :     :                                   :              :- * Project (32)
            :           :           :           :           :                    :     :                                   :              :  +- * BroadcastHashJoin Inner BuildRight (31)
            :           :           :           :           :                    :     :                                   :              :     :- * Filter (29)
            :           :           :           :           :                    :     :                                   :              :     :  +- * ColumnarToRow (28)
            :           :           :           :           :                    :     :                                   :              :     :     +- Scan parquet default.catalog_sales (27)
            :           :           :           :           :                    :     :                                   :              :     +- ReusedExchange (30)
            :           :           :           :           :                    :     :                                   :              +- BroadcastExchange (36)
            :           :           :           :           :                    :     :                                   :                 +- * Filter (35)
            :           :           :           :           :                    :     :                                   :                    +- * ColumnarToRow (34)
            :           :           :           :           :                    :     :                                   :                       +- Scan parquet default.item (33)
            :           :           :           :           :                    :     :                                   +- * Sort (52)
            :           :           :           :           :                    :     :                                      +- Exchange (51)
            :           :           :           :           :                    :     :                                         +- * Project (50)
            :           :           :           :           :                    :     :                                            +- * BroadcastHashJoin Inner BuildRight (49)
            :           :           :           :           :                    :     :                                               :- * Project (47)
            :           :           :           :           :                    :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (46)
            :           :           :           :           :                    :     :                                               :     :- * Filter (44)
            :           :           :           :           :                    :     :                                               :     :  +- * ColumnarToRow (43)
            :           :           :           :           :                    :     :                                               :     :     +- Scan parquet default.web_sales (42)
            :           :           :           :           :                    :     :                                               :     +- ReusedExchange (45)
            :           :           :           :           :                    :     :                                               +- ReusedExchange (48)
            :           :           :           :           :                    :     +- BroadcastExchange (69)
            :           :           :           :           :                    :        +- * Project (68)
            :           :           :           :           :                    :           +- * Filter (67)
            :           :           :           :           :                    :              +- * ColumnarToRow (66)
            :           :           :           :           :                    :                 +- Scan parquet default.date_dim (65)
            :           :           :           :           :                    +- BroadcastExchange (80)
            :           :           :           :           :                       +- SortMergeJoin LeftSemi (79)
            :           :           :           :           :                          :- * Sort (76)
            :           :           :           :           :                          :  +- Exchange (75)
            :           :           :           :           :                          :     +- * Filter (74)
            :           :           :           :           :                          :        +- * ColumnarToRow (73)
            :           :           :           :           :                          :           +- Scan parquet default.item (72)
            :           :           :           :           :                          +- * Sort (78)
            :           :           :           :           :                             +- ReusedExchange (77)
            :           :           :           :           :- * Project (106)
            :           :           :           :           :  +- * Filter (105)
            :           :           :           :           :     +- * HashAggregate (104)
            :           :           :           :           :        +- Exchange (103)
            :           :           :           :           :           +- * HashAggregate (102)
            :           :           :           :           :              +- * Project (101)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (100)
            :           :           :           :           :                    :- * Project (98)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (97)
            :           :           :           :           :                    :     :- SortMergeJoin LeftSemi (95)
            :           :           :           :           :                    :     :  :- * Sort (92)
            :           :           :           :           :                    :     :  :  +- Exchange (91)
            :           :           :           :           :                    :     :  :     +- * Filter (90)
            :           :           :           :           :                    :     :  :        +- * ColumnarToRow (89)
            :           :           :           :           :                    :     :  :           +- Scan parquet default.catalog_sales (88)
            :           :           :           :           :                    :     :  +- * Sort (94)
            :           :           :           :           :                    :     :     +- ReusedExchange (93)
            :           :           :           :           :                    :     +- ReusedExchange (96)
            :           :           :           :           :                    +- ReusedExchange (99)
            :           :           :           :           +- * Project (125)
            :           :           :           :              +- * Filter (124)
            :           :           :           :                 +- * HashAggregate (123)
            :           :           :           :                    +- Exchange (122)
            :           :           :           :                       +- * HashAggregate (121)
            :           :           :           :                          +- * Project (120)
            :           :           :           :                             +- * BroadcastHashJoin Inner BuildRight (119)
            :           :           :           :                                :- * Project (117)
            :           :           :           :                                :  +- * BroadcastHashJoin Inner BuildRight (116)
            :           :           :           :                                :     :- SortMergeJoin LeftSemi (114)
            :           :           :           :                                :     :  :- * Sort (111)
            :           :           :           :                                :     :  :  +- Exchange (110)
            :           :           :           :                                :     :  :     +- * Filter (109)
            :           :           :           :                                :     :  :        +- * ColumnarToRow (108)
            :           :           :           :                                :     :  :           +- Scan parquet default.web_sales (107)
            :           :           :           :                                :     :  +- * Sort (113)
            :           :           :           :                                :     :     +- ReusedExchange (112)
            :           :           :           :                                :     +- ReusedExchange (115)
            :           :           :           :                                +- ReusedExchange (118)
            :           :           :           +- * HashAggregate (148)
            :           :           :              +- Exchange (147)
            :           :           :                 +- * HashAggregate (146)
            :           :           :                    +- * HashAggregate (145)
            :           :           :                       +- Exchange (144)
            :           :           :                          +- * HashAggregate (143)
            :           :           :                             +- Union (142)
            :           :           :                                :- * Project (133)
            :           :           :                                :  +- * Filter (132)
            :           :           :                                :     +- * HashAggregate (131)
            :           :           :                                :        +- ReusedExchange (130)
            :           :           :                                :- * Project (137)
            :           :           :                                :  +- * Filter (136)
            :           :           :                                :     +- * HashAggregate (135)
            :           :           :                                :        +- ReusedExchange (134)
            :           :           :                                +- * Project (141)
            :           :           :                                   +- * Filter (140)
            :           :           :                                      +- * HashAggregate (139)
            :           :           :                                         +- ReusedExchange (138)
            :           :           +- * HashAggregate (171)
            :           :              +- Exchange (170)
            :           :                 +- * HashAggregate (169)
            :           :                    +- * HashAggregate (168)
            :           :                       +- Exchange (167)
            :           :                          +- * HashAggregate (166)
            :           :                             +- Union (165)
            :           :                                :- * Project (156)
            :           :                                :  +- * Filter (155)
            :           :                                :     +- * HashAggregate (154)
            :           :                                :        +- ReusedExchange (153)
            :           :                                :- * Project (160)
            :           :                                :  +- * Filter (159)
            :           :                                :     +- * HashAggregate (158)
            :           :                                :        +- ReusedExchange (157)
            :           :                                +- * Project (164)
            :           :                                   +- * Filter (163)
            :           :                                      +- * HashAggregate (162)
            :           :                                         +- ReusedExchange (161)
            :           +- * HashAggregate (194)
            :              +- Exchange (193)
            :                 +- * HashAggregate (192)
            :                    +- * HashAggregate (191)
            :                       +- Exchange (190)
            :                          +- * HashAggregate (189)
            :                             +- Union (188)
            :                                :- * Project (179)
            :                                :  +- * Filter (178)
            :                                :     +- * HashAggregate (177)
            :                                :        +- ReusedExchange (176)
            :                                :- * Project (183)
            :                                :  +- * Filter (182)
            :                                :     +- * HashAggregate (181)
            :                                :        +- ReusedExchange (180)
            :                                +- * Project (187)
            :                                   +- * Filter (186)
            :                                      +- * HashAggregate (185)
            :                                         +- ReusedExchange (184)
            +- * HashAggregate (217)
               +- Exchange (216)
                  +- * HashAggregate (215)
                     +- * HashAggregate (214)
                        +- Exchange (213)
                           +- * HashAggregate (212)
                              +- Union (211)
                                 :- * Project (202)
                                 :  +- * Filter (201)
                                 :     +- * HashAggregate (200)
                                 :        +- ReusedExchange (199)
                                 :- * Project (206)
                                 :  +- * Filter (205)
                                 :     +- * HashAggregate (204)
                                 :        +- ReusedExchange (203)
                                 +- * Project (210)
                                    +- * Filter (209)
                                       +- * HashAggregate (208)
                                          +- ReusedExchange (207)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), true, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), true, [id=#17]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(33) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(36) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(39) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), true, [id=#21]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(43) ColumnarToRow [codegen id : 13]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]

(44) Filter [codegen id : 13]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(47) Project [codegen id : 13]
Output [1]: [ws_item_sk#23]
Input [3]: [ws_sold_date_sk#22, ws_item_sk#23, d_date_sk#10]

(48) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(50) Project [codegen id : 13]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#23, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(51) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), true, [id=#24]

(52) Sort [codegen id : 14]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(54) HashAggregate [codegen id : 15]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(55) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), true, [id=#25]

(56) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(57) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(58) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(59) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(61) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#27]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(62) Exchange
Input [1]: [ss_item_sk#27]
Arguments: hashpartitioning(ss_item_sk#27, 5), true, [id=#28]

(63) Sort [codegen id : 18]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(65) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(66) ColumnarToRow [codegen id : 19]
Input [3]: [d_date_sk#10, d_year#11, d_moy#29]

(67) Filter [codegen id : 19]
Input [3]: [d_date_sk#10, d_year#11, d_moy#29]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#29)) AND (d_year#11 = 2000)) AND (d_moy#29 = 11)) AND isnotnull(d_date_sk#10))

(68) Project [codegen id : 19]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#29]

(69) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(70) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(71) Project [codegen id : 38]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(72) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(74) Filter [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(75) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), true, [id=#31]

(76) Sort [codegen id : 21]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(78) Sort [codegen id : 37]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#33, isEmpty#34, count#35]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#36, isEmpty#37, count#38]

(84) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#36, isEmpty#37, count#38]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#39]

(85) HashAggregate [codegen id : 39]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#36, isEmpty#37, count#38]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#40, count(1)#41]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#40 AS sales#42, count(1)#41 AS number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#40 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#44]

(86) Filter [codegen id : 39]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#44]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#44) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#44 as decimal(32,6)) > cast(Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(87) Project [codegen id : 39]
Output [6]: [store AS channel#47, i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#44]

(88) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 40]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]

(90) Filter [codegen id : 40]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(91) Exchange
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Arguments: hashpartitioning(cs_item_sk#19, 5), true, [id=#50]

(92) Sort [codegen id : 41]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(94) Sort [codegen id : 57]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(96) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#10]

(97) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(98) Project [codegen id : 77]
Output [3]: [cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Input [5]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49, d_date_sk#10]

(99) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(101) Project [codegen id : 77]
Output [5]: [cs_quantity#48, cs_list_price#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#19, cs_quantity#48, cs_list_price#49, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(102) HashAggregate [codegen id : 77]
Input [5]: [cs_quantity#48, cs_list_price#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]

(103) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#57]

(104) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58, count(1)#59]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sales#60, count(1)#59 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62]

(105) Filter [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(106) Project [codegen id : 78]
Output [6]: [catalog AS channel#63, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62]

(107) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 79]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]

(109) Filter [codegen id : 79]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(110) Exchange
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Arguments: hashpartitioning(ws_item_sk#23, 5), true, [id=#66]

(111) Sort [codegen id : 80]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Arguments: [ws_item_sk#23 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(113) Sort [codegen id : 96]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(114) SortMergeJoin
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(115) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#10]

(116) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(117) Project [codegen id : 116]
Output [3]: [ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Input [5]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65, d_date_sk#10]

(118) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(119) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(120) Project [codegen id : 116]
Output [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#23, ws_quantity#64, ws_list_price#65, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(121) HashAggregate [codegen id : 116]
Input [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, count#69]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#70, isEmpty#71, count#72]

(122) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#70, isEmpty#71, count#72]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#73]

(123) HashAggregate [codegen id : 117]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#70, isEmpty#71, count#72]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74, count(1)#75]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sales#76, count(1)#75 AS number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78]

(124) Filter [codegen id : 117]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(125) Project [codegen id : 117]
Output [6]: [web AS channel#79, i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78]

(126) Union
Arguments: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sales#84, number_sales#85]

(127) HashAggregate [codegen id : 118]
Input [6]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sales#84, number_sales#85]
Keys [4]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [partial_sum(sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#86, isEmpty#87, sum#88]
Results [7]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum#89, isEmpty#90, sum#91]

(128) Exchange
Input [7]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum#89, isEmpty#90, sum#91]
Arguments: hashpartitioning(channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, 5), true, [id=#92]

(129) HashAggregate [codegen id : 119]
Input [7]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum#89, isEmpty#90, sum#91]
Keys [4]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [sum(sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sales#84)#93, sum(number_sales#85)#94]
Results [6]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum(sales#84)#93 AS sum_sales#95, sum(number_sales#85)#94 AS number_sales#96]

(130) ReusedExchange [Reuses operator id: 84]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#97, isEmpty#98, count#99]

(131) HashAggregate [codegen id : 158]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#97, isEmpty#98, count#99]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#100, count(1)#101]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#100 AS sales#42, count(1)#101 AS number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#100 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#102]

(132) Filter [codegen id : 158]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#102]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#102) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#102 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(133) Project [codegen id : 158]
Output [6]: [store AS channel#47, i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#102]

(134) ReusedExchange [Reuses operator id: 103]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#103, isEmpty#104, count#105]

(135) HashAggregate [codegen id : 197]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#103, isEmpty#104, count#105]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#106, count(1)#107]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#106 AS sales#60, count(1)#107 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#106 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#108]

(136) Filter [codegen id : 197]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#108]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#108) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#108 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(137) Project [codegen id : 197]
Output [6]: [catalog AS channel#109, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#108]

(138) ReusedExchange [Reuses operator id: 122]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#110, isEmpty#111, count#112]

(139) HashAggregate [codegen id : 236]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#110, isEmpty#111, count#112]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#113, count(1)#114]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#113 AS sales#76, count(1)#114 AS number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#113 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#115]

(140) Filter [codegen id : 236]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#115]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#115) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#115 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(141) Project [codegen id : 236]
Output [6]: [web AS channel#79, i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#115]

(142) Union
Arguments: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119, sales#120, number_sales#121]

(143) HashAggregate [codegen id : 237]
Input [6]: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119, sales#120, number_sales#121]
Keys [4]: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119]
Functions [2]: [partial_sum(sales#120), partial_sum(number_sales#121)]
Aggregate Attributes [3]: [sum#122, isEmpty#123, sum#124]
Results [7]: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119, sum#125, isEmpty#126, sum#127]

(144) Exchange
Input [7]: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119, sum#125, isEmpty#126, sum#127]
Arguments: hashpartitioning(channel#116, i_brand_id#117, i_class_id#118, i_category_id#119, 5), true, [id=#128]

(145) HashAggregate [codegen id : 238]
Input [7]: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119, sum#125, isEmpty#126, sum#127]
Keys [4]: [channel#116, i_brand_id#117, i_class_id#118, i_category_id#119]
Functions [2]: [sum(sales#120), sum(number_sales#121)]
Aggregate Attributes [2]: [sum(sales#120)#129, sum(number_sales#121)#130]
Results [5]: [channel#116, i_brand_id#117, i_class_id#118, sum(sales#120)#129 AS sum_sales#95, sum(number_sales#121)#130 AS number_sales#96]

(146) HashAggregate [codegen id : 238]
Input [5]: [channel#116, i_brand_id#117, i_class_id#118, sum_sales#95, number_sales#96]
Keys [3]: [channel#116, i_brand_id#117, i_class_id#118]
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]
Aggregate Attributes [3]: [sum#131, isEmpty#132, sum#133]
Results [6]: [channel#116, i_brand_id#117, i_class_id#118, sum#134, isEmpty#135, sum#136]

(147) Exchange
Input [6]: [channel#116, i_brand_id#117, i_class_id#118, sum#134, isEmpty#135, sum#136]
Arguments: hashpartitioning(channel#116, i_brand_id#117, i_class_id#118, 5), true, [id=#137]

(148) HashAggregate [codegen id : 239]
Input [6]: [channel#116, i_brand_id#117, i_class_id#118, sum#134, isEmpty#135, sum#136]
Keys [3]: [channel#116, i_brand_id#117, i_class_id#118]
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]
Aggregate Attributes [2]: [sum(sum_sales#95)#138, sum(number_sales#96)#139]
Results [6]: [channel#116, i_brand_id#117, i_class_id#118, null AS i_category_id#140, sum(sum_sales#95)#138 AS sum(sum_sales)#141, sum(number_sales#96)#139 AS sum(number_sales)#142]

(149) Union
Arguments: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]

(150) HashAggregate [codegen id : 240]
Input [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]
Keys [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]

(151) Exchange
Input [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]
Arguments: hashpartitioning(channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148, 5), true, [id=#149]

(152) HashAggregate [codegen id : 241]
Input [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]
Keys [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#143, i_brand_id#144, i_class_id#145, i_category_id#146, sum_sales#147, number_sales#148]

(153) ReusedExchange [Reuses operator id: 84]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#150, isEmpty#151, count#152]

(154) HashAggregate [codegen id : 280]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#150, isEmpty#151, count#152]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#153, count(1)#154]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#153 AS sales#42, count(1)#154 AS number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#153 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#155]

(155) Filter [codegen id : 280]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#155]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#155) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#155 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(156) Project [codegen id : 280]
Output [6]: [store AS channel#47, i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#155]

(157) ReusedExchange [Reuses operator id: 103]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#156, isEmpty#157, count#158]

(158) HashAggregate [codegen id : 319]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#156, isEmpty#157, count#158]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#159, count(1)#160]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#159 AS sales#60, count(1)#160 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#159 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#161]

(159) Filter [codegen id : 319]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#161]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#161) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#161 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(160) Project [codegen id : 319]
Output [6]: [catalog AS channel#162, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#161]

(161) ReusedExchange [Reuses operator id: 122]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#163, isEmpty#164, count#165]

(162) HashAggregate [codegen id : 358]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#163, isEmpty#164, count#165]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#166, count(1)#167]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#166 AS sales#76, count(1)#167 AS number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#166 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#168]

(163) Filter [codegen id : 358]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#168]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#168) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#168 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(164) Project [codegen id : 358]
Output [6]: [web AS channel#79, i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#168]

(165) Union
Arguments: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172, sales#173, number_sales#174]

(166) HashAggregate [codegen id : 359]
Input [6]: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172, sales#173, number_sales#174]
Keys [4]: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172]
Functions [2]: [partial_sum(sales#173), partial_sum(number_sales#174)]
Aggregate Attributes [3]: [sum#175, isEmpty#176, sum#177]
Results [7]: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172, sum#178, isEmpty#179, sum#180]

(167) Exchange
Input [7]: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172, sum#178, isEmpty#179, sum#180]
Arguments: hashpartitioning(channel#169, i_brand_id#170, i_class_id#171, i_category_id#172, 5), true, [id=#181]

(168) HashAggregate [codegen id : 360]
Input [7]: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172, sum#178, isEmpty#179, sum#180]
Keys [4]: [channel#169, i_brand_id#170, i_class_id#171, i_category_id#172]
Functions [2]: [sum(sales#173), sum(number_sales#174)]
Aggregate Attributes [2]: [sum(sales#173)#182, sum(number_sales#174)#183]
Results [4]: [channel#169, i_brand_id#170, sum(sales#173)#182 AS sum_sales#95, sum(number_sales#174)#183 AS number_sales#96]

(169) HashAggregate [codegen id : 360]
Input [4]: [channel#169, i_brand_id#170, sum_sales#95, number_sales#96]
Keys [2]: [channel#169, i_brand_id#170]
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]
Aggregate Attributes [3]: [sum#184, isEmpty#185, sum#186]
Results [5]: [channel#169, i_brand_id#170, sum#187, isEmpty#188, sum#189]

(170) Exchange
Input [5]: [channel#169, i_brand_id#170, sum#187, isEmpty#188, sum#189]
Arguments: hashpartitioning(channel#169, i_brand_id#170, 5), true, [id=#190]

(171) HashAggregate [codegen id : 361]
Input [5]: [channel#169, i_brand_id#170, sum#187, isEmpty#188, sum#189]
Keys [2]: [channel#169, i_brand_id#170]
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]
Aggregate Attributes [2]: [sum(sum_sales#95)#191, sum(number_sales#96)#192]
Results [6]: [channel#169, i_brand_id#170, null AS i_class_id#193, null AS i_category_id#194, sum(sum_sales#95)#191 AS sum(sum_sales)#195, sum(number_sales#96)#192 AS sum(number_sales)#196]

(172) Union
Arguments: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]

(173) HashAggregate [codegen id : 362]
Input [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]
Keys [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]

(174) Exchange
Input [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]
Arguments: hashpartitioning(channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202, 5), true, [id=#203]

(175) HashAggregate [codegen id : 363]
Input [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]
Keys [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#197, i_brand_id#198, i_class_id#199, i_category_id#200, sum_sales#201, number_sales#202]

(176) ReusedExchange [Reuses operator id: 84]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#204, isEmpty#205, count#206]

(177) HashAggregate [codegen id : 402]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#204, isEmpty#205, count#206]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#207, count(1)#208]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#207 AS sales#42, count(1)#208 AS number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#207 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#209]

(178) Filter [codegen id : 402]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#209]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#209) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#209 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(179) Project [codegen id : 402]
Output [6]: [store AS channel#47, i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#209]

(180) ReusedExchange [Reuses operator id: 103]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#210, isEmpty#211, count#212]

(181) HashAggregate [codegen id : 441]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#210, isEmpty#211, count#212]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#213, count(1)#214]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#213 AS sales#60, count(1)#214 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#213 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#215]

(182) Filter [codegen id : 441]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#215]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#215) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#215 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(183) Project [codegen id : 441]
Output [6]: [catalog AS channel#216, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#215]

(184) ReusedExchange [Reuses operator id: 122]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#217, isEmpty#218, count#219]

(185) HashAggregate [codegen id : 480]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#217, isEmpty#218, count#219]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#220, count(1)#221]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#220 AS sales#76, count(1)#221 AS number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#220 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#222]

(186) Filter [codegen id : 480]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#222]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#222) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#222 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(187) Project [codegen id : 480]
Output [6]: [web AS channel#79, i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#222]

(188) Union
Arguments: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226, sales#227, number_sales#228]

(189) HashAggregate [codegen id : 481]
Input [6]: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226, sales#227, number_sales#228]
Keys [4]: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226]
Functions [2]: [partial_sum(sales#227), partial_sum(number_sales#228)]
Aggregate Attributes [3]: [sum#229, isEmpty#230, sum#231]
Results [7]: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226, sum#232, isEmpty#233, sum#234]

(190) Exchange
Input [7]: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226, sum#232, isEmpty#233, sum#234]
Arguments: hashpartitioning(channel#223, i_brand_id#224, i_class_id#225, i_category_id#226, 5), true, [id=#235]

(191) HashAggregate [codegen id : 482]
Input [7]: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226, sum#232, isEmpty#233, sum#234]
Keys [4]: [channel#223, i_brand_id#224, i_class_id#225, i_category_id#226]
Functions [2]: [sum(sales#227), sum(number_sales#228)]
Aggregate Attributes [2]: [sum(sales#227)#236, sum(number_sales#228)#237]
Results [3]: [channel#223, sum(sales#227)#236 AS sum_sales#95, sum(number_sales#228)#237 AS number_sales#96]

(192) HashAggregate [codegen id : 482]
Input [3]: [channel#223, sum_sales#95, number_sales#96]
Keys [1]: [channel#223]
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]
Aggregate Attributes [3]: [sum#238, isEmpty#239, sum#240]
Results [4]: [channel#223, sum#241, isEmpty#242, sum#243]

(193) Exchange
Input [4]: [channel#223, sum#241, isEmpty#242, sum#243]
Arguments: hashpartitioning(channel#223, 5), true, [id=#244]

(194) HashAggregate [codegen id : 483]
Input [4]: [channel#223, sum#241, isEmpty#242, sum#243]
Keys [1]: [channel#223]
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]
Aggregate Attributes [2]: [sum(sum_sales#95)#245, sum(number_sales#96)#246]
Results [6]: [channel#223, null AS i_brand_id#247, null AS i_class_id#248, null AS i_category_id#249, sum(sum_sales#95)#245 AS sum(sum_sales)#250, sum(number_sales#96)#246 AS sum(number_sales)#251]

(195) Union
Arguments: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]

(196) HashAggregate [codegen id : 484]
Input [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]
Keys [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]

(197) Exchange
Input [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]
Arguments: hashpartitioning(channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257, 5), true, [id=#258]

(198) HashAggregate [codegen id : 485]
Input [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]
Keys [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#252, i_brand_id#253, i_class_id#254, i_category_id#255, sum_sales#256, number_sales#257]

(199) ReusedExchange [Reuses operator id: 84]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#259, isEmpty#260, count#261]

(200) HashAggregate [codegen id : 524]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#259, isEmpty#260, count#261]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#262, count(1)#263]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#262 AS sales#42, count(1)#263 AS number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#262 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#264]

(201) Filter [codegen id : 524]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#264]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#264) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#264 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(202) Project [codegen id : 524]
Output [6]: [store AS channel#47, i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#264]

(203) ReusedExchange [Reuses operator id: 103]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#265, isEmpty#266, count#267]

(204) HashAggregate [codegen id : 563]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#265, isEmpty#266, count#267]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#268, count(1)#269]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#268 AS sales#60, count(1)#269 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#268 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#270]

(205) Filter [codegen id : 563]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#270]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#270) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#270 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(206) Project [codegen id : 563]
Output [6]: [catalog AS channel#271, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#270]

(207) ReusedExchange [Reuses operator id: 122]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#272, isEmpty#273, count#274]

(208) HashAggregate [codegen id : 602]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#272, isEmpty#273, count#274]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#275, count(1)#276]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#275 AS sales#76, count(1)#276 AS number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#275 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#277]

(209) Filter [codegen id : 602]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#277]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#277) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#277 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(210) Project [codegen id : 602]
Output [6]: [web AS channel#79, i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#277]

(211) Union
Arguments: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281, sales#282, number_sales#283]

(212) HashAggregate [codegen id : 603]
Input [6]: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281, sales#282, number_sales#283]
Keys [4]: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281]
Functions [2]: [partial_sum(sales#282), partial_sum(number_sales#283)]
Aggregate Attributes [3]: [sum#284, isEmpty#285, sum#286]
Results [7]: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281, sum#287, isEmpty#288, sum#289]

(213) Exchange
Input [7]: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281, sum#287, isEmpty#288, sum#289]
Arguments: hashpartitioning(channel#278, i_brand_id#279, i_class_id#280, i_category_id#281, 5), true, [id=#290]

(214) HashAggregate [codegen id : 604]
Input [7]: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281, sum#287, isEmpty#288, sum#289]
Keys [4]: [channel#278, i_brand_id#279, i_class_id#280, i_category_id#281]
Functions [2]: [sum(sales#282), sum(number_sales#283)]
Aggregate Attributes [2]: [sum(sales#282)#291, sum(number_sales#283)#292]
Results [2]: [sum(sales#282)#291 AS sum_sales#95, sum(number_sales#283)#292 AS number_sales#96]

(215) HashAggregate [codegen id : 604]
Input [2]: [sum_sales#95, number_sales#96]
Keys: []
Functions [2]: [partial_sum(sum_sales#95), partial_sum(number_sales#96)]
Aggregate Attributes [3]: [sum#293, isEmpty#294, sum#295]
Results [3]: [sum#296, isEmpty#297, sum#298]

(216) Exchange
Input [3]: [sum#296, isEmpty#297, sum#298]
Arguments: SinglePartition, true, [id=#299]

(217) HashAggregate [codegen id : 605]
Input [3]: [sum#296, isEmpty#297, sum#298]
Keys: []
Functions [2]: [sum(sum_sales#95), sum(number_sales#96)]
Aggregate Attributes [2]: [sum(sum_sales#95)#300, sum(number_sales#96)#301]
Results [6]: [null AS channel#302, null AS i_brand_id#303, null AS i_class_id#304, null AS i_category_id#305, sum(sum_sales#95)#300 AS sum(sum_sales)#306, sum(number_sales#96)#301 AS sum(number_sales)#307]

(218) Union
Arguments: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]

(219) HashAggregate [codegen id : 606]
Input [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]
Keys [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]

(220) Exchange
Input [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]
Arguments: hashpartitioning(channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313, 5), true, [id=#314]

(221) HashAggregate [codegen id : 607]
Input [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]
Keys [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]

(222) TakeOrderedAndProject
Input [6]: [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]
Arguments: 100, [channel#308 ASC NULLS FIRST, i_brand_id#309 ASC NULLS FIRST, i_class_id#310 ASC NULLS FIRST, i_category_id#311 ASC NULLS FIRST], [channel#308, i_brand_id#309, i_class_id#310, i_category_id#311, sum_sales#312, number_sales#313]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#45, [id=#46]
* HashAggregate (252)
+- Exchange (251)
   +- * HashAggregate (250)
      +- Union (249)
         :- * Project (232)
         :  +- * BroadcastHashJoin Inner BuildRight (231)
         :     :- * Filter (225)
         :     :  +- * ColumnarToRow (224)
         :     :     +- Scan parquet default.store_sales (223)
         :     +- BroadcastExchange (230)
         :        +- * Project (229)
         :           +- * Filter (228)
         :              +- * ColumnarToRow (227)
         :                 +- Scan parquet default.date_dim (226)
         :- * Project (242)
         :  +- * BroadcastHashJoin Inner BuildRight (241)
         :     :- * Filter (235)
         :     :  +- * ColumnarToRow (234)
         :     :     +- Scan parquet default.catalog_sales (233)
         :     +- BroadcastExchange (240)
         :        +- * Project (239)
         :           +- * Filter (238)
         :              +- * ColumnarToRow (237)
         :                 +- Scan parquet default.date_dim (236)
         +- * Project (248)
            +- * BroadcastHashJoin Inner BuildRight (247)
               :- * Filter (245)
               :  +- * ColumnarToRow (244)
               :     +- Scan parquet default.web_sales (243)
               +- ReusedExchange (246)


(223) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(224) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(225) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(226) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(227) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(228) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(229) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(230) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#315]

(231) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(232) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#316, ss_list_price#4 AS list_price#317]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(233) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(234) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49]

(235) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49]
Condition : isnotnull(cs_sold_date_sk#18)

(236) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(237) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(238) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(239) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(240) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#318]

(241) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(242) Project [codegen id : 4]
Output [2]: [cs_quantity#48 AS quantity#319, cs_list_price#49 AS list_price#320]
Input [4]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49, d_date_sk#10]

(243) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(244) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65]

(245) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65]
Condition : isnotnull(ws_sold_date_sk#22)

(246) ReusedExchange [Reuses operator id: 240]
Output [1]: [d_date_sk#10]

(247) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(248) Project [codegen id : 6]
Output [2]: [ws_quantity#64 AS quantity#321, ws_list_price#65 AS list_price#322]
Input [4]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65, d_date_sk#10]

(249) Union
Arguments: [quantity#323, list_price#324]

(250) HashAggregate [codegen id : 7]
Input [2]: [quantity#323, list_price#324]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#324 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#325, count#326]
Results [2]: [sum#327, count#328]

(251) Exchange
Input [2]: [sum#327, count#328]
Arguments: SinglePartition, true, [id=#329]

(252) HashAggregate [codegen id : 8]
Input [2]: [sum#327, count#328]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#324 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#330]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#330 AS average_sales#331]

Subquery:2 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:3 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:4 Hosting operator id = 132 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:5 Hosting operator id = 136 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:6 Hosting operator id = 140 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:7 Hosting operator id = 155 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:8 Hosting operator id = 159 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:9 Hosting operator id = 163 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:10 Hosting operator id = 178 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:11 Hosting operator id = 182 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:12 Hosting operator id = 186 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:13 Hosting operator id = 201 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:14 Hosting operator id = 205 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:15 Hosting operator id = 209 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]


