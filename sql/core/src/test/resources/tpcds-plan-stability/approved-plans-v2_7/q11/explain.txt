== Physical Plan ==
TakeOrderedAndProject (73)
+- * Project (72)
   +- * BroadcastHashJoin Inner BuildRight (71)
      :- * Project (57)
      :  +- * BroadcastHashJoin Inner BuildRight (56)
      :     :- * BroadcastHashJoin Inner BuildRight (37)
      :     :  :- * Project (20)
      :     :  :  +- * Filter (19)
      :     :  :     +- * HashAggregate (18)
      :     :  :        +- Exchange (17)
      :     :  :           +- * HashAggregate (16)
      :     :  :              +- * Project (15)
      :     :  :                 +- * BroadcastHashJoin Inner BuildRight (14)
      :     :  :                    :- * Project (9)
      :     :  :                    :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                    :     :- * Filter (3)
      :     :  :                    :     :  +- * ColumnarToRow (2)
      :     :  :                    :     :     +- Scan parquet default.customer (1)
      :     :  :                    :     +- BroadcastExchange (7)
      :     :  :                    :        +- * Filter (6)
      :     :  :                    :           +- * ColumnarToRow (5)
      :     :  :                    :              +- Scan parquet default.store_sales (4)
      :     :  :                    +- BroadcastExchange (13)
      :     :  :                       +- * Filter (12)
      :     :  :                          +- * ColumnarToRow (11)
      :     :  :                             +- Scan parquet default.date_dim (10)
      :     :  +- BroadcastExchange (36)
      :     :     +- * HashAggregate (35)
      :     :        +- Exchange (34)
      :     :           +- * HashAggregate (33)
      :     :              +- * Project (32)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (31)
      :     :                    :- * Project (26)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :                    :     :- * Filter (23)
      :     :                    :     :  +- * ColumnarToRow (22)
      :     :                    :     :     +- Scan parquet default.customer (21)
      :     :                    :     +- ReusedExchange (24)
      :     :                    +- BroadcastExchange (30)
      :     :                       +- * Filter (29)
      :     :                          +- * ColumnarToRow (28)
      :     :                             +- Scan parquet default.date_dim (27)
      :     +- BroadcastExchange (55)
      :        +- * Project (54)
      :           +- * Filter (53)
      :              +- * HashAggregate (52)
      :                 +- Exchange (51)
      :                    +- * HashAggregate (50)
      :                       +- * Project (49)
      :                          +- * BroadcastHashJoin Inner BuildRight (48)
      :                             :- * Project (46)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
      :                             :     :- * Filter (40)
      :                             :     :  +- * ColumnarToRow (39)
      :                             :     :     +- Scan parquet default.customer (38)
      :                             :     +- BroadcastExchange (44)
      :                             :        +- * Filter (43)
      :                             :           +- * ColumnarToRow (42)
      :                             :              +- Scan parquet default.web_sales (41)
      :                             +- ReusedExchange (47)
      +- BroadcastExchange (70)
         +- * HashAggregate (69)
            +- Exchange (68)
               +- * HashAggregate (67)
                  +- * Project (66)
                     +- * BroadcastHashJoin Inner BuildRight (65)
                        :- * Project (63)
                        :  +- * BroadcastHashJoin Inner BuildRight (62)
                        :     :- * Filter (60)
                        :     :  +- * ColumnarToRow (59)
                        :     :     +- Scan parquet default.customer (58)
                        :     +- ReusedExchange (61)
                        +- ReusedExchange (64)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]

(6) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]
Condition : (isnotnull(ss_customer_sk#10) AND isnotnull(ss_sold_date_sk#9))

(7) BroadcastExchange
Input [4]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#13]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: None

(9) Project [codegen id : 3]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_list_price#12]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#14, d_year#15]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2001)) AND isnotnull(d_date_sk#14))

(13) BroadcastExchange
Input [2]: [d_date_sk#14, d_year#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#14]
Join condition: None

(15) Project [codegen id : 3]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_list_price#12, d_year#15]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_list_price#12, d_date_sk#14, d_year#15]

(16) HashAggregate [codegen id : 3]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_list_price#12, d_year#15]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#17]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#18]

(17) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#18]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), true, [id=#19]

(18) HashAggregate [codegen id : 16]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))#20]
Results [2]: [c_customer_id#2 AS customer_id#21, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))#20,18,2) AS year_total#22]

(19) Filter [codegen id : 16]
Input [2]: [customer_id#21, year_total#22]
Condition : (isnotnull(year_total#22) AND (year_total#22 > 0.00))

(20) Project [codegen id : 16]
Output [2]: [customer_id#21 AS customer_id#23, year_total#22 AS year_total#24]
Input [2]: [customer_id#21, year_total#22]

(21) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(22) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(23) Filter [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(24) ReusedExchange [Reuses operator id: 7]
Output [4]: [ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: None

(26) Project [codegen id : 6]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_list_price#12]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_customer_sk#10, ss_ext_discount_amt#11, ss_ext_list_price#12]

(27) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(28) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]

(29) Filter [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2002)) AND isnotnull(d_date_sk#14))

(30) BroadcastExchange
Input [2]: [d_date_sk#14, d_year#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#14]
Join condition: None

(32) Project [codegen id : 6]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_list_price#12, d_year#15]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#9, ss_ext_discount_amt#11, ss_ext_list_price#12, d_date_sk#14, d_year#15]

(33) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#11, ss_ext_list_price#12, d_year#15]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#26]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#27]

(34) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#27]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), true, [id=#28]

(35) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#27]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#15, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))#29]
Results [5]: [c_customer_id#2 AS customer_id#30, c_first_name#3 AS customer_first_name#31, c_last_name#4 AS customer_last_name#32, c_email_address#8 AS customer_email_address#33, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#12 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#11 as decimal(8,2)))), DecimalType(8,2), true)))#29,18,2) AS year_total#34]

(36) BroadcastExchange
Input [5]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#35]

(37) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#30]
Join condition: None

(38) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(39) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(40) Filter [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(41) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(42) ColumnarToRow [codegen id : 8]
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(43) Filter [codegen id : 8]
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Condition : (isnotnull(ws_bill_customer_sk#37) AND isnotnull(ws_sold_date_sk#36))

(44) BroadcastExchange
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#40]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#37]
Join condition: None

(46) Project [codegen id : 10]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(47) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#14, d_year#15]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#14]
Join condition: None

(49) Project [codegen id : 10]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#15]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39, d_date_sk#14, d_year#15]

(50) HashAggregate [codegen id : 10]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#15]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#41]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, sum#42]

(51) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, sum#42]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, 5), true, [id=#43]

(52) HashAggregate [codegen id : 11]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, sum#42]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#44]
Results [2]: [c_customer_id#2 AS customer_id#45, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#44,18,2) AS year_total#46]

(53) Filter [codegen id : 11]
Input [2]: [customer_id#45, year_total#46]
Condition : (isnotnull(year_total#46) AND (year_total#46 > 0.00))

(54) Project [codegen id : 11]
Output [2]: [customer_id#45 AS customer_id#47, year_total#46 AS year_total#48]
Input [2]: [customer_id#45, year_total#46]

(55) BroadcastExchange
Input [2]: [customer_id#47, year_total#48]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#49]

(56) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#47]
Join condition: None

(57) Project [codegen id : 16]
Output [8]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34, year_total#48]
Input [9]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34, customer_id#47, year_total#48]

(58) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(59) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(60) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(61) ReusedExchange [Reuses operator id: 44]
Output [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(62) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#37]
Join condition: None

(63) Project [codegen id : 14]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(64) ReusedExchange [Reuses operator id: 30]
Output [2]: [d_date_sk#14, d_year#15]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#14]
Join condition: None

(66) Project [codegen id : 14]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#15]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39, d_date_sk#14, d_year#15]

(67) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#15]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#50]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, sum#51]

(68) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, sum#51]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, 5), true, [id=#52]

(69) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15, sum#51]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#15]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#53]
Results [2]: [c_customer_id#2 AS customer_id#54, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#53,18,2) AS year_total#55]

(70) BroadcastExchange
Input [2]: [customer_id#54, year_total#55]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#56]

(71) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#54]
Join condition: (CASE WHEN (year_total#48 > 0.00) THEN CheckOverflow((promote_precision(year_total#55) / promote_precision(year_total#48)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#24 > 0.00) THEN CheckOverflow((promote_precision(year_total#34) / promote_precision(year_total#24)), DecimalType(38,20), true) ELSE 0E-20 END)

(72) Project [codegen id : 16]
Output [4]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33]
Input [10]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34, year_total#48, customer_id#54, year_total#55]

(73) TakeOrderedAndProject
Input [4]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33]
Arguments: 100, [customer_id#30 ASC NULLS FIRST, customer_first_name#31 ASC NULLS FIRST, customer_last_name#32 ASC NULLS FIRST, customer_email_address#33 ASC NULLS FIRST], [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33]

